###############################################################################
# This test aims at verifying the correctness of the P_S counters implemented
# for the data dictinoary. Various SQL statements ar executed, and we check
# whether the resulting changes in the counters make sense.

###############################################################################
# Prepare for test run

--source include/dd_pfs_init.inc

###############################################################################
# Make sure we have the DD objects representing the DD tables in the DD cache
# to avoid complications due to having a cache miss while accessing the DD
# tables. We do this by creating and dropping a dummy table and schema.

create schema s;
create table s.t1(i int);
create table s.t2(i int) tablespace innodb_system;
drop schema s;
source include/dd_pfs_save_state.inc;

###############################################################################
# Create schema.
#
# One schema object is allocated in dd::create_schema() and deleted on function
# exit. The object is cloned in dd_client::store(), and the clone is deleted
# upon commit. So we get 2 allocations and 2 frees, net object count 0.

let $object_alloc= 2;
let $object_free= 2;
let $object_count= 0;
let $operation= CREATE SCHEMA s;
source include/dd_pfs_report_state.inc;

###############################################################################
# Create a simple MyISAM table.
#
# We will allocate a schema (+1), a table and a column (+2), clone the latter
# while storing (+2), delete clones during intermediate commit (-2), acquire
# (+2) and clone for modification (+2), delete unique ptr (-2) and finally auto
# delete the objects that were acquired for modification (-2). The schema,
# table and column will be left in the DD cache. So we get 9 allocations, 6
# frees, and 3 objects left.

let $object_alloc= 9;
let $object_free= 6;
let $object_count= 3;
let $operation= CREATE TABLE s.t_myisam(i int) engine myisam;
--source include/dd_pfs_report_state.inc

###############################################################################
# Create a simple InnoDB table.
#
# The dd::Table itself will contain 10 objects, including hidden indexes and 
# columns added by InnoDB. We will allocate the table and add columns and indexes
# (+10), then store the object, where SDI creation will allocate tablespace
# and file objects (+4). In store(), we will then clone the table (+10). Then,
# rea_create_base_table() will call acquire_for_mod...(), where we will clone (+10).
# In ha_create, when opening the table, the tablespace will be acquired uncached (+2),
# then after updating, store() is called again, now allocating tablespaces and files
# (+6) while serializing, then deleting the previously updated object (-10).
# When returning from rea_create...(), the unique_ptr is deleted (-10), and finally,
# reload_fk...() will acquire the table for modification (+10).
#
# Implicit commit will erase the leftover uncommitted objects (-10). Auto releasers
# going out of scope will auto delete the uncached objects (-22).
#
# Note that unlike MyISAM, the table object will not be left in the DD cache
# because there is no intermediate commit that clears the list of uncommited
# objects.
#
# So the end result is that we allocate 52 objects, free 52 objects, and leave
# 0 objects.

let $object_alloc= 52;
let $object_free= 52;
let $object_count= 0;
let $operation= CREATE TABLE s.t_innodb_1(i int) TABLESPACE innodb_system;
--source include/dd_pfs_report_state.inc

###############################################################################
# Create another simple table in same schema.
#
# We get the same scenario as above.

let $object_alloc= 52;
let $object_free= 52;
let $object_count= 0;
let $operation= CREATE TABLE s.t_innodb_2(i int) TABLESPACE innodb_system;
--source include/dd_pfs_report_state.inc

###############################################################################
# First select from a cached table.
#
# A select from a table that is already in the DD cache will not cause a cache
# miss, and the object count will stay the same.

let $object_alloc= 0;
let $object_free= 0;
let $object_count= 0;
let $operation= SELECT * FROM s.t_myisam;
--source include/dd_pfs_report_state.inc

###############################################################################
# First select from an uncached table.
#
# A select from a table that is not in the TDC or DD cache will cause a cache
# miss. Thus, a set of new DD objects will be allocated and left in the DD cache.
# The 10 objects that are part of the table meta data will be allocated and left
# in the DD cache. Additionally, when the table share is filled in, the
# tablespace and tablespace file objects will be allocated in order to get the
# tablespace name. These uncached objects are freed when the auto releaser goes
# out of scope. Hence, we get 12 allocations, 2 frees, and 10 objects left.

let $object_alloc= 12;
let $object_free= 2;
let $object_count= 10;
let $operation= SELECT * FROM s.t_innodb_1;
--source include/dd_pfs_report_state.inc

###############################################################################
# First select from another uncached table.
#
# We get the same scenario and object counts as above.

let $object_alloc= 12;
let $object_free= 2;
let $object_count= 10;
let $operation= SELECT * FROM s.t_innodb_2;
--source include/dd_pfs_report_state.inc

###############################################################################
# Repeated select from a table.
#
# Another select from the same table will reuse the table share, hence no DD
# cache miss. So there are no allocations, frees or leftover objects.

let $object_alloc= 0;
let $object_free= 0;
let $object_count= 0;
let $operation= SELECT * FROM s.t_innodb_1;
--source include/dd_pfs_report_state.inc

###############################################################################
# Drop a table.
#
# We first fill in tablespace names referred by the table and index, allocating
# tablespace and file objects uncached twice (+4). These are then freed (-4).
# While updating the SDI, the tablespace and file objects are allocated uncached
# again (+2). Then, the table object(s) are cloned (+10) and kept as uncommitted
# objects, and the cached objects are freed (-10). Finally, the uncommitted
# objects are freed (-10), and the remaining uncached ones are deleted (-2). So
# this results in 16 allocations and 26 frees, and a net change of -10.

let $object_alloc= 16;
let $object_free= 26;
let $object_count= -10;
let $operation= DROP TABLE s.t_innodb_1;
--source include/dd_pfs_report_state.inc

###############################################################################
# Drop another table.
#
# We get the same scenario as above.

let $object_alloc= 16;
let $object_free= 26;
let $object_count= -10;
let $operation= DROP TABLE s.t_innodb_2;
--source include/dd_pfs_report_state.inc

###############################################################################
# Drop the schema.
#
# We will clone the table object (+2) and the schema object (+1) and store them
# as uncommitted objects. Then, the objects will be freed from the DD cache (-3).
# Finally, the uncommitted objects are freed (-3). This gives us 3 allocations,
# 6 frees and a net change of -3 objects.

let $object_alloc= 3;
let $object_free= 6;
let $object_count= -3;
let $operation= DROP SCHEMA s;
--source include/dd_pfs_report_state.inc

###############################################################################
# Create a more complex table.
#
# We create a table similar to the DD table mysql.tables, then we select from
# the table to bring its meta data into the DD cache. This will allow us to
# see its object count and size.

--disable_query_log
--disable_result_log
SET foreign_key_checks= 0;
CREATE TABLE test.tables (
  `id` bigint unsigned NOT NULL AUTO_INCREMENT,
  `schema_id` bigint unsigned NOT NULL,
  `name` varchar(64) COLLATE utf8_bin NOT NULL,
  `type` enum('BASE TABLE','VIEW','SYSTEM VIEW') COLLATE utf8_bin NOT NULL,
  `engine` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `mysql_version_id` int unsigned NOT NULL,
  `row_format` enum('Fixed','Dynamic','Compressed','Redundant','Compact','Paged') COLLATE utf8_bin DEFAULT NULL,
  `collation_id` bigint unsigned DEFAULT NULL,
  `comment` varchar(2048) COLLATE utf8_bin NOT NULL,
  `hidden` enum('Visible','System','SE','DDL') COLLATE utf8_bin NOT NULL,
  `options` mediumtext COLLATE utf8_bin,
  `se_private_data` mediumtext COLLATE utf8_bin,
  `se_private_id` bigint unsigned DEFAULT NULL,
  `tablespace_id` bigint unsigned DEFAULT NULL,
  `partition_type` enum('HASH','KEY_51','KEY_55','LINEAR_HASH','LINEAR_KEY_51','LINEAR_KEY_55','RANGE','LIST','RANGE_COLUMNS','LIST_COLUMNS','AUTO','AUTO_LINEAR') COLLATE utf8_bin DEFAULT NULL,
  `partition_expression` varchar(2048) COLLATE utf8_bin DEFAULT NULL,
  `partition_expression_utf8` varchar(2048) COLLATE utf8_bin DEFAULT NULL,
  `default_partitioning` enum('NO','YES','NUMBER') COLLATE utf8_bin DEFAULT NULL,
  `subpartition_type` enum('HASH','KEY_51','KEY_55','LINEAR_HASH','LINEAR_KEY_51','LINEAR_KEY_55') COLLATE utf8_bin DEFAULT NULL,
  `subpartition_expression` varchar(2048) COLLATE utf8_bin DEFAULT NULL,
  `subpartition_expression_utf8` varchar(2048) COLLATE utf8_bin DEFAULT NULL,
  `default_subpartitioning` enum('NO','YES','NUMBER') COLLATE utf8_bin DEFAULT NULL,
  `created` timestamp NOT NULL,
  `last_altered` timestamp NOT NULL,
  `view_definition` longblob,
  `view_definition_utf8` longtext COLLATE utf8_bin,
  `view_check_option` enum('NONE','LOCAL','CASCADED') COLLATE utf8_bin DEFAULT NULL,
  `view_is_updatable` enum('NO','YES') COLLATE utf8_bin DEFAULT NULL,
  `view_algorithm` enum('UNDEFINED','TEMPTABLE','MERGE') COLLATE utf8_bin DEFAULT NULL,
  `view_security_type` enum('DEFAULT','INVOKER','DEFINER') COLLATE utf8_bin DEFAULT NULL,
  `view_definer` varchar(192) COLLATE utf8_bin DEFAULT NULL,
  `view_client_collation_id` bigint unsigned DEFAULT NULL,
  `view_connection_collation_id` bigint unsigned DEFAULT NULL,
  `view_column_names` longtext COLLATE utf8_bin,
  `last_checked_for_upgrade_version_id` int unsigned NOT NULL,
  `engine_attribute` json DEFAULT NULL,
  `secondary_engine_attribute` json DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `schema_id` (`schema_id`,`name`),
  UNIQUE KEY `engine` (`engine`,`se_private_id`),
  KEY `engine_2` (`engine`),
  KEY `collation_id` (`collation_id`),
  KEY `tablespace_id` (`tablespace_id`),
  KEY `type` (`type`),
  KEY `view_client_collation_id` (`view_client_collation_id`),
  KEY `view_connection_collation_id` (`view_connection_collation_id`),
  KEY `type_2` (`type`,`view_definer`),
  CONSTRAINT `tables_ibfk_1` FOREIGN KEY (`schema_id`) REFERENCES test.dummy (`id`),
  CONSTRAINT `tables_ibfk_2` FOREIGN KEY (`collation_id`) REFERENCES test.dummy (`id`),
  CONSTRAINT `tables_ibfk_3` FOREIGN KEY (`tablespace_id`) REFERENCES test.dummy (`id`),
  CONSTRAINT `tables_ibfk_4` FOREIGN KEY (`view_client_collation_id`) REFERENCES test.dummy (`id`),
  CONSTRAINT `tables_ibfk_5` FOREIGN KEY (`view_connection_collation_id`) REFERENCES test.dummy (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin STATS_PERSISTENT=0 ROW_FORMAT=DYNAMIC;
SET foreign_key_checks= DEFAULT;
--enable_result_log
--enable_query_log

let $object_alloc= 168;
let $object_free= 0;
let $object_count= 168;
--source include/dd_pfs_save_state.inc
let $operation= SELECT * FROM test.tables;
--source include/dd_pfs_report_state.inc

--echo We will see that the total size allocated is about 40K.

--disable_query_log
--disable_result_log
DROP TABLE test.tables;
--enable_result_log
--enable_query_log

###############################################################################
# Cacche size.
#
# The DD cache capacity for tables is set to max_connections. When the
# capacity is reached, objects will be evicted. So max_connections objects
# can be kept. Below, we assume that the table definition cache size is greater
# than the size of the DD cache table partiiton. We will fill the DD cache with
# user tables and see that we can use up to the max capacity without getting
# additional cache misses.

let $max_tab= `SELECT @@max_connections`;

# First, we create the tables, bring them into the DD cache, and remove them
# from the table definition cache.

--disable_query_log
--disable_result_log
let $i= $max_tab;
while ($i > 0)
{
  dec $i;
  eval CREATE TABLE test.t_$i (i int) TABLESPACE innodb_system;
  eval SELECT * FROM  test.t_$i;
  eval FLUSH TABLES test.t_$i;
}
--enable_result_log
--enable_query_log

# Now, the DD cache should be filled with the user tables, and we should have
# the shares for the DD tables available in the TDC, if needed. Selecting from
# the user tables should be possible without DD cache misses.

--source include/dd_pfs_save_state.inc
--disable_query_log
--disable_result_log
let $i= $max_tab;
while ($i > 0)
{
  dec $i;
  eval SELECT * FROM  test.t_$i;
}
--enable_result_log
--enable_query_log

# Above, when opening the tables, the DD objects are cached, but we will
# acquire the tablespace and tablespace file objects while preparing the
# table share. These are also freed. This is done only once when the share
# is filled, so on next query accessing the table, the existing table share
# is used without any further DD object usage.

let $object_alloc= $max_tab + $max_tab;
let $object_free= $max_tab + $max_tab;
let $object_left= 0;
--source include/dd_pfs_report_state.inc

# Remove the tables.

--disable_query_log
--disable_result_log
let $i= $max_tab;
while ($i > 0)
{
  dec $i;
  eval DROP TABLE  test.t_$i;
}
--enable_result_log
--enable_query_log

###############################################################################
# Mem usage by drop schema
#
# Dropping a schema will hog memory because the dictionary client will store
# all DD objects for the tables in the schema in memory while the schema is
# being deleted. The DROP SCHEMA below will allocate about 2MB of memory.

--disable_query_log
--disable_result_log
CREATE SCHEMA s;
let $i= 100;
while ($i > 0)
{
  dec $i;
  eval CREATE TABLE s.t_$i (i int, j int, k int, l int);
}
--enable_result_log
--enable_query_log

--source include/dd_pfs_save_state.inc
let $object_alloc= 3801;
let $object_free= 3802;
let $object_left= -1;
let $operation= DROP SCHEMA s;
--source include/dd_pfs_report_state.inc

# Using the DD P_S instrumentation, it will at least be possible to monitor
# the memory usage.

###############################################################################
# Cleanup.

--source include/dd_pfs_cleanup.inc
