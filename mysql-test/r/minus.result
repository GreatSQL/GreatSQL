drop table if exists t1,t2,t3,t4,t5,t6;
CREATE TABLE t1 (a int not null, b char (10) not null);
insert into t1 values(1,'a'),(2,'b'),(3,'c'),(3,'c');
CREATE TABLE t2 (a int not null, b char (10) not null);
insert into t2 values (3,'c'),(4,'d'),(5,'f'),(6,'e');
analyze table t1;
Table	Op	Msg_type	Msg_text
test.t1	analyze	status	OK
analyze table t2;
Table	Op	Msg_type	Msg_text
test.t2	analyze	status	OK
select a,b from t1 minus select a,b from t2;
a	b
1	a
2	b
select a,b from t1 minus select a,b from t2 order by b;
a	b
1	a
2	b
select a,b from t1 minus select a,b from t2 minus select 7,'g';
a	b
1	a
2	b
select 0,'#' minus select a,b from t1 minus select a,b from t2 minus select 7,'gg';
0	#
0	#
select a,b from t1 minus select a,b from t1;
a	b
select 't1',b,count(*) from t1 group by b MINUS select 't2',b,count(*) from t2 group by b;
t1	b	count(*)
t1	a	1
t1	b	1
t1	c	2
(select a,b from t1 limit 2)  minus (select a,b from t2 order by a) limit 4;
a	b
1	a
2	b
(select a,b from t1 limit 2)  minus (select a,b from t2 order by a limit 1);
a	b
1	a
2	b
(select a,b from t1 limit 2)  minus (select a,b from t2 order by a limit 1) order by b desc;
a	b
2	b
1	a
(select a,b from t1 limit 2)  minus (select a,b from t2 order by a limit 1) order by t1.b;
ERROR 42000: Table 't1' from one of the SELECTs cannot be used in global ORDER clause
explain (select a,b from t1 limit 2)  minus (select a,b from t2 order by a limit 1) order by b desc;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	PRIMARY	t1	NULL	ALL	NULL	NULL	NULL	NULL	#	#	NULL
2	EXCEPT	t2	NULL	ALL	NULL	NULL	NULL	NULL	#	#	Using filesort
3	EXCEPT RESULT	<except1,2>	NULL	ALL	NULL	NULL	NULL	NULL	#	#	Using temporary; Using filesort
Warnings:
Note	1003	(/* select#1 */ select `test`.`t1`.`a` AS `a`,`test`.`t1`.`b` AS `b` from `test`.`t1` limit 2) except (/* select#2 */ select `test`.`t2`.`a` AS `a`,`test`.`t2`.`b` AS `b` from `test`.`t2` order by `test`.`t2`.`a` limit 1) order by `b` desc
select count(*) from (
(select                      a,b from t1 limit 2)  minus (select a,b from t2 order by a)) q;
count(*)
2
(select sql_calc_found_rows  a,b from t1 limit 2)  minus (select a,b from t2 order by a) limit 2;
a	b
1	a
2	b
Warnings:
Warning	1287	SQL_CALC_FOUND_ROWS is deprecated and will be removed in a future release. Consider using two separate queries instead.
select found_rows();
found_rows()
2
Warnings:
Warning	1287	FOUND_ROWS() is deprecated and will be removed in a future release. Consider using COUNT(*) instead.
select count(*) from (
select                      a,b from t1  minus select a,b from t2) q;
count(*)
2
select sql_calc_found_rows  a,b from t1  minus select a,b from t2 limit 2;
a	b
1	a
2	b
Warning	1287	SQL_CALC_FOUND_ROWS is deprecated and will be removed in a future release. Consider using two separate queries instead.
Warnings:
select found_rows();
found_rows()
2
Warnings:
Warning	1287	FOUND_ROWS() is deprecated and will be removed in a future release. Consider using COUNT(*) instead.
explain 
select * from t1 where a in
(select a from t1 minus select a from t1 order by (select a))
minus select * from t1 order by (select a);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	PRIMARY	t1	NULL	ALL	NULL	NULL	NULL	NULL	#	#	Using where
2	DEPENDENT SUBQUERY	t1	NULL	ALL	NULL	NULL	NULL	NULL	#	#	Using where
3	DEPENDENT EXCEPT	t1	NULL	ALL	NULL	NULL	NULL	NULL	#	#	Using where
5	EXCEPT RESULT	<except2,3>	NULL	ALL	NULL	NULL	NULL	NULL	#	#	Using temporary
7	EXCEPT	t1	NULL	ALL	NULL	NULL	NULL	NULL	#	#	NULL
9	EXCEPT RESULT	<except1,7>	NULL	ALL	NULL	NULL	NULL	NULL	#	#	Using temporary; Using filesort
Warnings:
Note	1276	Field or reference 'a' of SELECT #6 was resolved in SELECT #2
Note	1249	Select 6 was reduced during optimization
Note	1276	Field or reference 'a' of SELECT #10 was resolved in SELECT #1
Note	1249	Select 10 was reduced during optimization
Note	1003	/* select#1 */ select `test`.`t1`.`a` AS `a`,`test`.`t1`.`b` AS `b` from `test`.`t1` where <in_optimizer>(`test`.`t1`.`a`,<exists>(/* select#2 */ select `test`.`t1`.`a` from `test`.`t1` where (<cache>(`test`.`t1`.`a`) = `test`.`t1`.`a`) except /* select#3 */ select `test`.`t1`.`a` from `test`.`t1` where (<cache>(`test`.`t1`.`a`) = `test`.`t1`.`a`))) except /* select#7 */ select `test`.`t1`.`a` AS `a`,`test`.`t1`.`b` AS `b` from `test`.`t1` order by `a`
explain select a,b from t1 minus select a,b from t2;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	PRIMARY	t1	NULL	ALL	NULL	NULL	NULL	NULL	#	#	NULL
2	EXCEPT	t2	NULL	ALL	NULL	NULL	NULL	NULL	#	#	NULL
3	EXCEPT RESULT	<except1,2>	NULL	ALL	NULL	NULL	NULL	NULL	#	#	Using temporary
Warnings:
Note	1003	/* select#1 */ select `test`.`t1`.`a` AS `a`,`test`.`t1`.`b` AS `b` from `test`.`t1` except /* select#2 */ select `test`.`t2`.`a` AS `a`,`test`.`t2`.`b` AS `b` from `test`.`t2`
explain select xx from t1 minus select 1;
ERROR 42S22: Unknown column 'xx' in 'field list'
explain select a,b from t1 minus select 1;
ERROR 21000: The used SELECT statements have a different number of columns
explain select 1 minus select a,b from t1 minus select 1;
ERROR 21000: The used SELECT statements have a different number of columns
explain select a,b from t1 minus select 1 limit 0;
ERROR 21000: The used SELECT statements have a different number of columns
select a,b from t1 into outfile 'skr' minus select a,b from t2;
ERROR 42000: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'minus select a,b from t2' at line 1
select a,b from t1 order by a minus select a,b from t2;
ERROR 42000: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'minus select a,b from t2' at line 1
insert into t3 select a from t1 order by a minus select a from t2;
ERROR 42000: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'minus select a from t2' at line 1
INSERT INTO t3 SELECT a FROM t1 LIMIT 1 MINUS SELECT a FROM t2;
ERROR 42000: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'MINUS SELECT a FROM t2' at line 1
create table t3 select a,b from t1 minus select a from t2;
ERROR 21000: The used SELECT statements have a different number of columns
select a,b from t1 minus select a from t2;
ERROR 21000: The used SELECT statements have a different number of columns
select * from t1 minus select a from t2;
ERROR 21000: The used SELECT statements have a different number of columns
select a from t1 minus select * from t2;
ERROR 21000: The used SELECT statements have a different number of columns
select * from t1 minus select SQL_BUFFER_RESULT * from t2;
ERROR 42000: Incorrect usage/placement of 'SQL_BUFFER_RESULT'
create table t3 select a,b from t1 minus select a,b from t2;
insert into t3 select a,b from t1 minus select a,b from t2;
replace into t3 select a,b as c from t1 minus select a,b from t2;
drop table t1,t2,t3;
select * minus select 1;
ERROR HY000: No tables used
select 1 as a,(select a minus select a);
a	(select a minus select a)
1	NULL
(select 1) minus (select 2) order by 0;
ERROR 42S22: Unknown column '0' in 'order clause'
SELECT @a:=1 MINUS SELECT @a:=@a+1;
@a:=1
1
Warnings:
Warning	1287	Setting user variables within expressions is deprecated and will be removed in a future release. Consider alternatives: 'SET variable=expression, ...', or 'SELECT expression(s) INTO variables(s)'.
Warning	1287	Setting user variables within expressions is deprecated and will be removed in a future release. Consider alternatives: 'SET variable=expression, ...', or 'SELECT expression(s) INTO variables(s)'.
(SELECT 1) MINUS (SELECT 2) ORDER BY (SELECT a);
ERROR 42S22: Unknown column 'a' in 'field list'
(SELECT 1,3) MINUS (SELECT 2,1) ORDER BY (SELECT 2);
1	3
1	3
create table t1 (a int);
create table t2 (a int);
insert into t1 values (1),(2),(3),(4),(5);
insert into t2 values (11),(12),(13),(14),(15);
(select * from t1 limit 2) minus (select * from t2 limit 3) limit 4;
a
1
2
(select * from t1 limit 2) minus (select * from t2 limit 3);
a
1
2
(select * from t1 limit 2) minus (select * from t2 limit 20,3);
a
1
2
set SQL_SELECT_LIMIT=2;
(select * from t1 limit 1) minus (select * from t2 limit 3);
a
1
set SQL_SELECT_LIMIT=DEFAULT;
drop table t1,t2;
CREATE TABLE t1 (
cid smallint(5) unsigned NOT NULL default '0',
cv varchar(250) NOT NULL default '',
PRIMARY KEY  (cid),
UNIQUE KEY cv (cv)
) ;
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
INSERT INTO t1 VALUES (8,'dummy');
CREATE TABLE t2 (
cid bigint(20) unsigned NOT NULL auto_increment,
cap varchar(255) NOT NULL default '',
PRIMARY KEY  (cid),
KEY cap (cap)
) ;
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
CREATE TABLE t3 (
gid bigint(20) unsigned NOT NULL auto_increment,
gn varchar(255) NOT NULL default '',
must tinyint(4) default NULL,
PRIMARY KEY  (gid),
KEY gn (gn)
) ;
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
INSERT INTO t3 VALUES (1,'V1',NULL);
CREATE TABLE t4 (
uid bigint(20) unsigned NOT NULL default '0',
gid bigint(20) unsigned default NULL,
rid bigint(20) unsigned default NULL,
cid bigint(20) unsigned default NULL,
UNIQUE KEY m (uid,gid,rid,cid),
KEY uid (uid),
KEY rid (rid),
KEY cid (cid),
KEY container (gid,rid,cid)
) ;
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
INSERT INTO t4 VALUES (1,1,NULL,NULL);
CREATE TABLE t5 (
rid bigint(20) unsigned NOT NULL auto_increment,
rl varchar(255) NOT NULL default '',
PRIMARY KEY  (rid),
KEY rl (rl)
) ;
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
CREATE TABLE t6 (
uid bigint(20) unsigned NOT NULL auto_increment,
un varchar(250) NOT NULL default '',
uc smallint(5) unsigned NOT NULL default '0',
PRIMARY KEY  (uid),
UNIQUE KEY nc (un,uc),
KEY un (un)
) ;
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
INSERT INTO t6 VALUES (1,'test',8);
SELECT t4.uid, t5.rl, t3.gn as g1, t4.cid, t4.gid as gg FROM t3, t6, t1, t4 left join t5 on t5.rid = t4.rid left join t2 on t2.cid = t4.cid WHERE t3.gid=t4.gid AND t6.uid = t4.uid AND t6.uc  = t1.cid AND t1.cv = "dummy" AND t6.un = "test";
uid	rl	g1	cid	gg
1	NULL	V1	NULL	1
SELECT t4.uid, t5.rl, t3.gn as g1, t4.cid, t4.gid as gg FROM t3, t6, t1, t4 left join t5 on t5.rid = t4.rid left join t2 on t2.cid = t4.cid WHERE t3.gid=t4.gid AND t6.uid = t4.uid AND t3.must IS NOT NULL AND t6.uc  = t1.cid AND t1.cv = "dummy" AND t6.un = "test";
uid	rl	g1	cid	gg
(SELECT t4.uid, t5.rl, t3.gn as g1, t4.cid, t4.gid as gg FROM t3, t6, t1, t4 left join t5 on t5.rid = t4.rid left join t2 on t2.cid = t4.cid WHERE t3.gid=t4.gid AND t6.uid = t4.uid AND t3.must IS NOT NULL AND t6.uc  = t1.cid AND t1.cv = "dummy" AND t6.un = "test") MINUS (SELECT t4.uid, t5.rl, t3.gn as g1, t4.cid, t4.gid as gg FROM t3, t6, t1, t4 left join t5 on t5.rid = t4.rid left join t2 on t2.cid = t4.cid WHERE t3.gid=t4.gid AND t6.uid = t4.uid AND t6.uc  = t1.cid AND t1.cv = "dummy" AND t6.un = "test");
uid	rl	g1	cid	gg
drop table t1,t2,t3,t4,t5,t6;
CREATE TABLE t1 (a int not null, b char (10) not null);
insert into t1 values(1,'a'),(2,'b'),(3,'c'),(3,'c');
CREATE TABLE t2 (a int not null, b char (10) not null);
insert into t2 values (3,'c'),(4,'d'),(5,'f'),(6,'e');
create table t3 select a,b from t1 minus select a,b from t2;
create table t4 (select a,b from t1) minus (select a,b from t2) limit 2;
insert into  t4 select a,b from t1 minus select a,b from t2;
insert into  t3 (select a,b from t1) minus (select a,b from t2) limit 2;
select * from t3;
a	b
1	a
2	b
1	a
2	b
select * from t4;
a	b
1	a
2	b
1	a
2	b
drop table t1,t2,t3,t4;
create table t1 (a int);
insert into t1 values (1),(2),(3);
create table t2 (a int);
insert into t2 values (3),(4),(5);
SELECT COUNT(*) FROM (
(SELECT                     * FROM t1) MINUS (SELECT * FROM t2)) q;
COUNT(*)
2
(SELECT SQL_CALC_FOUND_ROWS * FROM t1) MINUS (SELECT * FROM t2) LIMIT 1;
a
1
Warnings:
Warning	1287	SQL_CALC_FOUND_ROWS is deprecated and will be removed in a future release. Consider using two separate queries instead.
select found_rows();
found_rows()
2
Warnings:
Warning	1287	FOUND_ROWS() is deprecated and will be removed in a future release. Consider using COUNT(*) instead.
SELECT COUNT(*) FROM (
(SELECT                     * FROM t1 LIMIT 1) MINUS (SELECT * FROM t2)) q;
COUNT(*)
1
(SELECT SQL_CALC_FOUND_ROWS * FROM t1 LIMIT 1) MINUS (SELECT * FROM t2) LIMIT 2;
a
1
Warnings:
Warning	1287	SQL_CALC_FOUND_ROWS is deprecated and will be removed in a future release. Consider using two separate queries instead.
select found_rows();
found_rows()
1
Warnings:
Warning	1287	FOUND_ROWS() is deprecated and will be removed in a future release. Consider using COUNT(*) instead.
SELECT COUNT(*) FROM (
(SELECT                     * FROM t1 LIMIT 1) MINUS (SELECT * FROM t2)) q;
COUNT(*)
1
(SELECT SQL_CALC_FOUND_ROWS * FROM t1 LIMIT 1) MINUS (SELECT * FROM t2);
a
1
Warnings:
Warning	1287	SQL_CALC_FOUND_ROWS is deprecated and will be removed in a future release. Consider using two separate queries instead.
select found_rows();
found_rows()
1
Warnings:
Warning	1287	FOUND_ROWS() is deprecated and will be removed in a future release. Consider using COUNT(*) instead.
SELECT COUNT(*) FROM (
(SELECT                     * FROM t1) MINUS (SELECT * FROM t2 LIMIT 1)) q;
COUNT(*)
2
(SELECT SQL_CALC_FOUND_ROWS * FROM t1) MINUS (SELECT * FROM t2 LIMIT 1);
a
1
2
Warning	1287	SQL_CALC_FOUND_ROWS is deprecated and will be removed in a future release. Consider using two separate queries instead.
Warnings:
select found_rows();
found_rows()
2
Warnings:
Warning	1287	FOUND_ROWS() is deprecated and will be removed in a future release. Consider using COUNT(*) instead.
SELECT COUNT(*) FROM (
(SELECT                     * FROM t1 LIMIT 1) MINUS SELECT * FROM t2) q;
COUNT(*)
1
(SELECT SQL_CALC_FOUND_ROWS * FROM t1 LIMIT 1) MINUS SELECT * FROM t2 LIMIT 1;
a
1
Warnings:
Warning	1287	SQL_CALC_FOUND_ROWS is deprecated and will be removed in a future release. Consider using two separate queries instead.
select found_rows();
found_rows()
1
Warnings:
Warning	1287	FOUND_ROWS() is deprecated and will be removed in a future release. Consider using COUNT(*) instead.
SELECT SQL_CALC_FOUND_ROWS * FROM t1 LIMIT 1 MINUS SELECT * FROM t2 LIMIT 2;
ERROR 42000: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'MINUS SELECT * FROM t2 LIMIT 2' at line 1
SELECT COUNT(*) FROM (
(SELECT                     * FROM t1 LIMIT 1) MINUS SELECT * FROM t2) q;
COUNT(*)
1
(SELECT SQL_CALC_FOUND_ROWS * FROM t1 LIMIT 1) MINUS SELECT * FROM t2 LIMIT 2;
a
1
Warnings:
Warning	1287	SQL_CALC_FOUND_ROWS is deprecated and will be removed in a future release. Consider using two separate queries instead.
select found_rows();
found_rows()
1
Warnings:
Warning	1287	FOUND_ROWS() is deprecated and will be removed in a future release. Consider using COUNT(*) instead.
SELECT COUNT(*) FROM (
SELECT                     * FROM t1 MINUS SELECT * FROM t2) q;
COUNT(*)
2
SELECT SQL_CALC_FOUND_ROWS * FROM t1 MINUS SELECT * FROM t2 LIMIT 2;
a
1
2
Warning	1287	SQL_CALC_FOUND_ROWS is deprecated and will be removed in a future release. Consider using two separate queries instead.
Warnings:
select found_rows();
found_rows()
2
Warnings:
Warning	1287	FOUND_ROWS() is deprecated and will be removed in a future release. Consider using COUNT(*) instead.
SELECT COUNT(*) FROM (
SELECT                     * FROM t1 MINUS SELECT * FROM t2) q;
COUNT(*)
2
SELECT SQL_CALC_FOUND_ROWS * FROM t1 MINUS SELECT * FROM t2 LIMIT 2;
a
1
2
Warning	1287	SQL_CALC_FOUND_ROWS is deprecated and will be removed in a future release. Consider using two separate queries instead.
Warnings:
select found_rows();
found_rows()
2
Warnings:
Warning	1287	FOUND_ROWS() is deprecated and will be removed in a future release. Consider using COUNT(*) instead.
SELECT COUNT(*) FROM (
SELECT                     * FROM t1 MINUS SELECT * FROM t2) q;
COUNT(*)
2
SELECT SQL_CALC_FOUND_ROWS * FROM t1 MINUS SELECT * FROM t2 LIMIT 100;
a
1
2
Warning	1287	SQL_CALC_FOUND_ROWS is deprecated and will be removed in a future release. Consider using two separate queries instead.
Warnings:
select found_rows();
found_rows()
2
Warnings:
Warning	1287	FOUND_ROWS() is deprecated and will be removed in a future release. Consider using COUNT(*) instead.
SELECT SQL_CALC_FOUND_ROWS * FROM t1 LIMIT 100 MINUS SELECT * FROM t2;
ERROR 42000: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'MINUS SELECT * FROM t2' at line 1
SELECT COUNT(*) FROM (
(SELECT                     * FROM t1 LIMIT 100) MINUS SELECT * FROM t2) q;
COUNT(*)
2
(SELECT SQL_CALC_FOUND_ROWS * FROM t1 LIMIT 100) MINUS SELECT * FROM t2;
a
1
2
Warning	1287	SQL_CALC_FOUND_ROWS is deprecated and will be removed in a future release. Consider using two separate queries instead.
Warnings:
select found_rows();
found_rows()
2
Warnings:
Warning	1287	FOUND_ROWS() is deprecated and will be removed in a future release. Consider using COUNT(*) instead.
SELECT SQL_CALC_FOUND_ROWS * FROM t1 LIMIT 1 MINUS SELECT * FROM t2;
ERROR 42000: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'MINUS SELECT * FROM t2' at line 1
SELECT COUNT(*) FROM (
(SELECT                     * FROM t1 LIMIT 1) MINUS SELECT * FROM t2) q;
COUNT(*)
1
(SELECT SQL_CALC_FOUND_ROWS * FROM t1 LIMIT 1) MINUS SELECT * FROM t2;
a
1
Warnings:
Warning	1287	SQL_CALC_FOUND_ROWS is deprecated and will be removed in a future release. Consider using two separate queries instead.
select found_rows();
found_rows()
1
Warnings:
Warning	1287	FOUND_ROWS() is deprecated and will be removed in a future release. Consider using COUNT(*) instead.
SELECT SQL_CALC_FOUND_ROWS * FROM t1 LIMIT 1 MINUS SELECT * FROM t2 LIMIT 2;
ERROR 42000: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'MINUS SELECT * FROM t2 LIMIT 2' at line 1
SELECT COUNT(*) FROM (
(SELECT                     * FROM t1 LIMIT 1) MINUS SELECT * FROM t2) q;
COUNT(*)
1
(SELECT SQL_CALC_FOUND_ROWS * FROM t1 LIMIT 1) MINUS SELECT * FROM t2 LIMIT 2;
a
1
Warnings:
Warning	1287	SQL_CALC_FOUND_ROWS is deprecated and will be removed in a future release. Consider using two separate queries instead.
select found_rows();
found_rows()
1
Warnings:
Warning	1287	FOUND_ROWS() is deprecated and will be removed in a future release. Consider using COUNT(*) instead.
SELECT COUNT(*) FROM (
SELECT                     * FROM t1 MINUS SELECT * FROM t2) q;
COUNT(*)
2
SELECT SQL_CALC_FOUND_ROWS * FROM t1 MINUS SELECT * FROM t2 LIMIT 2,2;
a
Warnings:
Warning	1287	SQL_CALC_FOUND_ROWS is deprecated and will be removed in a future release. Consider using two separate queries instead.
select found_rows();
found_rows()
2
Warnings:
Warning	1287	FOUND_ROWS() is deprecated and will be removed in a future release. Consider using COUNT(*) instead.
SELECT SQL_CALC_FOUND_ROWS * FROM t1 limit 2,2 MINUS SELECT * FROM t2;
ERROR 42000: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'MINUS SELECT * FROM t2' at line 1
SELECT COUNT(*) FROM (
(SELECT                     * FROM t1 limit 2,2) MINUS SELECT * FROM t2) q;
COUNT(*)
0
(SELECT SQL_CALC_FOUND_ROWS * FROM t1 limit 2,2) MINUS SELECT * FROM t2;
a
Warnings:
Warning	1287	SQL_CALC_FOUND_ROWS is deprecated and will be removed in a future release. Consider using two separate queries instead.
select found_rows();
found_rows()
0
Warnings:
Warning	1287	FOUND_ROWS() is deprecated and will be removed in a future release. Consider using COUNT(*) instead.
SELECT * FROM t1 MINUS SELECT * FROM t2 ORDER BY a desc LIMIT 1;
a
2
(SELECT * FROM t1 ORDER by a) MINUS (SELECT * FROM t2 ORDER BY a) ORDER BY A desc LIMIT 4;
a
2
1
(SELECT * FROM t1) MINUS (SELECT SQL_CALC_FOUND_ROWS * FROM t2) LIMIT 1;
ERROR 42000: Incorrect usage/placement of 'SQL_CALC_FOUND_ROWS'
create temporary table t1 select a from t1 minus select a from t2;
drop temporary table t1;
create temporary table temp1 select a from t1 minus select a from t2;
drop temporary table temp1;
create table t1 select a from t1 minus select a from t2;
ERROR 42S01: Table 't1' already exists
select a from t1 minus select a from t2 order by t2.a;
ERROR 42000: Table 't2' from one of the SELECTs cannot be used in global ORDER clause
drop table t1,t2;
select length(version()) > 1 as `*` MINUS select 2;
*
1
create table t1 (a int);
insert into t1 values (0), (3), (1), (2);
analyze table t1;
Table	Op	Msg_type	Msg_text
test.t1	analyze	status	OK
explain (select * from t1) minus (select * from t1) order by a;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	PRIMARY	t1	NULL	ALL	NULL	NULL	NULL	NULL	#	#	NULL
2	EXCEPT	t1	NULL	ALL	NULL	NULL	NULL	NULL	#	#	NULL
3	EXCEPT RESULT	<except1,2>	NULL	ALL	NULL	NULL	NULL	NULL	#	#	Using temporary; Using filesort
Warnings:
Note	1003	/* select#1 */ select `test`.`t1`.`a` AS `a` from `test`.`t1` except /* select#2 */ select `test`.`t1`.`a` AS `a` from `test`.`t1` order by `a`
drop table t1;
create table t1 (a int not null primary key auto_increment, b int, key(b));
create table t2 (a int not null primary key auto_increment, b int);
insert into t1 (b) values (1),(2),(2),(3);
insert into t2 (b) values (10),(11),(12),(13);
analyze table t1;
Table	Op	Msg_type	Msg_text
test.t1	analyze	status	OK
explain (select * from t1 where a=1) minus (select * from t2 where a=1);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	PRIMARY	t1	NULL	const	PRIMARY	PRIMARY	4	const	1	100.00	NULL
2	EXCEPT	t2	NULL	const	PRIMARY	PRIMARY	4	const	1	100.00	NULL
3	EXCEPT RESULT	<except1,2>	NULL	ALL	NULL	NULL	NULL	NULL	NULL	NULL	Using temporary
Warnings:
Note	1003	/* select#1 */ select '1' AS `a`,'1' AS `b` from `test`.`t1` where true except /* select#2 */ select '1' AS `a`,'10' AS `b` from `test`.`t2` where true
explain format=tree (select * from t1 where a=5) minus (select * from t2 where a=1);
EXPLAIN
-> Table scan on <except temporary>  (cost=2.50..2.50 rows=0)
    -> Except materialize with deduplication  (cost=0.00..0.00 rows=0)
        -> Zero rows (no matching row in const table)  (cost=0.00..0.00 rows=0)
        -> Rows fetched before execution  (cost=0.00..0.00 rows=1)

(select * from t1 where a=5) minus (select * from t2 where a=1);
a	b
(select * from t1 where a=5 and a=6) minus (select * from t2 where a=1);
a	b
(select t1.a,t1.b from t1,t2 where t1.a=5) minus (select * from t2 where a=1);
a	b
(select * from t1 where a=1) minus (select t1.a,t2.a from t1,t2 where t1.a=t2.a);
a	b
explain (select * from t1 where a=1 and b=10) minus (select straight_join t1.a,t2.a from t1,t2 where t1.a=t2.a);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	PRIMARY	NULL	NULL	NULL	NULL	NULL	NULL	NULL	#	NULL	Impossible WHERE noticed after reading const tables
2	EXCEPT	t1	NULL	index	PRIMARY	b	5	NULL	#	100.00	Using index
2	EXCEPT	t2	NULL	eq_ref	PRIMARY	PRIMARY	4	test.t1.a	#	100.00	Using index
3	EXCEPT RESULT	<except1,2>	NULL	ALL	NULL	NULL	NULL	NULL	#	NULL	Using temporary
Warnings:
Note	1003	/* select#1 */ select '1' AS `a`,'1' AS `b` from `test`.`t1` where false except /* select#2 */ select straight_join `test`.`t1`.`a` AS `a`,`test`.`t2`.`a` AS `a` from `test`.`t1` join `test`.`t2` where (`test`.`t2`.`a` = `test`.`t1`.`a`)
explain (select * from t1 where a=1) minus (select * from t1 where b=1);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	PRIMARY	t1	NULL	const	PRIMARY	PRIMARY	4	const	#	#	NULL
2	EXCEPT	t1	NULL	ref	b	b	5	const	#	#	Using index
3	EXCEPT RESULT	<except1,2>	NULL	ALL	NULL	NULL	NULL	NULL	#	#	Using temporary
Warnings:
Note	1003	/* select#1 */ select '1' AS `a`,'1' AS `b` from `test`.`t1` where true except /* select#2 */ select `test`.`t1`.`a` AS `a`,`test`.`t1`.`b` AS `b` from `test`.`t1` where (`test`.`t1`.`b` = 1)
drop table t1,t2;
create table `groups` (id int not null auto_increment, primary key (id) ,user_name text );
create table users (id int not null auto_increment, primary key (id) ,group_name text );
create table t3 (id int not null auto_increment, primary key (id),user_id int,index user_idx (user_id),foreign key (user_id) references users(id),group_id int,index group_idx (group_id),foreign key (group_id) references `groups`(id) );
insert into `groups` (user_name) values ('Tester');
insert into users (group_name) values ('Group A');
insert into users (group_name) values ('Group B');
insert into t3 (user_id, group_id) values (1,1);
select 1 'is_in_group', a.user_name, c.group_name, b.id from `groups` a, t3 b, users c where a.id = b.user_id and b.group_id = c.id MINUS  select 0 'is_in_group', a.user_name, c.group_name, null from `groups` a, users c;
is_in_group	user_name	group_name	id
1	Tester	Group A	1
drop table t3, users, `groups`;
create table t1 (mat_id MEDIUMINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY, matintnum CHAR(6) NOT NULL, test MEDIUMINT UNSIGNED NULL);
create table t2 (mat_id MEDIUMINT UNSIGNED NOT NULL, pla_id MEDIUMINT UNSIGNED NOT NULL);
insert into t1 values (NULL, 'a', 1), (NULL, 'b', 2), (NULL, 'c', 3), (NULL, 'd', 4), (NULL, 'e', 5), (NULL, 'f', 6), (NULL, 'g', 7), (NULL, 'h', 8), (NULL, 'i', 9);
insert into t2 values (1, 100), (1, 101), (1, 102), (2, 100), (2, 103), (2, 104), (3, 101), (3, 102), (3, 105);
SELECT mp.pla_id, MIN(m1.matintnum) AS matintnum FROM t2 mp INNER JOIN t1 m1 ON mp.mat_id=m1.mat_id GROUP BY mp.pla_id minus SELECT 0, 0;
pla_id	matintnum
100	a
101	a
102	a
103	b
104	b
105	c
drop table t1, t2;
create table t1 SELECT "a" as a MINUS select "aa" as a;
select * from t1;
a
a
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `a` varchar(2) NOT NULL DEFAULT ''
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
drop table t1;
create table t1 SELECT 12 as a MINUS select "aa" as a;
select * from t1;
a
12
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `a` varchar(3) NOT NULL DEFAULT ''
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
drop table t1;
create table t1 SELECT 12 as a MINUS select 12.2 as a;
select * from t1;
a
12.0
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `a` decimal(3,1) NOT NULL DEFAULT '0.0'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
drop table t1;
create table t2 (it1 tinyint, it2 tinyint not null, i int not null, ib bigint, f float, d double, y year, da date, dt datetime, sc char(10), sv varchar(10), b blob, tx text);
insert into t2 values (NULL, 1, 3, 4, 1.5, 2.5, 1972, '1972-10-22', '1972-10-22 11:50', 'testc', 'testv', 'tetetetetest', 'teeeeeeeeeeeest');
create table t1 SELECT it2 from t2 MINUS select it1 from t2;
select * from t1;
it2
1
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `it2` tinyint NOT NULL DEFAULT '0'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
drop table t1;
create table t1 SELECT it2 from t2 MINUS select i from t2;
select * from t1;
it2
1
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `it2` int NOT NULL DEFAULT '0'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
drop table t1;
create table t1 SELECT i from t2 MINUS select f from t2;
select * from t1;
i
3
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `i` double NOT NULL DEFAULT '0'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
drop table t1;
create table t1 SELECT f from t2 MINUS select d from t2;
select * from t1;
f
1.5
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `f` double DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
drop table t1;
create table t1 SELECT ib from t2 MINUS select f from t2;
select * from t1;
ib
4
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `ib` double DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
drop table t1;
create table t1 SELECT ib from t2 MINUS select d from t2;
select * from t1;
ib
4
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `ib` double DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
drop table t1;
create table t1 SELECT f from t2 MINUS select y from t2;
select * from t1;
f
1.5
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `f` float DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
drop table t1;
create table t1 SELECT f from t2 MINUS select da from t2;
select * from t1;
f
1.5
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `f` varchar(12) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
drop table t1;
create table t1 SELECT y from t2 MINUS select da from t2;
select * from t1;
y
1972
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `y` varchar(10) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
drop table t1;
create table t1 SELECT y from t2 MINUS select dt from t2;
select * from t1;
y
1972
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `y` varchar(19) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
drop table t1;
create table t1 SELECT da from t2 MINUS select dt from t2;
select * from t1;
da
1972-10-22 00:00:00
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `da` datetime DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
drop table t1;
create table t1 SELECT dt from t2 MINUS select trim(sc) from t2;
select trim(dt) from t1;
trim(dt)
1972-10-22 11:50:00
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `dt` varchar(19) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
drop table t1;
create table t1 SELECT dt from t2 MINUS select sv from t2;
select * from t1;
dt
1972-10-22 11:50:00
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `dt` varchar(19) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
drop table t1;
create table t1 SELECT sc from t2 MINUS select sv from t2;
select * from t1;
sc
testc
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `sc` varchar(10) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
drop table t1;
create table t1 SELECT dt from t2 MINUS select b from t2;
select * from t1;
dt
1972-10-22 11:50:00
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `dt` blob
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
drop table t1;
create table t1 SELECT sv from t2 MINUS select b from t2;
select * from t1;
sv
testv
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `sv` blob
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
drop table t1;
create table t1 SELECT i from t2 MINUS select d from t2 UNION select b from t2;
select * from t1;
i
3
tetetetetest
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `i` blob
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
drop table t1;
create table t1 SELECT sv from t2 MINUS select tx from t2;
select * from t1;
sv
testv
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `sv` mediumtext
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
drop table t1;
create table t1 SELECT b from t2 MINUS select tx from t2;
select * from t1;
b
tetetetetest
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `b` mediumblob
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
drop table t1,t2;
create table t1 select 1 minus select -1;
select * from t1;
1
1
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `1` bigint NOT NULL DEFAULT '0'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
drop table t1;
create table t1 select _latin1"test" minus select _latin2"testt" ;
ERROR HY000: Illegal mix of collations (latin1_swedish_ci,COERCIBLE) and (latin2_general_ci,COERCIBLE) for operation 'UNION'
create table t1 select _latin2"test" minus select _latin2"testt" ;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `test` varchar(5) CHARACTER SET latin2 NOT NULL DEFAULT ''
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
drop table t1;
create table t1 (s char(200));
insert into t1 values (repeat("1",200));
create table t2 select * from t1;
insert into t2 select * from t1;
insert into t1 select * from t2;
insert into t2 select * from t1;
insert into t1 select * from t2;
insert into t2 select * from t1;
set local tmp_table_size=1024;
select count(*) from (select * from t1 minus select * from t2 order by 1) b;
count(*)
0
select count(*) from t1;
count(*)
8
select count(*) from t2;
count(*)
13
drop table t1,t2;
set local tmp_table_size=default;
create table t1 (a int, index (a), b int);
insert t1 values (1,1),(2,2),(3,3),(4,4),(5,5);
insert t1 select a+1, a+b from t1;
insert t1 select a+1, a+b from t1;
insert t1 select a+1, a+b from t1;
insert t1 select a+1, a+b from t1;
insert t1 select a+1, a+b from t1;
FLUSH STATUS;
show status like 'Slow_queries';
Variable_name	Value
Slow_queries	0
select count(*) from t1 where a=7;
count(*)
26
show status like 'Slow_queries';
Variable_name	Value
Slow_queries	0
select count(*) from t1 where b=13;
count(*)
10
show status like 'Slow_queries';
Variable_name	Value
Slow_queries	0
select count(*) from t1 where b=13 minus select count(*) from t1 where a=7;
count(*)
10
show status like 'Slow_queries';
Variable_name	Value
Slow_queries	0
select count(*) from t1 where a=7 minus select count(*) from t1 where b=13;
count(*)
26
show status like 'Slow_queries';
Variable_name	Value
Slow_queries	0
flush status;
select a from t1 where b not in (1,2,3) minus select a from t1 where b not in (4,5,6);
a
show status like 'Slow_queries';
Variable_name	Value
Slow_queries	0
drop table t1;
create table t1 (col1 tinyint unsigned, col2 tinyint unsigned);
insert into t1 values (1,2),(3,4),(5,6),(7,8),(9,10);
select col1 n from t1 minus select col2 n from t1 order by n;
n
1
3
5
7
9
alter table t1 add index myindex (col2);
select col1 n from t1 minus select col2 n from t1 order by n;
n
1
3
5
7
9
drop  table t1;
create table t1 (i int);
insert into t1 values (1);
select * from t1 MINUS select * from t1;
i
select * from t1 MINUS select * from t1;
i
select * from t1 MINUS select * from t1 UNION ALL select * from t1;
i
1
drop table t1;
select 1 as a minus select 1 minus select 2 minus select 1 minus select 2;
a
set sql_select_limit=1;
select 1 minus select 2;
1
1
(select 1) minus (select 2);
1
1
(select 1) minus (select 2) minus (select 3) limit 2;
1
1
set sql_select_limit=default;
create table t1 (a int);
insert into t1 values (100), (1);
create table t2 (a int);
insert into t2 values (100);
select a from t1 minus select a from t2 order by a;
a
1
SET SQL_SELECT_LIMIT=1;
select a from t1 minus select a from t2 order by a;
a
1
drop table t1, t2;
set sql_select_limit=default;
CREATE TABLE t1 (i int(11) default NULL,c char(1) default NULL,KEY i (i));
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
CREATE TABLE t2 (i int(11) default NULL,c char(1) default NULL,KEY i (i));
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
explain (select * from t1) minus (select * from t2) order by not_existing_column;
ERROR 42S22: Unknown column 'not_existing_column' in 'order clause'
drop table t1, t2;
CREATE TABLE t1 (uid int(1));
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
INSERT INTO t1 SELECT 150;
SELECT 'a' MINUS SELECT uid FROM t1;
a
a
drop table t1;
SET sql_mode = 'NO_ENGINE_SUBSTITUTION';
CREATE TABLE t1 ( ID1 int(10) unsigned NOT NULL DEFAULT '0' , ID2 datetime NOT NULL DEFAULT '0000-00-00 00:00:00' , DATA1 varchar(10) , DATA2 double(5,4) , DATA3 datetime , PRIMARY KEY (ID1,ID2));
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Specifying number of digits for floating point data types is deprecated and will be removed in a future release.
CREATE TABLE t2 ( ID int(3) unsigned NOT NULL DEFAULT '0' , DATA1 timestamp DEFAULT '0000-00-00 00:00:00' , PRIMARY KEY (ID));
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
(SELECT * FROM t1 AS PARTITIONED, t2 AS
PARTITIONED_B WHERE PARTITIONED_B.ID=PARTITIONED.ID1) MINUS
(SELECT * FROM t1 AS PARTITIONED, t2 AS
PARTITIONED_B WHERE PARTITIONED_B.ID=PARTITIONED.ID1) MINUS
(SELECT * FROM t1 AS PARTITIONED, t2 AS
PARTITIONED_B WHERE PARTITIONED_B.ID=PARTITIONED.ID1) MINUS
(SELECT * FROM t1 AS PARTITIONED, t2 AS
PARTITIONED_B WHERE PARTITIONED_B.ID=PARTITIONED.ID1) MINUS
(SELECT * FROM t1 AS PARTITIONED, t2 AS
PARTITIONED_B WHERE PARTITIONED_B.ID=PARTITIONED.ID1) MINUS
(SELECT * FROM t1 AS PARTITIONED, t2 AS
PARTITIONED_B WHERE PARTITIONED_B.ID=PARTITIONED.ID1) MINUS
(SELECT * FROM t1 AS PARTITIONED, t2 AS
PARTITIONED_B WHERE PARTITIONED_B.ID=PARTITIONED.ID1) MINUS
(SELECT * FROM t1 AS PARTITIONED, t2 AS
PARTITIONED_B WHERE PARTITIONED_B.ID=PARTITIONED.ID1) MINUS
(SELECT * FROM t1 AS PARTITIONED, t2 AS
PARTITIONED_B WHERE PARTITIONED_B.ID=PARTITIONED.ID1) MINUS
(SELECT * FROM t1 AS PARTITIONED, t2 AS
PARTITIONED_B WHERE PARTITIONED_B.ID=PARTITIONED.ID1) MINUS
(SELECT * FROM t1 AS PARTITIONED, t2 AS
PARTITIONED_B WHERE PARTITIONED_B.ID=PARTITIONED.ID1) MINUS
(SELECT * FROM t1 AS PARTITIONED, t2 AS
PARTITIONED_B WHERE PARTITIONED_B.ID=PARTITIONED.ID1);
ID1	ID2	DATA1	DATA2	DATA3	ID	DATA1
drop table t1,t2;
SET sql_mode = default;
create table t1 (a ENUM('Yes', 'No') NOT NULL);
create table t2 (a ENUM('aaa', 'bbb') NOT NULL);
insert into t1 values ('No');
insert into t2 values ('bbb');
create table t3 (a SET('Yes', 'No') NOT NULL);
create table t4 (a SET('aaa', 'bbb') NOT NULL);
insert into t3 values (1);
insert into t4 values (3);
select "1" as a minus select a from t1;
a
1
select a as a from t1 minus select "1";
a
No
select a as a from t2 minus select a from t1;
a
bbb
select "1" as a minus select a from t3;
a
1
select a as a from t3 minus select "1";
a
Yes
select a as a from t4 minus select a from t3;
a
aaa,bbb
select a as a from t1 minus select a from t4;
a
No
drop table t1,t2,t3,t4;
set names latin1;
create table t1 as
(select _latin1'test') minus
(select _latin1'TEST') minus
(select _latin1'TeST');
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `test` varchar(4) CHARACTER SET latin1 NOT NULL DEFAULT ''
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
select count(*) from t1;
count(*)
0
drop table t1;
create table t1 as
(select _latin1'test' collate latin1_bin) minus
(select _latin1'TEST') minus
(select _latin1'TeST');
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `_latin1'test' collate latin1_bin` varchar(4) CHARACTER SET latin1 COLLATE latin1_bin DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
select count(*) from t1;
count(*)
1
drop table t1;
create table t1 as
(select _latin1'test') minus
(select _latin1'TEST' collate latin1_bin) minus
(select _latin1'TeST');
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `test` varchar(4) CHARACTER SET latin1 COLLATE latin1_bin NOT NULL DEFAULT ''
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
select count(*) from t1;
count(*)
1
drop table t1;
create table t1 as
(select _latin1'test') minus
(select _latin1'TEST') minus
(select _latin1'TeST' collate latin1_bin);
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `test` varchar(4) CHARACTER SET latin1 COLLATE latin1_bin NOT NULL DEFAULT ''
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
select count(*) from t1;
count(*)
1
drop table t1;
create table t2 (
a char character set latin1 collate latin1_swedish_ci,
b char character set latin1 collate latin1_german1_ci);
create table t1 as
(select a from t2) minus
(select b from t2);
ERROR HY000: Illegal mix of collations for operation 'UNION'
create table t1 as
(select a collate latin1_german1_ci from t2) minus
(select b from t2);
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `a collate latin1_german1_ci` varchar(1) CHARACTER SET latin1 COLLATE latin1_german1_ci DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
drop table t1;
create table t1 as
(select a from t2) minus
(select b collate latin1_german1_ci from t2);
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `a` varchar(1) CHARACTER SET latin1 COLLATE latin1_german1_ci DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
drop table t1;
create table t1 as
(select a from t2) minus
(select b from t2) minus
(select 'c' collate latin1_german1_ci from t2);
drop table t2;
drop table t1;
create table t1(a1 int, f1 char(10));
create table t2
select f2,a1 from (select a1, CAST('2004-12-31' AS DATE) f2 from t1) a
minus
select f2,a1 from (select a1, CAST('2004-12-31' AS DATE) f2 from t1) a
order by f2, a1;
show columns from t2;
Field	Type	Null	Key	Default	Extra
f2	date	YES		NULL	
a1	int	YES		NULL	
drop table t1, t2;
create table t1 (f1 int);
create table t2 (f1 int, f2 int ,f3 date);
create table t3 (f1 int, f2 char(10));
create table t4
(
select t2.f3 as sdate
from t1
left outer join t2 on (t1.f1 = t2.f1)
inner join t3 on (t2.f2 = t3.f1)
order by t1.f1, t3.f1, t2.f3
)
minus
(
select cast('2004-12-31' as date) as sdate
from t1
left outer join t2 on (t1.f1 = t2.f1)
inner join t3 on (t2.f2 = t3.f1)
group by t1.f1
order by t1.f1, t3.f1, t2.f3
)
order by sdate;
show columns from t4;
Field	Type	Null	Key	Default	Extra
sdate	date	YES		NULL	
drop table t1, t2, t3, t4;
create table t1 (a int not null, b char (10) not null);
insert into t1 values(1,'a'),(2,'b'),(3,'c'),(3,'c');
select * from ((select * from t1 limit 1)) a;
a	b
1	a
select * from ((select * from t1 limit 1) minus (select * from t1 limit 1)) a;
a	b
select * from ((select * from t1 limit 1) minus (select * from t1 limit 1) minus (select * from t1 limit 1)) a;
a	b
select * from ((((select * from t1))) minus (select * from t1) minus (select * from t1)) a;
a	b
select * from ((select * from t1) minus (((select * from t1))) minus (select * from t1)) a;
a	b
drop table t1;
set @val:=6;
select concat('value is: ', @val) minus select 'some text';
concat('value is: ', @val)
value is: 6
select concat(_latin1'a', _ascii'b' collate ascii_bin);
concat(_latin1'a', _ascii'b' collate ascii_bin)
ab
create table t1 (foo varchar(100)) collate ascii_bin;
insert into t1 (foo) values ("foo");
select foo from t1 minus select 'bar' as foo from dual;
foo
foo
drop table t1;
create table t1 (f1 decimal(60,25), f2 decimal(60,25));
insert into t1 values (0.0,0.0);
select f1 from t1 minus select f2 from t1;
f1
select 'XXXXXXXXXXXXXXXXXXXX' as description, f1 from t1
minus
select 'YYYYYYYYYYYYYYYYYYYY' as description, f2 from t1;
description	f1
XXXXXXXXXXXXXXXXXXXX	0.0000000000000000000000000
drop table t1;
create table t1 (f1 decimal(60,24), f2 decimal(60,24));
insert into t1 values (0.0,0.0);
select f1 from t1 minus select f2 from t1;
f1
select 'XXXXXXXXXXXXXXXXXXXX' as description, f1 from t1
minus
select 'YYYYYYYYYYYYYYYYYYYY' as description, f2 from t1;
description	f1
XXXXXXXXXXXXXXXXXXXX	0.000000000000000000000000
drop table t1;
create table t1 (a varchar(5));
create table t2 select * from t1 minus select 'abcdefghijkl';
show create table t2;
Table	Create Table
t2	CREATE TABLE `t2` (
  `a` varchar(12) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
select row_format from information_schema.TABLES where table_schema="test" and table_name="t2";
ROW_FORMAT
Dynamic
alter table t2 ROW_FORMAT=fixed;
ERROR HY000: Table storage engine 'InnoDB' does not support the create option 'ROW_TYPE'
show create table t2;
Table	Create Table
t2	CREATE TABLE `t2` (
  `a` varchar(12) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
drop table t1,t2;
CREATE TABLE t1 (a mediumtext);
CREATE TABLE t2 (b varchar(20));
INSERT INTO t1 VALUES ('a'),('b');
SELECT left(a,100000000) FROM t1 MINUS  SELECT b FROM t2;
left(a,100000000)
a
b
create table t3 SELECT left(a,100000000) FROM t1 MINUS  SELECT b FROM t2;
show create table t3;
Table	Create Table
t3	CREATE TABLE `t3` (
  `left(a,100000000)` longtext
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
drop tables t1,t2,t3;
CREATE TABLE t1 (a longtext);
CREATE TABLE t2 (b varchar(20));
INSERT INTO t1 VALUES ('a'),('b');
SELECT left(a,100000000) FROM t1 MINUS  SELECT b FROM t2;
left(a,100000000)
a
b
create table t3 SELECT left(a,100000000) FROM t1 MINUS  SELECT b FROM t2;
show create table t3;
Table	Create Table
t3	CREATE TABLE `t3` (
  `left(a,100000000)` longtext
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
drop tables t1,t2,t3;
SELECT @tmp_max:= @@global.max_allowed_packet;
@tmp_max:= @@global.max_allowed_packet
67108864
Warnings:
Warning	1287	Setting user variables within expressions is deprecated and will be removed in a future release. Consider alternatives: 'SET variable=expression, ...', or 'SELECT expression(s) INTO variables(s)'.
SET @@global.max_allowed_packet=25000000;
Warnings:
Warning	1292	Truncated incorrect max_allowed_packet value: '25000000'
CREATE TABLE t1 (a mediumtext);
CREATE TABLE t2 (b varchar(20));
INSERT INTO t1 VALUES ('a');
CREATE TABLE t3 SELECT REPEAT(a,20000000) AS a FROM t1 MINUS SELECT b FROM t2;
SHOW CREATE TABLE t3;
Table	Create Table
t3	CREATE TABLE `t3` (
  `a` longtext
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
DROP TABLES t1,t3;
CREATE TABLE t1 (a tinytext);
INSERT INTO t1 VALUES ('a');
CREATE TABLE t3 SELECT REPEAT(a,2) AS a FROM t1 MINUS SELECT b FROM t2;
SHOW CREATE TABLE t3;
Table	Create Table
t3	CREATE TABLE `t3` (
  `a` varchar(510) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
DROP TABLES t1,t3;
CREATE TABLE t1 (a mediumtext);
INSERT INTO t1 VALUES ('a');
CREATE TABLE t3 SELECT REPEAT(a,2) AS a FROM t1 MINUS SELECT b FROM t2;
SHOW CREATE TABLE t3;
Table	Create Table
t3	CREATE TABLE `t3` (
  `a` longtext
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
DROP TABLES t1,t3;
CREATE TABLE t1 (a tinyblob);
INSERT INTO t1 VALUES ('a');
CREATE TABLE t3 SELECT REPEAT(a,2) AS a FROM t1 MINUS SELECT b FROM t2;
SHOW CREATE TABLE t3;
Table	Create Table
t3	CREATE TABLE `t3` (
  `a` varbinary(510) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
DROP TABLES t1,t2,t3;
SET @@global.max_allowed_packet:= @tmp_max;
create table t1 ( id int not null auto_increment, primary key (id), col1 int);
insert into t1 (col1) values (2),(3),(4),(5),(6);
select 99 minus select id from t1 order by 1;
99
99
select id from t1 minus select 99 order by 1;
id
1
2
3
4
5
drop table t1;
SET sql_mode = 'NO_ENGINE_SUBSTITUTION';
create table t1(f1 char(1), f2 char(5), f3 binary(1), f4 binary(5), f5 timestamp NOT NULL DEFAULT '0000-00-00 00:00:00', f6 varchar(1) character set utf8 collate utf8_general_ci, f7 text);
Warnings:
Warning	3719	'utf8' is currently an alias for the character set UTF8MB3, but will be an alias for UTF8MB4 in a future release. Please consider using UTF8MB4 in order to be unambiguous.
Warning	3778	'utf8mb3_general_ci' is a collation of the deprecated character set UTF8MB3. Please consider using UTF8MB4 with an appropriate collation instead.
create table t2 as select *, f6 as f8 from t1 minus select *, f7 from t1;
show create table t2;
Table	Create Table
t2	CREATE TABLE `t2` (
  `f1` char(1) DEFAULT NULL,
  `f2` char(5) DEFAULT NULL,
  `f3` binary(1) DEFAULT NULL,
  `f4` binary(5) DEFAULT NULL,
  `f5` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `f6` varchar(1) CHARACTER SET utf8mb3 DEFAULT NULL,
  `f7` mediumtext,
  `f8` mediumtext
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
drop table t1, t2;
SET sql_mode = default;
(select avg(1)) minus (select avg(1)) minus (select avg(1)) minus
(select avg(1)) minus (select avg(1)) minus (select avg(1)) minus
(select avg(1)) minus (select avg(1)) minus (select avg(1)) minus
(select avg(1)) minus (select avg(1)) minus (select avg(1)) minus
(select avg(1)) minus (select avg(1)) minus (select avg(1)) minus
(select avg(1)) minus (select avg(1)) minus (select avg(1)) minus
(select avg(1)) minus (select avg(1)) minus (select avg(1)) minus
(select avg(1)) minus (select avg(1)) minus (select avg(1)) minus
(select avg(1)) minus (select avg(1)) minus (select avg(1)) minus
(select avg(1)) minus (select avg(1)) minus (select avg(1)) minus
(select avg(1)) minus (select avg(1)) minus (select avg(1)) minus
(select avg(1)) minus (select avg(1)) minus (select avg(1)) minus
(select avg(1)) minus (select avg(1)) minus (select avg(1)) minus
(select avg(1)) minus (select avg(1)) minus (select avg(1)) minus
(select avg(1)) minus (select avg(1)) minus (select avg(1)) minus
(select avg(1)) minus (select avg(1)) minus (select avg(1)) minus
(select avg(1)) minus (select avg(1)) minus (select avg(1)) minus
(select avg(1)) minus (select avg(1)) minus (select avg(1)) minus
(select avg(1)) minus (select avg(1)) minus (select avg(1)) minus
(select avg(1)) minus (select avg(1)) minus (select avg(1)) minus
(select avg(1)) minus (select avg(1)) minus (select avg(1)) minus
(select avg(1)) minus (select avg(1)) minus (select avg(1)) minus
(select avg(1)) minus (select avg(1)) minus (select avg(1)) minus
(select avg(1)) minus (select avg(1)) minus (select avg(1)) minus
(select avg(1)) minus (select avg(1)) minus (select avg(1)) minus
(select avg(1)) minus (select avg(1)) minus (select avg(1)) minus
(select avg(1)) minus (select avg(1)) minus (select avg(1)) minus
(select avg(1)) minus (select avg(1)) minus (select avg(1)) minus
(select avg(1)) minus (select avg(1)) minus (select avg(1)) minus
(select avg(1)) minus (select avg(1)) minus (select avg(1)) minus
(select avg(1)) minus (select avg(1)) minus (select avg(1)) minus
(select avg(1)) minus (select avg(1)) minus (select avg(1)) minus
(select avg(1)) minus (select avg(1)) minus (select avg(1)) minus
(select avg(1)) minus (select avg(1)) minus (select avg(1)) minus
(select avg(1)) minus (select avg(1)) minus (select avg(1)) minus
(select avg(1)) minus (select avg(1)) minus (select avg(1)) minus
(select avg(1)) minus (select avg(1)) minus (select avg(1)) minus
(select avg(1)) minus (select avg(1)) minus (select avg(1)) minus
(select avg(1)) minus (select avg(1)) minus (select avg(1)) minus
(select avg(1)) minus (select avg(1)) minus (select avg(1)) minus
(select avg(1)) minus (select avg(1)) minus (select avg(1)) minus
(select avg(1)) minus (select avg(1)) minus (select avg(1)) minus
(select avg(1)) minus (select avg(1)) minus (select avg(1));
avg(1)
select _utf8'12' minus select _latin1'12345';
12
12
Warnings:
Warning	3719	'utf8' is currently an alias for the character set UTF8MB3, but will be an alias for UTF8MB4 in a future release. Please consider using UTF8MB4 in order to be unambiguous.
CREATE TABLE t1 (a int);
INSERT INTO t1 VALUES (3),(1),(2),(4),(1);
SELECT a FROM (SELECT a FROM t1 MINUS SELECT a FROM t1 ORDER BY a) AS test;
a
SELECT a FROM (SELECT a FROM t1 MINUS SELECT a FROM t1 ORDER BY c) AS test;
ERROR 42S22: Unknown column 'c' in 'order clause'
DROP TABLE t1;
(select 1 into @var) minus (select 1);
ERROR HY000: Misplaced INTO clause, INTO is not allowed inside subqueries, and must be placed at end of UNION clauses.
(select 1) minus (select 1 into @var);
Warnings:
Warning	3962	The INTO clause is deprecated inside query blocks of query expressions and will be removed in a future release. Please move the INTO clause to the end of statement instead.
Warning	1329	No data - zero rows fetched, selected, or processed
select @var;
@var
NULL
(select 2) minus (select 1 into @var);
Warnings:
Warning	3962	The INTO clause is deprecated inside query blocks of query expressions and will be removed in a future release. Please move the INTO clause to the end of statement instead.
CREATE TABLE t1 (a int);
INSERT INTO t1 VALUES (10), (20);
CREATE TABLE t2 (b int);
INSERT INTO t2 VALUES (10), (50), (50);
SELECT a,1 FROM t1 
MINUS
SELECT b, COUNT(*) FROM t2 GROUP BY b WITH ROLLUP
ORDER BY a;
a	1
20	1
SELECT a,1 FROM t1 
MINUS
SELECT b, COUNT(*) FROM t2 GROUP BY b WITH ROLLUP
ORDER BY a DESC;
a	1
20	1
SELECT a,1 FROM t1 
MINUS
SELECT b, COUNT(*) FROM t2 GROUP BY b WITH ROLLUP
ORDER BY a ASC LIMIT 3;
a	1
20	1
SELECT a,1 FROM t1 
MINUS 
SELECT b, COUNT(*) FROM t2 GROUP BY b WITH ROLLUP
ORDER BY a DESC;
a	1
20	1
SELECT a,1 FROM t1
MINUS 
(SELECT b, COUNT(*) FROM t2 GROUP BY b WITH ROLLUP ORDER BY a);
ERROR 42S22: Unknown column 'a' in 'order clause'
SELECT a,1 FROM t1
MINUS
SELECT b, COUNT(*) FROM t2 GROUP BY b WITH ROLLUP ORDER BY a
MINUS
SELECT 1,1;
ERROR 42000: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'MINUS
SELECT 1,1' at line 4
DROP TABLE t1,t2;
CREATE TABLE t1 (a INT);
INSERT INTO t1 VALUES (1), (2), (3);
CREATE TABLE t2 SELECT * FROM (SELECT NULL) a MINUS SELECT a FROM t1;
DESC t2;
Field	Type	Null	Key	Default	Extra
NULL	int	YES		NULL	
CREATE TABLE t3 SELECT a FROM t1 MINUS SELECT * FROM (SELECT NULL) a;
DESC t3;
Field	Type	Null	Key	Default	Extra
a	int	YES		NULL	
CREATE TABLE t4 SELECT NULL;
DESC t4;
Field	Type	Null	Key	Default	Extra
NULL	binary(0)	YES		NULL	
CREATE TABLE t5 SELECT NULL MINUS SELECT NULL;
DESC t5;
Field	Type	Null	Key	Default	Extra
NULL	binary(0)	YES		NULL	
CREATE TABLE t6 
SELECT * FROM (SELECT * FROM (SELECT NULL)a) b MINUS SELECT a FROM t1;
DESC t6;
Field	Type	Null	Key	Default	Extra
NULL	int	YES		NULL	
DROP TABLE t1, t2, t3, t4, t5, t6;
CREATE TABLE t1 (f FLOAT(9,6));
Warnings:
Warning	1681	Specifying number of digits for floating point data types is deprecated and will be removed in a future release.
CREATE TABLE t2 AS SELECT f FROM t1 MINUS SELECT f FROM t1;
Warnings:
Warning	1681	Specifying number of digits for floating point data types is deprecated and will be removed in a future release.
SHOW FIELDS FROM t2;
Field	Type	Null	Key	Default	Extra
f	float(9,6)	YES		NULL	
DROP TABLE t1, t2;
CREATE TABLE t1(d DOUBLE(9,6));
Warnings:
Warning	1681	Specifying number of digits for floating point data types is deprecated and will be removed in a future release.
CREATE TABLE t2 AS SELECT d FROM t1 MINUS SELECT d FROM t1;
Warnings:
Warning	1681	Specifying number of digits for floating point data types is deprecated and will be removed in a future release.
SHOW FIELDS FROM t2;
Field	Type	Null	Key	Default	Extra
d	double(9,6)	YES		NULL	
DROP TABLE t1, t2;
CREATE TABLE t1(a INT);
EXPLAIN
SELECT a FROM t1
MINUS
SELECT a FROM t1
ORDER BY a;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	PRIMARY	t1	NULL	ALL	NULL	NULL	NULL	NULL	1	100.00	NULL
2	EXCEPT	t1	NULL	ALL	NULL	NULL	NULL	NULL	1	100.00	NULL
3	EXCEPT RESULT	<except1,2>	NULL	ALL	NULL	NULL	NULL	NULL	NULL	NULL	Using temporary; Using filesort
Warnings:
Note	1003	/* select#1 */ select `test`.`t1`.`a` AS `a` from `test`.`t1` except /* select#2 */ select `test`.`t1`.`a` AS `a` from `test`.`t1` order by `a`
DROP TABLE t1;
End of 5.0 tests
#
# Bug#32858: Error: "Incorrect usage of MINUS and INTO" does not take 
# subselects into account
#
CREATE TABLE t1 (a INT);
INSERT INTO t1 VALUES (1);
# Tests fix in parser rule select_derived_minus.
SELECT a INTO @v FROM (
SELECT a FROM t1
MINUS
SELECT a FROM t1
) alias;
Warnings:
Warning	1329	No data - zero rows fetched, selected, or processed
SELECT a INTO OUTFILE 'minus.out.file' FROM (
SELECT a FROM t1
MINUS
SELECT a FROM t1 WHERE 0
) alias;
SELECT a INTO DUMPFILE 'minus.out.file2' FROM (
SELECT a FROM t1
MINUS
SELECT a FROM t1 WHERE 0
) alias;
SELECT a FROM t1 MINUS SELECT a INTO @v FROM t1;
Warnings:
Warning	3962	The INTO clause is deprecated inside query blocks of query expressions and will be removed in a future release. Please move the INTO clause to the end of statement instead.
Warning	1329	No data - zero rows fetched, selected, or processed
SELECT a FROM t1 MINUS SELECT a INTO OUTFILE 'minus.out.file5' FROM t1;
Warnings:
Warning	3962	The INTO clause is deprecated inside query blocks of query expressions and will be removed in a future release. Please move the INTO clause to the end of statement instead.
SELECT a FROM t1 MINUS SELECT a INTO OUTFILE 'minus.out.file6' FROM t1;
Warnings:
Warning	3962	The INTO clause is deprecated inside query blocks of query expressions and will be removed in a future release. Please move the INTO clause to the end of statement instead.
SELECT a INTO @v FROM t1 MINUS SELECT a FROM t1;
ERROR HY000: Misplaced INTO clause, INTO is not allowed inside subqueries, and must be placed at end of UNION clauses.
SELECT a INTO OUTFILE 'minus.out.file7' FROM t1 MINUS SELECT a FROM t1;
ERROR HY000: Misplaced INTO clause, INTO is not allowed inside subqueries, and must be placed at end of UNION clauses.
SELECT a INTO DUMPFILE 'minus.out.file8' FROM t1 MINUS SELECT a FROM t1;
ERROR HY000: Misplaced INTO clause, INTO is not allowed inside subqueries, and must be placed at end of UNION clauses.
# Tests fix in parser rule query_expression_body.
SELECT ( SELECT a MINUS SELECT a ) INTO @v FROM t1;
SELECT ( SELECT a MINUS SELECT a ) INTO OUTFILE  'minus.out.file3' FROM t1;
SELECT ( SELECT a MINUS SELECT a ) INTO DUMPFILE 'minus.out.file4' FROM t1;
DROP TABLE t1;
# 
# Bug #49734: Crash on EXPLAIN MINUS ... ORDER BY 
#   <any non-const-function>
# 
CREATE TABLE t1 (a VARCHAR(10), FULLTEXT KEY a (a));
INSERT INTO t1 VALUES (1),(2);
CREATE TABLE t2 (b INT);
INSERT INTO t2 VALUES (1),(2);
# Should not crash
EXPLAIN
SELECT * FROM t1 MINUS SELECT * FROM t1 ORDER BY a + 12;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	PRIMARY	t1	NULL	ALL	NULL	NULL	NULL	NULL	2	100.00	NULL
2	EXCEPT	t1	NULL	ALL	NULL	NULL	NULL	NULL	2	100.00	NULL
3	EXCEPT RESULT	<except1,2>	NULL	ALL	NULL	NULL	NULL	NULL	NULL	NULL	Using temporary; Using filesort
Warnings:
Note	1003	/* select#1 */ select `test`.`t1`.`a` AS `a` from `test`.`t1` except /* select#2 */ select `test`.`t1`.`a` AS `a` from `test`.`t1` order by (`a` + 12)
# Should not crash
SELECT * FROM t1 MINUS SELECT * FROM t1 ORDER BY a + 12;
a
# Should not crash
EXPLAIN
SELECT * FROM t1 MINUS SELECT * FROM t1
ORDER BY MATCH(a) AGAINST ('+abc' IN BOOLEAN MODE);
ERROR HY000: The used table type doesn't support FULLTEXT indexes
# Should not crash
WITH cte AS (
SELECT * FROM t1 MINUS SELECT * FROM t1
ORDER BY MATCH(a) AGAINST ('+abc' IN BOOLEAN MODE)
) SELECT * FROM cte;
ERROR HY000: The used table type doesn't support FULLTEXT indexes
# Should not crash
SELECT * FROM t1 MINUS SELECT * FROM t1
ORDER BY MATCH(a) AGAINST ('+abc' IN BOOLEAN MODE);
ERROR HY000: The used table type doesn't support FULLTEXT indexes
# Should not crash
(SELECT * FROM t1) MINUS (SELECT * FROM t1)
ORDER BY MATCH(a) AGAINST ('+abc' IN BOOLEAN MODE);
ERROR HY000: The used table type doesn't support FULLTEXT indexes
# Should not crash
EXPLAIN
SELECT * FROM t1 MINUS SELECT * FROM t1
ORDER BY (SELECT a FROM t2 WHERE b = 12);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	PRIMARY	t1	NULL	ALL	NULL	NULL	NULL	NULL	2	100.00	NULL
2	EXCEPT	t1	NULL	ALL	NULL	NULL	NULL	NULL	2	100.00	NULL
4	EXCEPT RESULT	<except1,2>	NULL	ALL	NULL	NULL	NULL	NULL	NULL	NULL	Using temporary; Using filesort
5	DEPENDENT SUBQUERY	t2	NULL	ALL	NULL	NULL	NULL	NULL	2	50.00	Using where
Warnings:
Note	1276	Field or reference 'a' of SELECT #5 was resolved in SELECT #1
Note	1003	/* select#1 */ select `test`.`t1`.`a` AS `a` from `test`.`t1` except /* select#2 */ select `test`.`t1`.`a` AS `a` from `test`.`t1` order by (/* select#5 */ select `a` from `test`.`t2` where (`test`.`t2`.`b` = 12))
# Should not crash
SELECT * FROM t1 MINUS SELECT * FROM t1
ORDER BY (SELECT a FROM t2 WHERE b = 12);
# Should not crash
SELECT * FROM t2 MINUS SELECT * FROM t2
ORDER BY (SELECT * FROM t1 WHERE MATCH(a) AGAINST ('+abc' IN BOOLEAN MODE));
b
DROP TABLE t1,t2;
#
# Bug#57986 ORDER BY clause is not used after a MINUS, 
#           if embedded in a SELECT
#
CREATE TABLE t1 (c1 VARCHAR(10) NOT NULL, c2 INT NOT NULL);
CREATE TABLE t2 (c1 VARCHAR(10) NOT NULL, c2 INT NOT NULL);
INSERT INTO t1 (c1, c2) VALUES ('t1a', 1), ('t1a', 2), ('t1a', 3), ('t1b', 2), ('t1b', 1);
INSERT INTO t2 (c1, c2) VALUES ('t2a', 1), ('t2a', 2), ('t2a', 3), ('t2b', 2), ('t2b', 1);
SELECT * FROM t1 MINUS SELECT * FROM t2 ORDER BY c2, c1;
c1	c2
t1a	1
t1b	1
t1a	2
t1b	2
t1a	3
SELECT * FROM t1 MINUS (SELECT * FROM t2) ORDER BY c2, c1;
c1	c2
t1a	1
t1b	1
t1a	2
t1b	2
t1a	3
SELECT * FROM t1 MINUS (SELECT * FROM t2 ORDER BY c2, c1);
c1	c2
t1a	1
t1a	2
t1a	3
t1b	2
t1b	1
SELECT c1, c2 FROM (
SELECT c1, c2 FROM t1
MINUS
(SELECT c1, c2 FROM t2)
ORDER BY c2, c1
) AS res;
c1	c2
t1a	1
t1b	1
t1a	2
t1b	2
t1a	3
SELECT c1, c2 FROM (
SELECT c1, c2 FROM t1
MINUS
(SELECT c1, c2 FROM t2)
ORDER BY c2 DESC, c1 LIMIT 1
) AS res;
c1	c2
t1a	3
SELECT c1, c2 FROM (
SELECT c1, c2 FROM t1
MINUS
(SELECT c1, c2 FROM t2 ORDER BY c2 DESC, c1 LIMIT 1)
) AS res;
c1	c2
t1a	1
t1a	2
t1a	3
t1b	2
t1b	1
SELECT c1, c2 FROM (
SELECT c1, c2 FROM t1
MINUS
SELECT c1, c2 FROM t2 
ORDER BY c2 DESC, c1 DESC LIMIT 1
) AS res;
c1	c2
t1a	3
SELECT c1, c2 FROM (
(
(SELECT c1, c2 FROM t1)
MINUS
(SELECT c1, c2 FROM t2)
)
ORDER BY c2 DESC, c1 ASC LIMIT 1
) AS res;
c1	c2
t1a	3
DROP TABLE t1, t2;
#
# Bug #58970 Problem Subquery (without referencing a table) 
#            and Order By
#
SELECT(SELECT 0 AS a MINUS SELECT 1 AS a ORDER BY a ASC  LIMIT 1) AS dev;
dev
0
SELECT(SELECT 0 AS a MINUS SELECT 1 AS a ORDER BY a DESC LIMIT 1) AS dev;
dev
0
SELECT(SELECT 0 AS a FROM dual MINUS SELECT 1 AS a FROM dual ORDER BY a ASC  LIMIT 1) AS dev;
dev
0
SELECT(SELECT 0 AS a FROM dual MINUS SELECT 1 AS a FROM dual ORDER BY a DESC LIMIT 1) AS dev;
dev
0
SELECT(SELECT 1 AS a ORDER BY a) AS dev;
dev
1
SELECT(SELECT 1 AS a LIMIT 1) AS dev;
dev
1
SELECT(SELECT 1 AS a FROM dual ORDER BY a DESC LIMIT 1) AS dev;
dev
1
#
# Bug#11886060: SELECT .. MINUS SELECT .. ORDER BY IS WRONGLY PARSED
#
create table t1(b int);
All 3 should be parsed without errors.
select b as z from t1 minus select b from t1 order by z;
z
select b as z from t1 minus select b from t1 order by (select z);
z
select b as z from t1 minus (select b from t1) order by (select z);
z
drop table t1;
#
# WL#1763 Avoid creating temporary table in MINUS
#
EXPLAIN SELECT 1 MINUS SELECT 1 LIMIT 1 OFFSET 1;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	PRIMARY	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	No tables used
2	EXCEPT	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	No tables used
3	EXCEPT RESULT	<except1,2>	NULL	ALL	NULL	NULL	NULL	NULL	NULL	NULL	Using temporary
Warnings:
Note	1003	/* select#1 */ select 1 AS `1` except /* select#2 */ select 1 AS `1` limit 1,1
# Bug #17579498 CHANGES IN DATATYPE OF THE RESULT QUERY IN MINUS.
CREATE TABLE t1 (a TIME);
CREATE TABLE t2 (b DATETIME);
CREATE TABLE t3
SELECT a FROM t1 MINUS SELECT b FROM t2;
SELECT column_name, column_type
FROM information_schema.columns
WHERE TABLE_NAME='t3';
COLUMN_NAME	COLUMN_TYPE
a	datetime
DROP TABLE t1, t2, t3;
# Bug #17602922 RESULT DIFFERENCES IN MINUS QUERIES WITH IN
# (SUBQUERY-MINUS)
CREATE TABLE t1 (a VARCHAR(1));
INSERT INTO t1 VALUES (NULL);
INSERT INTO t1 VALUES (NULL);
INSERT INTO t1 VALUES ('j');
INSERT INTO t1 VALUES ('k');
INSERT INTO t1 VALUES ('r');
INSERT INTO t1 VALUES ('r');
INSERT INTO t1 VALUES ('h');
SELECT a FROM t1 WHERE a IN (SELECT 'r' FROM t1 MINUS SELECT 'j');
a
r
r
CREATE TABLE t2
SELECT a FROM t1 WHERE a IN (SELECT 'r' FROM t1 MINUS SELECT 'j');
SELECT * FROM t2;
a
r
r
DROP TABLE t1, t2;
# Bug #17580869 FOUND_ROWS() VALUE DO NOT MATCH WITH
# MINUS-LIMIT QUERIES
CREATE TABLE t1 (a INT PRIMARY KEY);
CREATE TABLE t2 (a INT PRIMARY KEY);
INSERT INTO t2 VALUES (1);
EXPLAIN FORMAT=tree SELECT a, SUM(a) FROM t2 MINUS SELECT a, MIN(a) FROM t1 ;
EXPLAIN
-> Table scan on <except temporary>  (cost=*** rows=***)
    -> Except materialize with deduplication  (cost=*** rows=***)
        -> Aggregate: sum(t2.a)  (cost=*** rows=***)
            -> Index scan on t2 using PRIMARY  (cost=*** rows=***)
        -> Zero input rows (No matching min/max row), aggregated into one output row  (cost=*** rows=***)

SELECT a, SUM(a) FROM t2 MINUS SELECT a, MIN(a) FROM t1 ;
a	SUM(a)
1	1
SELECT FOUND_ROWS();
FOUND_ROWS()
1
Warnings:
Warning	1287	FOUND_ROWS() is deprecated and will be removed in a future release. Consider using COUNT(*) instead.
DROP TABLE t1, t2;
# Bug #17669551 CRASH/ASSERT AT SELECT_CREATE::PREPARE2 AT
# SQL_INSERT.CC
CREATE TABLE t1 (a INT);
CREATE TABLE t2 SELECT a, a FROM t1 MINUS SELECT a, a FROM t1;
ERROR 42S21: Duplicate column name 'a'
DROP TABLE t1;
# Bug #17694956 RESULT DIFFERENCES IN MINUS QUERIES WITH LIMIT
CREATE TABLE t1 (a INT);
INSERT INTO t1 VALUES (1);
(SELECT a FROM t1 ORDER BY a LIMIT 0) MINUS SELECT a FROM t1;
a
DROP TABLE t1;
# Bug #17708480 FOUND_ROWS() VALUE DO NOT MATCH WITH MINUS QUERIES
CREATE TABLE t1 (a INT) ;
CREATE TABLE t2 (a INT) ;
INSERT INTO t2 VALUES (1);
SELECT COUNT(*) FROM (
SELECT                     * FROM t2 MINUS SELECT * FROM t1) q;
COUNT(*)
1
SELECT SQL_CALC_FOUND_ROWS * FROM t2 MINUS SELECT * FROM t1;
a
1
Warnings:
Warning	1287	SQL_CALC_FOUND_ROWS is deprecated and will be removed in a future release. Consider using two separate queries instead.
SELECT FOUND_ROWS();
FOUND_ROWS()
1
Warnings:
Warning	1287	FOUND_ROWS() is deprecated and will be removed in a future release. Consider using COUNT(*) instead.
SELECT COUNT(*) FROM (
SELECT                     * FROM t1 MINUS SELECT * FROM t2) q;
COUNT(*)
0
SELECT SQL_CALC_FOUND_ROWS * FROM t1 MINUS SELECT * FROM t2;
a
Warnings:
Warning	1287	SQL_CALC_FOUND_ROWS is deprecated and will be removed in a future release. Consider using two separate queries instead.
SELECT FOUND_ROWS();
FOUND_ROWS()
0
Warnings:
Warning	1287	FOUND_ROWS() is deprecated and will be removed in a future release. Consider using COUNT(*) instead.
DROP TABLE t1, t2;
# End of WL1763 tests
# Bug#18503515 MINUS with set function in ORDER BY should be rejected
# 
# Bug#20456178 ASSERTION FAILED: 
#     (ENUM_SET_TYPELIB && GET_REAL_TYPE(ITEM) == MYSQL_TYPE_NULL)
CREATE TABLE t1(a INT) ;
CREATE TABLE t2(a SET('a'));
INSERT INTO t1 VALUES (1);
INSERT INTO t2 VALUES (1);
SELECT a FROM (SELECT a FROM t2) t1
MINUS
SELECT 1 FROM t1;
a
a
DROP TABLE t1, t2;
#
# Bug #21156155 MINUS GEOMETRY TYPE: UNITIALIZED VALUE IN
# ITEM_TYPE_HOLDER::JOIN_TYPES
#
SELECT NULL MINUS SELECT POINT(1,1);
NULL
NULL
#
# Bug#22602381 FOUND_ROWS() IS NOT WORKING AS EXPECTED WITHOUT
#              SQL_CALC_FOUND_ROWS
#
CREATE TABLE t1(c1 INT);
INSERT INTO t1 VALUES(1),(2),(3);
(SELECT c1 FROM t1) MINUS
(SELECT c1 FROM t1) LIMIT 2;
c1
SELECT FOUND_ROWS();
FOUND_ROWS()
0
Warnings:
Warning	1287	FOUND_ROWS() is deprecated and will be removed in a future release. Consider using COUNT(*) instead.
(SELECT SQL_CALC_FOUND_ROWS c1 FROM t1) MINUS
(SELECT c1 FROM t1) LIMIT 2;
c1
Warnings:
Warning	1287	SQL_CALC_FOUND_ROWS is deprecated and will be removed in a future release. Consider using two separate queries instead.
SELECT FOUND_ROWS();
FOUND_ROWS()
0
Warnings:
Warning	1287	FOUND_ROWS() is deprecated and will be removed in a future release. Consider using COUNT(*) instead.
(SELECT c1 FROM t1 LIMIT 1) MINUS
(SELECT c1 FROM t1 LIMIT 3) LIMIT 2;
c1
SELECT FOUND_ROWS();
FOUND_ROWS()
0
Warnings:
Warning	1287	FOUND_ROWS() is deprecated and will be removed in a future release. Consider using COUNT(*) instead.
(SELECT c1 FROM t1 LIMIT 1) MINUS
(SELECT c1 FROM t1 LIMIT 1) LIMIT 3;
c1
SELECT FOUND_ROWS();
FOUND_ROWS()
0
Warnings:
Warning	1287	FOUND_ROWS() is deprecated and will be removed in a future release. Consider using COUNT(*) instead.
(SELECT c1 FROM t1 LIMIT 3) MINUS
(SELECT c1 FROM t1 LIMIT 3) LIMIT 1 OFFSET 4;
c1
SELECT FOUND_ROWS();
FOUND_ROWS()
0
Warnings:
Warning	1287	FOUND_ROWS() is deprecated and will be removed in a future release. Consider using COUNT(*) instead.
(SELECT c1 FROM t1 LIMIT 1) MINUS
(SELECT c1 FROM t1 LIMIT 1) LIMIT 1 OFFSET 2;
c1
SELECT FOUND_ROWS();
FOUND_ROWS()
0
Warnings:
Warning	1287	FOUND_ROWS() is deprecated and will be removed in a future release. Consider using COUNT(*) instead.
DROP TABLE t1;
#End of test for Bug#22602381
# INSERT SELECT using MINUS:
# MINUS should create no tmp table if not at the top level.
CREATE TABLE t1 (a INT);
INSERT INTO t1 VALUES (1),(2);
CREATE TABLE t2 LIKE t1;
FLUSH STATUS;
SELECT * FROM t1 MINUS SELECT * FROM t1;
a
SHOW STATUS LIKE "handler_write";
Variable_name	Value
Handler_write	2
FLUSH STATUS;
INSERT INTO t2
SELECT * FROM t1 MINUS SELECT * FROM t1;
SHOW STATUS LIKE "handler_write";
Variable_name	Value
Handler_write	2
SELECT * FROM t2;
a
DELETE FROM t2;
FLUSH STATUS;
INSERT INTO t2
SELECT * FROM (SELECT * FROM t1 MINUS SELECT * FROM t1) AS dt;
SHOW STATUS LIKE "handler_write";
Variable_name	Value
Handler_write	2
SELECT * FROM t2;
a
DROP TABLE t1,t2;
#
# Bug#24808970 CREATED_TMP_TABLES STATISTIC IS WRONG
#
FLUSH STATUS;
SELECT 1 MINUS SELECT 2;
1
1
SHOW STATUS LIKE 'Created_tmp_%tables';
Variable_name	Value
Created_tmp_disk_tables	0
Created_tmp_tables	1
FLUSH STATUS;
SELECT 1 MINUS SELECT 2;
1
1
#
# Bug#11747567: INTEGER CONSTANTS CASTED TO BIGINTS BY MINUSS
#
CREATE TABLE t1(
a tinyint(4) DEFAULT NULL,
b int(11) DEFAULT NULL,
c bigint(20) DEFAULT NULL
);
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
CREATE VIEW v1 AS SELECT t1.a AS a, t1.b AS b,t1.c AS c, 1 AS
`1`, 1 AS `Name_exp_1`, 1 AS `Name_exp_1_1` FROM t1 MINUS SELECT -(1) AS `-1`,
-(1) AS `-1`, -(1) AS `-1`, -(1) AS `-1`, -(1) AS `-1`, -(1) AS `-1`;
CREATE VIEW v2 AS SELECT 1 AS `1`, 1 AS `Name_exp_1`, 1 AS `Name_exp_1_1`,
-(1) AS `-1`, -(1) AS `Name_exp_-1`, -(1) AS `Name_exp_1_-1`;
CREATE VIEW v3 AS SELECT t1.a AS a, t1.b AS b, t1.c AS c FROM t1;
DESCRIBE v1;
Field	Type	Null	Key	Default	Extra
a	bigint	YES		NULL	
b	bigint	YES		NULL	
c	bigint	YES		NULL	
1	bigint	NO		0	
Name_exp_1	bigint	NO		0	
Name_exp_1_1	bigint	NO		0	
DESCRIBE v2;
Field	Type	Null	Key	Default	Extra
1	int	NO		0	
Name_exp_1	int	NO		0	
Name_exp_1_1	int	NO		0	
-1	int	NO		0	
Name_exp_-1	int	NO		0	
Name_exp_1_-1	int	NO		0	
DESCRIBE v3;
Field	Type	Null	Key	Default	Extra
a	tinyint	YES		NULL	
b	int	YES		NULL	
c	bigint	YES		NULL	
DROP TABLE t1;
DROP VIEW v1,v2,v3;
# End of test for Bug#11747567
#
# Bug #27068222 CREATE TABLE USING SELECT WITH MINUS
#               FAILS FOR DATE COLUMN
#
CREATE TABLE `t1` (`date` date NOT NULL);
INSERT INTO t1 VALUES ('2017-03-02'), ('2017-06-22');
CREATE TABLE IF NOT EXISTS t2 AS
SELECT * FROM t1
MINUS
SELECT * FROM t1;
DESC t2;
Field	Type	Null	Key	Default	Extra
date	date	NO		NULL	
SELECT * FROM t2;
date
DROP TABLE t1, t2;
#
# Bug #27903792 [MYSQL 8.0 GA DEBUG BUILD] ASSERTION `DATA_TYPE() ==
# MYSQL_TYPE_GEOMETRY' FAILED
#
SELECT ST_GEOMFROMTEXT('POINT(0 0)')
MINUS
SELECT * FROM (SELECT NULL) AS a;
#
# Bug#28237675: ASSERTION IN MINUS QUERY WHEN MIXING CHARACTER SETS
#
CREATE TABLE t(a VARCHAR(10) CHARSET ASCII);
SELECT _utf8mb4 'a' MINUS SELECT a FROM t;
a
a
SELECT _utf8mb4 0xC3A6 MINUS SELECT a FROM t;
ERROR HY000: Illegal mix of collations (utf8mb4_0900_ai_ci,COERCIBLE) and (ascii_general_ci,IMPLICIT) for operation 'UNION'
DROP TABLE t;
#
# Verify that non-nullable columns are properly treated as nullable
# during implicit aggregation, even in MINUSs, even when involving
# views. The non-view case is tested by the test for bug #17580869,
# above.
#
CREATE TABLE t1 (a INT PRIMARY KEY);
CREATE TABLE t2 (a INT PRIMARY KEY);
INSERT INTO t2 VALUES (1);
CREATE VIEW v1 AS SELECT * FROM t1;
SELECT a, a, SUM(a) FROM t2 MINUS SELECT a, a+0, MIN(a) FROM v1;
a	a	SUM(a)
1	1	1
DROP TABLE t1, t2;
DROP VIEW v1;
#
# Bug #29645319: WL#13000: SIG 6 AT AGGREGATOR_DISTINCT::SETUP | SQL/ITEM_SUM.CC
#
# Tests that when executing a MINUS query during optimization, lex->current_select
# is properly restored.
#
CREATE TABLE t1 (f1 VARCHAR(1));
INSERT INTO t1 VALUES ('t'),('a');
SELECT COUNT(DISTINCT f1) FROM t1 WHERE (
SELECT MAX(f1) FROM t1 WHERE f1 NOT IN ( SELECT 5 MINUS SELECT 5 )
) IS NOT NULL;
COUNT(DISTINCT f1)
2
DROP TABLE t1;
#
# Bug #29687893: WL#13000: SIG 6 AT HANDLER::START_PSI_BATCH_MODE() AT SQL/HANDLER.CC
#
# Verify that performance schema batch mode is properly disabled even in non-materialized
# MINUSs.
#
CREATE TABLE t1 (f1 varchar(1));
CREATE INDEX i1 ON t1 (f1);
CREATE TABLE t2 (f1 varchar(1));
INSERT INTO t1 VALUES ('d');
INSERT INTO t2 VALUES ('d');
ANALYZE TABLE t1, t2;
Table	Op	Msg_type	Msg_text
test.t1	analyze	status	OK
test.t2	analyze	status	OK
SELECT t1.f1 FROM t1 LEFT JOIN t2 ON EXISTS ( SELECT * FROM t1, t2 )
MINUS
SELECT t1.f1 FROM t1;
f1
FLUSH TABLES;
DROP TABLE t1, t2;
#
# Bug#22292995 MINUS ... LIMIT 1 EVALUATES TOO MANY ROWS IN 5.5/6 AND TWICE MORE IN 5.7
#
CREATE TABLE t1(a INT);
INSERT INTO t1 VALUES(1);
INSERT INTO t1 SELECT a+1 FROM t1;
INSERT INTO t1 SELECT a+1 FROM t1;
INSERT INTO t1 SELECT a+1 FROM t1;
INSERT INTO t1 SELECT a+1 FROM t1;
INSERT INTO t1 SELECT a+1 FROM t1;
SELECT COUNT(*) FROM t1;
COUNT(*)
32
FLUSH STATUS;
SELECT * FROM t1 LIMIT 1;
a
1
SHOW STATUS LIKE "HANDLER_READ%";
Variable_name	Value
Handler_read_first	1
Handler_read_key	1
Handler_read_last	0
Handler_read_next	0
Handler_read_prev	0
Handler_read_rnd	0
Handler_read_rnd_next	1
FLUSH STATUS;
SELECT * FROM t1 MINUS SELECT * FROM t1 LIMIT 1;
a
SHOW STATUS LIKE "HANDLER_READ%";
Variable_name	Value
Handler_read_first	2
Handler_read_key	66
Handler_read_last	0
Handler_read_next	0
Handler_read_prev	0
Handler_read_rnd	0
Handler_read_rnd_next	73
FLUSH STATUS;
SELECT * FROM t1 MINUS SELECT * FROM t1 LIMIT 1;
a
SHOW STATUS LIKE "HANDLER_READ%";
Variable_name	Value
Handler_read_first	2
Handler_read_key	66
Handler_read_last	0
Handler_read_next	0
Handler_read_prev	0
Handler_read_rnd	0
Handler_read_rnd_next	73
( SELECT *, 'a' FROM t1 LIMIT 10 )
MINUS ( SELECT *, 'b' FROM t1 LIMIT 10 ) LIMIT 3;
a	a
1	a
2	a
3	a
SHOW STATUS LIKE "HANDLER_READ%";
Variable_name	Value
Handler_read_first	4
Handler_read_key	88
Handler_read_last	0
Handler_read_next	0
Handler_read_prev	0
Handler_read_rnd	0
Handler_read_rnd_next	96
DROP TABLE t1;
#
# Bug #30655712: EMPTY RESULTSET FOR SUBQUERY WITH MINUS AND TEXT COLUMN WITH CONSTANT EXPRESSION
#
CREATE TABLE t1 (
pk INTEGER NOT NULL,
b BLOB,
PRIMARY KEY (pk)
);
INSERT INTO t1 VALUES (1,'');
SELECT * FROM ( SELECT * FROM t1 WHERE pk=1 MINUS SELECT * FROM t1 WHERE FALSE ) d1;
pk	b
1	
DROP TABLE t1;
# Bug#29698617: MINUS signed and unsigned int display wrong result
CREATE TABLE t1(id INTEGER SIGNED);
CREATE TABLE t2(id INTEGER UNSIGNED);
INSERT INTO t1(id) VALUES (2000000000);
INSERT INTO t2(id) VALUES (4000000000);
SELECT id FROM t2 MINUS SELECT id FROM t1;
id
4000000000
SELECT MAX(id) FROM t2 MINUS SELECT MAX(id) FROM t1;
MAX(id)
4000000000
SELECT id FROM t1 MINUS SELECT id FROM t2;
id
2000000000
SELECT MAX(id) FROM t1 MINUS SELECT MAX(id) FROM t2;
MAX(id)
2000000000
DROP TABLE t1, t2;
CREATE TABLE t1(
ts TINYINT SIGNED,
tu TINYINT UNSIGNED,
ss SMALLINT SIGNED,
su SMALLINT UNSIGNED,
ms MEDIUMINT SIGNED,
mu MEDIUMINT UNSIGNED,
ls INTEGER SIGNED,
lu INTEGER UNSIGNED,
bs BIGINT SIGNED,
bu BIGINT UNSIGNED
);
INSERT INTO t1 VALUES
(-128, 0, -32768, 0, -8388608, 0, -2147483648, 0, -9223372036854775808, 0),
(127, 255, 32767, 65535, 8388607, 16777215, 2147483647, 4294967295,
9223372036854775807, 18446744073709551615);
CREATE TABLE t2 AS
SELECT ts, ss, ms, ls, bs, tu, su, mu, lu, bu,
ts AS a, ss AS b, ms AS c, ls AS d, bs AS e,
tu AS f, su AS g, mu AS h, lu AS i, bu AS j
FROM t1
MINUS
SELECT ts, ss, ms, ls, bs, tu, su, mu, lu, bu,
tu, su, mu, lu, bu, ts, ss, ms, ls, bs
FROM t1;
DROP TABLE t1, t2;
CREATE TABLE t1(c1 int, c2 int);
INSERT INTO t1 VALUES (1,1), (2,2), (3,3), (3,3);
CREATE TABLE t2(c1 int, c2 int);
INSERT INTO t2 VALUES (1,1), (2,2), (4,4), (4,4);
SELECT * FROM t1 MINUS SELECT * FROM t2 MINUS SELECT * FROM t2;
c1	c2
3	3
SELECT * FROM t1 UNION SELECT * FROM t2 MINUS SELECT * FROM t2;
c1	c2
3	3
SELECT * FROM t1 UNION ALL SELECT * FROM t2 MINUS SELECT * FROM t2;
c1	c2
3	3
SELECT * FROM t1 MINUS SELECT * FROM t2 UNION SELECT * FROM t2;
c1	c2
3	3
1	1
2	2
4	4
SELECT * FROM t1 MINUS SELECT * FROM t2 UNION ALL SELECT * FROM t2;
c1	c2
3	3
1	1
2	2
4	4
4	4
SELECT * FROM (SELECT * FROM t1 MINUS SELECT * FROM t2 MINUS SELECT * FROM t2);
c1	c2
3	3
SELECT * FROM (SELECT * FROM t1 UNION SELECT * FROM t2 MINUS SELECT * FROM t2);
c1	c2
3	3
SELECT * FROM (SELECT * FROM t1 UNION ALL SELECT * FROM t2 MINUS SELECT * FROM t2);
c1	c2
3	3
SELECT * FROM (SELECT * FROM t1 MINUS SELECT * FROM t2 UNION SELECT * FROM t2);
c1	c2
3	3
1	1
2	2
4	4
SELECT * FROM (SELECT * FROM t1 MINUS SELECT * FROM t2 UNION ALL SELECT * FROM t2);
c1	c2
3	3
1	1
2	2
4	4
4	4
SELECT * FROM ((SELECT * FROM t1) MINUS SELECT * FROM t2 MINUS SELECT * FROM t2);
c1	c2
3	3
SELECT * FROM ((SELECT * FROM t1) UNION SELECT * FROM t2 MINUS SELECT * FROM t2);
c1	c2
3	3
SELECT * FROM ((SELECT * FROM t1) UNION ALL SELECT * FROM t2 MINUS SELECT * FROM t2);
c1	c2
3	3
SELECT * FROM ((SELECT * FROM t1) MINUS SELECT * FROM t2 UNION SELECT * FROM t2);
c1	c2
3	3
1	1
2	2
4	4
SELECT * FROM ((SELECT * FROM t1) MINUS SELECT * FROM t2 UNION ALL SELECT * FROM t2);
c1	c2
3	3
1	1
2	2
4	4
4	4
SELECT * FROM (SELECT * FROM t1 GROUP BY C1,C2 MINUS SELECT * FROM t2);
c1	c2
3	3
SELECT * FROM (SELECT * FROM t1 GROUP BY C1,C2 UNION SELECT * FROM t2 GROUP BY C1,C2 MINUS SELECT * FROM t2 GROUP BY C1,C2);
c1	c2
3	3
SELECT * FROM (SELECT * FROM t1 MINUS SELECT * FROM t2) MINUS SELECT * FROM t2;
c1	c2
3	3
SELECT * FROM (SELECT * FROM t1 UNION SELECT * FROM t2) MINUS SELECT * FROM t2;
c1	c2
3	3
SELECT * FROM (SELECT * FROM t1 UNION ALL SELECT * FROM t2) MINUS SELECT * FROM t2;
c1	c2
3	3
SELECT * FROM (SELECT * FROM t1 MINUS SELECT * FROM t2) UNION SELECT * FROM t2;
c1	c2
3	3
1	1
2	2
4	4
SELECT * FROM (SELECT * FROM t1 MINUS SELECT * FROM t2) UNION ALL SELECT * FROM t2;
c1	c2
3	3
1	1
2	2
4	4
4	4
SELECT * FROM ((SELECT * FROM t1 MINUS SELECT * FROM t2) MINUS SELECT * FROM t2);
c1	c2
3	3
SELECT * FROM ((SELECT * FROM t1 UNION SELECT * FROM t2) MINUS SELECT * FROM t2);
c1	c2
3	3
SELECT * FROM ((SELECT * FROM t1 UNION ALL SELECT * FROM t2) MINUS SELECT * FROM t2);
c1	c2
3	3
SELECT * FROM ((SELECT * FROM t1 MINUS SELECT * FROM t2) UNION SELECT * FROM t2);
c1	c2
3	3
1	1
2	2
4	4
SELECT * FROM ((SELECT * FROM t1 MINUS SELECT * FROM t2) UNION ALL SELECT * FROM t2);
c1	c2
3	3
1	1
2	2
4	4
4	4
SELECT * FROM (SELECT * FROM t1 MINUS SELECT * FROM t2 WHERE c1 IN (SELECT c1 FROM t1));
c1	c2
3	3
SELECT * FROM (SELECT * FROM t1 UNION SELECT * FROM t2 MINUS SELECT * FROM t2 WHERE c1 IN (SELECT c1 FROM t1));
c1	c2
3	3
4	4
SELECT * FROM (SELECT * FROM t1 UNION ALL SELECT * FROM t2 MINUS SELECT * FROM t2 WHERE c1 IN (SELECT c1 FROM t1));
c1	c2
3	3
4	4
SELECT * FROM (SELECT * FROM t1 MINUS SELECT * FROM t2 UNION SELECT * FROM t2 WHERE c1 IN (SELECT c1 FROM t1));
c1	c2
3	3
1	1
2	2
SELECT * FROM (SELECT * FROM t1 MINUS SELECT * FROM t2 UNION ALL SELECT * FROM t2 WHERE c1 IN (SELECT c1 FROM t1));
c1	c2
3	3
1	1
2	2
DROP TABLE t1, t2;
CREATE TABLE t1(c1 int);
INSERT INTO t1 VALUES (1), (2), (3);
CREATE TABLE t2(c1 int);
INSERT INTO t2 VALUES (1), (2);
SELECT * FROM t1 MINUS SELECT * FROM t2 LIMIT 0;
c1
SELECT * FROM t1 MINUS SELECT * FROM t2 LIMIT 1;
c1
3
SELECT * FROM t1 MINUS SELECT * FROM t2 LIMIT 2;
c1
3
SELECT * FROM t1 MINUS SELECT * FROM t2 LIMIT 0 OFFSET 1;
c1
SELECT * FROM t1 MINUS SELECT * FROM t2 LIMIT 1 OFFSET 0;
c1
3
SELECT * FROM t1 MINUS SELECT * FROM t2 LIMIT 1 OFFSET 1;
c1
SELECT * FROM t1 MINUS SELECT * FROM t1 LIMIT 0;
c1
SELECT * FROM t1 MINUS SELECT * FROM t1 LIMIT 2;
c1
SELECT * FROM t1 MINUS SELECT * FROM t1 LIMIT 0 OFFSET 1;
c1
SELECT * FROM t1 MINUS SELECT * FROM t1 LIMIT 1 OFFSET 1;
c1
SELECT * FROM (SELECT * FROM t1 MINUS SELECT * FROM t2 LIMIT 0);
c1
SELECT * FROM (SELECT * FROM t1 MINUS SELECT * FROM t2 LIMIT 1);
c1
3
SELECT * FROM (SELECT * FROM t1 MINUS SELECT * FROM t2 LIMIT 2);
c1
3
SELECT * FROM (SELECT * FROM t1 MINUS SELECT * FROM t2 LIMIT 0 OFFSET 1);
c1
SELECT * FROM (SELECT * FROM t1 MINUS SELECT * FROM t2 LIMIT 1 OFFSET 0);
c1
3
SELECT * FROM (SELECT * FROM t1 MINUS SELECT * FROM t2 LIMIT 1 OFFSET 1);
c1
SELECT * FROM (SELECT * FROM t1 MINUS SELECT * FROM t1 LIMIT 0);
c1
SELECT * FROM (SELECT * FROM t1 MINUS SELECT * FROM t1 LIMIT 2);
c1
SELECT * FROM (SELECT * FROM t1 MINUS SELECT * FROM t1 LIMIT 0 OFFSET 1);
c1
SELECT * FROM (SELECT * FROM t1 MINUS SELECT * FROM t1 LIMIT 1 OFFSET 1);
c1
SELECT * FROM (SELECT * FROM t1 MINUS SELECT * FROM t2 ORDER BY c1 LIMIT 0);
c1
SELECT * FROM (SELECT * FROM t1 MINUS SELECT * FROM t2 ORDER BY c1 LIMIT 1);
c1
3
SELECT * FROM (SELECT * FROM t1 MINUS SELECT * FROM t2 ORDER BY c1 LIMIT 2);
c1
3
SELECT * FROM (SELECT * FROM t1 MINUS SELECT * FROM t2 ORDER BY c1 LIMIT 0 OFFSET 1);
c1
SELECT * FROM (SELECT * FROM t1 MINUS SELECT * FROM t2 ORDER BY c1 LIMIT 1 OFFSET 0);
c1
3
SELECT * FROM (SELECT * FROM t1 MINUS SELECT * FROM t2 ORDER BY c1 LIMIT 1 OFFSET 1);
c1
SELECT * FROM (SELECT * FROM t1 MINUS SELECT * FROM t1 ORDER BY c1 LIMIT 0);
c1
SELECT * FROM (SELECT * FROM t1 MINUS SELECT * FROM t1 ORDER BY c1 LIMIT 2);
c1
SELECT * FROM (SELECT * FROM t1 MINUS SELECT * FROM t1 ORDER BY c1 LIMIT 0 OFFSET 1);
c1
SELECT * FROM (SELECT * FROM t1 MINUS SELECT * FROM t1 ORDER BY c1 LIMIT 1 OFFSET 1);
c1
DROP TABLE t1, t2;
create table t1(a int);
create table t2(a int);
insert into t1 values(1),(2),(3);
select a from ((select * from t1 minus select * from t2) limit 1);
a
1
drop table t1, t2;
