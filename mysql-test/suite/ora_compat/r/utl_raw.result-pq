set sql_mode='oracle,emptystring_equal_null';
set names utf8mb4;
create table t1(
id int,
r raw
);
create table t2(
id int,
r1 raw,
r2 raw
);
create table tvarchar2(
id int,
c  varchar2(1024)
);
create table treal(
id int,
f  float,
d  double,
e  int
);
create table tint(
id int,
n  int,
e  int
);
create table tnumber(
id int,
n  number(65, 30)
);
set @float_bound_max = 3.4028234e+38;
set @float_bound_min = 1.1754943E-38;
set @double_bound_max = 1.79769313486231E+308;
set @double_bound_min = 2.22507485850720E-308;
set @int_max = 2147483647;
set @int_min = -2147483648;
insert into t1 values(1, NULL),(2, ''),(3, 'a'),(4, 'ab'),(5, '我');
insert into t2 values(1, NULL, 'a'),
(2, 'a', NULL),
(3, '', 'a'),
(4, 'a', ''),
(5, 'a','a'),
(6, 'a', 'b'),
(7, 'a', 'ab'),
(8, 'ab', 'a'),
(9, 'a', '你好'),
(10, '你好', 'a'),
(11, 'ab', '你好'),
(12, '你好', 'ab'),
(13, '你好', '你好');
insert into tvarchar2 values(1, NULL),(2, ''),(3, 'a'),(4, 'ab'),(5, '你好');
insert into treal values(1, '', '', 1),(1, '', '', 2),(1, '', '', 3)
, (2, NULL, NULL, 1),(2, NULL, NULL, 2),(2, NULL, NULL, 3)
, (3, 0, 0, 1),(3, 0, 0, 2),(3, 0, 0, 3),(3, 0, 0, ''),(3, 0, 0, NULL),(3, 0, 0, 0), (3, 0, 0, 4)
, (4, 3.14, 3.14, 1),(4, 3.14, 3.14, 2),(4, 3.14, 3.14, 3),(4, -3.14, -3.14, 1),(4, -3.14, -3.14, 2),(4, -3.14, -3.14, 3)
, (5, @float_bound_max, @double_bound_max, 1),(5, @float_bound_max, @double_bound_max, 2),(5, @float_bound_max, @double_bound_max, 3)
, (5, -@float_bound_max, -@double_bound_max, 1),(5, -@float_bound_max, -@double_bound_max, 2),(5, -@float_bound_max, -@double_bound_max, 3)
, (6, @float_bound_min, @double_bound_min, 1),(6, @float_bound_min, @double_bound_min, 2),(6, @float_bound_min, @double_bound_min, 3)
, (6, -@float_bound_min, -@double_bound_min, 1),(6, -@float_bound_min, -@double_bound_min, 2),(6, -@float_bound_min, -@double_bound_min, 3);
insert into tint values(1, '', 1),(1, '', 2),(1, '', 3)
, (2, NULL, 1),(2, NULL, 2),(2, NULL, 3)
, (3, 0, 1),(3, 0, 2),(3, 0, 3),(3, 0, ''),(3, 0, NULL),(3, 0, 0),(3, 0, 4)
, (4, 3.14, 1),(4, 3.14, 2),(4, 3.14, 3)
, (5, -3.14, 1),(5, -3.14, 2),(5, -3.14, 3)
, (6, @int_max, 1),(6, @int_max, 2),(6, @int_max, 3)
, (7, @int_min, 1),(7, @int_min, 2),(7, @int_min, 3);
insert into tnumber values(1, '')
, (2, NULL)
, (3, 0)
, (4, 3.14)
, (5, -3.14)
, (6, 3.4028234e+10)
, (7, -3.4028234e+10);
#
# UTL_RAW.BIT_AND
#
SELECT HEX(UTL_RAW.BIT_AND(r1, r2)) FROM t2;
HEX(UTL_RAW.BIT_AND(r1, r2))
NULL
NULL
NULL
NULL
61
60
6162
6162
60BDA0E5A5BD
60BDA0E5A5BD
6020A0E5A5BD
6020A0E5A5BD
E4BDA0E5A5BD
Warnings:
Note	1585	This function 'BIT_AND' has the same name as a native function
Note	1585	This function 'BIT_OR' has the same name as a native function
Note	1585	This function 'BIT_XOR' has the same name as a native function
Warning	3720	NATIONAL/NCHAR/NVARCHAR implies the character set UTF8MB3, which will be replaced by UTF8MB4 in a future release. Please consider using CHAR(x) CHARACTER SET UTF8MB4 in order to be unambiguous.
Warning	3720	NATIONAL/NCHAR/NVARCHAR implies the character set UTF8MB3, which will be replaced by UTF8MB4 in a future release. Please consider using CHAR(x) CHARACTER SET UTF8MB4 in order to be unambiguous.
Warning	3720	NATIONAL/NCHAR/NVARCHAR implies the character set UTF8MB3, which will be replaced by UTF8MB4 in a future release. Please consider using CHAR(x) CHARACTER SET UTF8MB4 in order to be unambiguous.
Note	1585	This function 'CONCAT' has the same name as a native function
Note	1585	This function 'CONVERT' has the same name as a native function
Note	1585	This function 'LENGTH' has the same name as a native function
Note	1585	This function 'REVERSE' has the same name as a native function
Note	1585	This function 'SUBSTR' has the same name as a native function
Note	1585	This function 'TRANSLATE' has the same name as a native function
Note	1585	This function 'BIT_AND' has the same name as a native function
Note	1585	This function 'BIT_OR' has the same name as a native function
Note	1585	This function 'BIT_XOR' has the same name as a native function
Warning	3720	NATIONAL/NCHAR/NVARCHAR implies the character set UTF8MB3, which will be replaced by UTF8MB4 in a future release. Please consider using CHAR(x) CHARACTER SET UTF8MB4 in order to be unambiguous.
Warning	3720	NATIONAL/NCHAR/NVARCHAR implies the character set UTF8MB3, which will be replaced by UTF8MB4 in a future release. Please consider using CHAR(x) CHARACTER SET UTF8MB4 in order to be unambiguous.
Warning	3720	NATIONAL/NCHAR/NVARCHAR implies the character set UTF8MB3, which will be replaced by UTF8MB4 in a future release. Please consider using CHAR(x) CHARACTER SET UTF8MB4 in order to be unambiguous.
Note	1585	This function 'CONCAT' has the same name as a native function
Note	1585	This function 'CONVERT' has the same name as a native function
Note	1585	This function 'LENGTH' has the same name as a native function
Note	1585	This function 'REVERSE' has the same name as a native function
Note	1585	This function 'SUBSTR' has the same name as a native function
Note	1585	This function 'TRANSLATE' has the same name as a native function
#
# UTL_RAW.BIT_COMPLEMENT
#
SELECT HEX(UTL_RAW.BIT_COMPLEMENT(r)) FROM t1;
HEX(UTL_RAW.BIT_COMPLEMENT(r))
NULL
NULL
9E
9E9D
19776E
#
# UTL_RAW.BIT_OR
#
SELECT HEX(UTL_RAW.BIT_OR(r1, r2)) FROM t2;
HEX(UTL_RAW.BIT_OR(r1, r2))
NULL
NULL
NULL
NULL
61
63
6162
6162
E5BDA0E5A5BD
E5BDA0E5A5BD
E5FFA0E5A5BD
E5FFA0E5A5BD
E4BDA0E5A5BD
#
# UTL_RAW.BIT_XOR
#
SELECT HEX(UTL_RAW.BIT_XOR(r1, r2)) FROM t2;
HEX(UTL_RAW.BIT_XOR(r1, r2))
NULL
NULL
NULL
NULL
00
03
0062
0062
85BDA0E5A5BD
85BDA0E5A5BD
85DFA0E5A5BD
85DFA0E5A5BD
000000000000
#
# UTL_RAW.CAST_FROM_BINARY_DOUBLE and UTL_RAW.CAST_TO_BINARY_DOUBLE
#
SELECT HEX(UTL_RAW.CAST_FROM_BINARY_DOUBLE(d, e)) FROM treal WHERE e IS NULL OR (e <> 0 AND e <> 4);
HEX(UTL_RAW.CAST_FROM_BINARY_DOUBLE(d, e))
NULL
NULL
NULL
NULL
NULL
NULL
0000000000000000
0000000000000000
0000000000000000
NULL
NULL
40091EB851EB851F
1F85EB51B81E0940
1F85EB51B81E0940
C0091EB851EB851F
1F85EB51B81E09C0
1F85EB51B81E09C0
7FEFFFFFFFFFFFE2
E2FFFFFFFFFFEF7F
E2FFFFFFFFFFEF7F
FFEFFFFFFFFFFFE2
E2FFFFFFFFFFEFFF
E2FFFFFFFFFFEFFF
0010000078A42202
0222A47800001000
0222A47800001000
8010000078A42202
0222A47800001080
0222A47800001080
SELECT HEX(UTL_RAW.CAST_FROM_BINARY_DOUBLE(d, e)) FROM treal WHERE e = 0 OR e = 4;
ERROR HY000: PL/SQL: numeric or value error
SELECT id, UTL_RAW.CAST_TO_BINARY_DOUBLE(UTL_RAW.CAST_FROM_BINARY_DOUBLE(d, e), e), e FROM treal WHERE e IS NULL OR (e <> 0 AND e <> 4);
id	UTL_RAW.CAST_TO_BINARY_DOUBLE(UTL_RAW.CAST_FROM_BINARY_DOUBLE(d, e), e)	e
1	NULL	1
1	NULL	2
1	NULL	3
2	NULL	1
2	NULL	2
2	NULL	3
3	0	1
3	0	2
3	0	3
3	NULL	NULL
3	NULL	NULL
4	3.14	1
4	3.14	2
4	3.14	3
4	-3.14	1
4	-3.14	2
4	-3.14	3
5	1.79769313486231e308	1
5	1.79769313486231e308	2
5	1.79769313486231e308	3
5	-1.79769313486231e308	1
5	-1.79769313486231e308	2
5	-1.79769313486231e308	3
6	2.2250748585072e-308	1
6	2.2250748585072e-308	2
6	2.2250748585072e-308	3
6	-2.2250748585072e-308	1
6	-2.2250748585072e-308	2
6	-2.2250748585072e-308	3
SELECT id, UTL_RAW.CAST_TO_BINARY_DOUBLE(UTL_RAW.CAST_FROM_BINARY_DOUBLE(d, e), e), e FROM treal WHERE e = 0 OR e = 4;
ERROR HY000: PL/SQL: numeric or value error
#
# UTL_RAW.CAST_FROM_BINARY_FLOAT and UTL_RAW.CAST_TO_BINARY_FLOAT
#
SELECT HEX(UTL_RAW.CAST_FROM_BINARY_FLOAT(f, e)) FROM treal WHERE e IS NULL OR (e <> 0 AND e <> 4);
HEX(UTL_RAW.CAST_FROM_BINARY_FLOAT(f, e))
NULL
NULL
NULL
NULL
NULL
NULL
00000000
00000000
00000000
NULL
NULL
4048F5C3
C3F54840
C3F54840
C048F5C3
C3F548C0
C3F548C0
7F7FFFFF
FFFF7F7F
FFFF7F7F
FF7FFFFF
FFFF7FFF
FFFF7FFF
00800000
00008000
00008000
80800000
00008080
00008080
SELECT HEX(UTL_RAW.CAST_FROM_BINARY_FLOAT(f, e)) FROM treal WHERE e = 0 OR e = 4;
ERROR HY000: PL/SQL: numeric or value error
SELECT id, UTL_RAW.CAST_TO_BINARY_FLOAT(UTL_RAW.CAST_FROM_BINARY_FLOAT(f, e), e), e FROM treal WHERE e IS NULL OR (e <> 0 AND e <> 4);
id	UTL_RAW.CAST_TO_BINARY_FLOAT(UTL_RAW.CAST_FROM_BINARY_FLOAT(f, e), e)	e
1	NULL	1
1	NULL	2
1	NULL	3
2	NULL	1
2	NULL	2
2	NULL	3
3	0	1
3	0	2
3	0	3
3	NULL	NULL
3	NULL	NULL
4	3.14	1
4	3.14	2
4	3.14	3
4	-3.14	1
4	-3.14	2
4	-3.14	3
5	3.40282e38	1
5	3.40282e38	2
5	3.40282e38	3
5	-3.40282e38	1
5	-3.40282e38	2
5	-3.40282e38	3
6	1.17549e-38	1
6	1.17549e-38	2
6	1.17549e-38	3
6	-1.17549e-38	1
6	-1.17549e-38	2
6	-1.17549e-38	3
SELECT id, UTL_RAW.CAST_TO_BINARY_FLOAT(UTL_RAW.CAST_FROM_BINARY_FLOAT(f, e), e), e FROM treal WHERE e = 0 OR e = 4;
ERROR HY000: PL/SQL: numeric or value error
SELECT HEX(UTL_RAW.CAST_FROM_BINARY_FLOAT(TO_NUMBER('2e+70','9.99EEEE'), 1)) FROM DUAL;
ERROR 22003: Out of range value for column 'n' at row 1
#
# UTL_RAW.CAST_FROM_BINARY_INTEGER and UTL_RAW.CAST_TO_BINARY_INTEGER
#
SELECT HEX(UTL_RAW.CAST_FROM_BINARY_INTEGER(n, e)) FROM tint WHERE e IS NULL OR (e <> 0 AND e <> 4);
HEX(UTL_RAW.CAST_FROM_BINARY_INTEGER(n, e))
NULL
NULL
NULL
NULL
NULL
NULL
00000000
00000000
00000000
NULL
NULL
00000003
03000000
03000000
FFFFFFFD
FDFFFFFF
FDFFFFFF
7FFFFFFF
FFFFFF7F
FFFFFF7F
80000000
00000080
00000080
SELECT HEX(UTL_RAW.CAST_FROM_BINARY_INTEGER(n, e)) FROM tint WHERE e = 0 OR e = 4;
ERROR HY000: PL/SQL: numeric or value error
SELECT id, UTL_RAW.CAST_TO_BINARY_INTEGER(UTL_RAW.CAST_FROM_BINARY_INTEGER(n, e), e), e FROM tint WHERE e IS NULL OR (e <> 0 AND e <> 4);
id	UTL_RAW.CAST_TO_BINARY_INTEGER(UTL_RAW.CAST_FROM_BINARY_INTEGER(n, e), e)	e
1	NULL	1
1	NULL	2
1	NULL	3
2	NULL	1
2	NULL	2
2	NULL	3
3	0	1
3	0	2
3	0	3
3	NULL	NULL
3	NULL	NULL
4	3	1
4	3	2
4	3	3
5	-3	1
5	-3	2
5	-3	3
6	2147483647	1
6	2147483647	2
6	2147483647	3
7	-2147483648	1
7	-2147483648	2
7	-2147483648	3
SELECT id, UTL_RAW.CAST_TO_BINARY_INTEGER(UTL_RAW.CAST_FROM_BINARY_INTEGER(n, e), e), e FROM tint WHERE e = 0 OR e = 4;
ERROR HY000: PL/SQL: numeric or value error
SELECT UTL_RAW.CAST_FROM_BINARY_INTEGER(TO_NUMBER('2e+80','9.99EEEE'),1) FROM DUAL;
ERROR 22003: Out of range value for column 'n' at row 1
#
# UTL_RAW.CAST_TO_RAW
#
SELECT UTL_RAW.CAST_TO_NVARCHAR2(UTL_RAW.CAST_TO_RAW(c)) FROM tvarchar2;
UTL_RAW.CAST_TO_NVARCHAR2(UTL_RAW.CAST_TO_RAW(c))
NULL
NULL
a
ab
你好
SELECT HEX(UTL_RAW.CAST_TO_RAW(c)) FROM tvarchar2;
HEX(UTL_RAW.CAST_TO_RAW(c))
NULL
NULL
61
6162
E4BDA0E5A5BD
SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_RAW.CAST_TO_RAW(c)) FROM tvarchar2;
UTL_RAW.CAST_TO_VARCHAR2(UTL_RAW.CAST_TO_RAW(c))
NULL
NULL
a
ab
你好
#
# UTL_RAW.COMPARE
#
SELECT UTL_RAW.COMPARE(r1, r2) FROM t2;
UTL_RAW.COMPARE(r1, r2)
1
1
1
1
0
1
2
2
1
1
1
1
0
SELECT UTL_RAW.COMPARE(UTL_RAW.CAST_TO_RAW('a'), UTL_RAW.CAST_TO_RAW('ab'), UTL_RAW.CAST_TO_RAW('b')) FROM DUAL;
UTL_RAW.COMPARE(UTL_RAW.CAST_TO_RAW('a'), UTL_RAW.CAST_TO_RAW('ab'), UTL_RAW.CAST_TO_RAW('b'))
0
SELECT UTL_RAW.COMPARE(UTL_RAW.CAST_TO_RAW('ab'), UTL_RAW.CAST_TO_RAW('abaa'), UTL_RAW.CAST_TO_RAW('ab')) FROM DUAL;
UTL_RAW.COMPARE(UTL_RAW.CAST_TO_RAW('ab'), UTL_RAW.CAST_TO_RAW('abaa'), UTL_RAW.CAST_TO_RAW('ab'))
0
SELECT UTL_RAW.COMPARE(UTL_RAW.CAST_TO_RAW('a'), UTL_RAW.CAST_TO_RAW('ab'), NULL) FROM DUAL;
UTL_RAW.COMPARE(UTL_RAW.CAST_TO_RAW('a'), UTL_RAW.CAST_TO_RAW('ab'), NULL)
2
SELECT UTL_RAW.COMPARE(UTL_RAW.CAST_TO_RAW('a'), UTL_RAW.CAST_TO_RAW('ab'), '') FROM DUAL;
UTL_RAW.COMPARE(UTL_RAW.CAST_TO_RAW('a'), UTL_RAW.CAST_TO_RAW('ab'), '')
2
#
# UTL_RAW.CONCAT
#
SELECT HEX(UTL_RAW.CONCAT(UTL_RAW.CAST_TO_RAW(''))) FROM DUAL;
HEX(UTL_RAW.CONCAT(UTL_RAW.CAST_TO_RAW('')))
NULL
SELECT HEX(UTL_RAW.CONCAT(UTL_RAW.CAST_TO_RAW(''), UTL_RAW.CAST_TO_RAW('a'))) FROM DUAL;
HEX(UTL_RAW.CONCAT(UTL_RAW.CAST_TO_RAW(''), UTL_RAW.CAST_TO_RAW('a')))
61
SELECT HEX(UTL_RAW.CONCAT(UTL_RAW.CAST_TO_RAW(NULL))) FROM DUAL;
HEX(UTL_RAW.CONCAT(UTL_RAW.CAST_TO_RAW(NULL)))
NULL
SELECT HEX(UTL_RAW.CONCAT(UTL_RAW.CAST_TO_RAW(NULL), UTL_RAW.CAST_TO_RAW('a'))) FROM DUAL;
HEX(UTL_RAW.CONCAT(UTL_RAW.CAST_TO_RAW(NULL), UTL_RAW.CAST_TO_RAW('a')))
61
SELECT HEX(UTL_RAW.CONCAT(UTL_RAW.CAST_TO_RAW('a'))) FROM DUAL;
HEX(UTL_RAW.CONCAT(UTL_RAW.CAST_TO_RAW('a')))
61
SELECT HEX(UTL_RAW.CONCAT(UTL_RAW.CAST_TO_RAW('a'), UTL_RAW.CAST_TO_RAW('a'))) FROM DUAL;
HEX(UTL_RAW.CONCAT(UTL_RAW.CAST_TO_RAW('a'), UTL_RAW.CAST_TO_RAW('a')))
6161
SELECT HEX(UTL_RAW.CONCAT(UTL_RAW.CAST_TO_RAW('你好'), UTL_RAW.CAST_TO_RAW('世界'))) FROM DUAL;
HEX(UTL_RAW.CONCAT(UTL_RAW.CAST_TO_RAW('你好'), UTL_RAW.CAST_TO_RAW('世界')))
E4BDA0E5A5BDE4B896E7958C
SELECT HEX(UTL_RAW.CONCAT(UTL_RAW.CAST_TO_RAW('a'), UTL_RAW.CAST_TO_RAW('b'), UTL_RAW.CAST_TO_RAW('c'), UTL_RAW.CAST_TO_RAW('d'), UTL_RAW.CAST_TO_RAW('e'), UTL_RAW.CAST_TO_RAW('f')
, UTL_RAW.CAST_TO_RAW('ff'), UTL_RAW.CAST_TO_RAW('ee'), UTL_RAW.CAST_TO_RAW('dd'), UTL_RAW.CAST_TO_RAW('cc'), UTL_RAW.CAST_TO_RAW('bb'), UTL_RAW.CAST_TO_RAW('aa'))) FROM DUAL;
HEX(UTL_RAW.CONCAT(UTL_RAW.CAST_TO_RAW('a'), UTL_RAW.CAST_TO_RAW('b'), UTL_RAW.CAST_TO_RAW('c'), UTL_RAW.CAST_TO_RAW('d'), UTL_RAW.CAST_TO_RAW('e'), UTL_RAW.CAST_TO_RAW('f')
, UTL_RAW.CAST_TO_RAW('ff'), UTL_RAW.CAST_TO_RAW('ee'), UTL_RAW.CAST_TO_RAW('dd')
616263646566666665656464636362626161
SELECT HEX(UTL_RAW.CONCAT(UTL_RAW.CAST_TO_RAW('a'), UTL_RAW.CAST_TO_RAW('b'), UTL_RAW.CAST_TO_RAW('c'), UTL_RAW.CAST_TO_RAW('d'), UTL_RAW.CAST_TO_RAW('e'), UTL_RAW.CAST_TO_RAW('')
, UTL_RAW.CAST_TO_RAW(''), UTL_RAW.CAST_TO_RAW('ee'), UTL_RAW.CAST_TO_RAW('dd'), UTL_RAW.CAST_TO_RAW('cc'), UTL_RAW.CAST_TO_RAW('bb'), UTL_RAW.CAST_TO_RAW('aa'))) FROM DUAL;
HEX(UTL_RAW.CONCAT(UTL_RAW.CAST_TO_RAW('a'), UTL_RAW.CAST_TO_RAW('b'), UTL_RAW.CAST_TO_RAW('c'), UTL_RAW.CAST_TO_RAW('d'), UTL_RAW.CAST_TO_RAW('e'), UTL_RAW.CAST_TO_RAW('')
, UTL_RAW.CAST_TO_RAW(''), UTL_RAW.CAST_TO_RAW('ee'), UTL_RAW.CAST_TO_RAW('dd'), U
616263646565656464636362626161
SELECT HEX(UTL_RAW.CONCAT(UTL_RAW.CAST_TO_RAW('a'), UTL_RAW.CAST_TO_RAW('b'), UTL_RAW.CAST_TO_RAW('c'), UTL_RAW.CAST_TO_RAW('d'), UTL_RAW.CAST_TO_RAW('e'), UTL_RAW.CAST_TO_RAW(NULL)
, UTL_RAW.CAST_TO_RAW(NULL), UTL_RAW.CAST_TO_RAW('ee'), UTL_RAW.CAST_TO_RAW('dd'), UTL_RAW.CAST_TO_RAW('cc'), UTL_RAW.CAST_TO_RAW('bb'), UTL_RAW.CAST_TO_RAW('aa'))) FROM DUAL;
HEX(UTL_RAW.CONCAT(UTL_RAW.CAST_TO_RAW('a'), UTL_RAW.CAST_TO_RAW('b'), UTL_RAW.CAST_TO_RAW('c'), UTL_RAW.CAST_TO_RAW('d'), UTL_RAW.CAST_TO_RAW('e'), UTL_RAW.CAST_TO_RAW(NULL)
, UTL_RAW.CAST_TO_RAW(NULL), UTL_RAW.CAST_TO_RAW('ee'), UTL_RAW.CAST_TO_RAW('dd'
616263646565656464636362626161
#
# UTL_RAW.CONVERT
#
SELECT UTL_RAW.CONVERT(UTL_RAW.CAST_TO_RAW(''), 'GBK', 'UTF8MB4') FROM DUAL;
ERROR HY000: PL/SQL: numeric or value error
SELECT UTL_RAW.CONVERT(UTL_RAW.CAST_TO_RAW(NULL), 'GBK', 'UTF8MB4') FROM DUAL;
ERROR HY000: PL/SQL: numeric or value error
SELECT UTL_RAW.CONVERT(UTL_RAW.CAST_TO_RAW('a'), '', 'UTF8MB4') FROM DUAL;
ERROR HY000: PL/SQL: numeric or value error
SELECT UTL_RAW.CONVERT(UTL_RAW.CAST_TO_RAW('a'), NULL, 'UTF8MB4') FROM DUAL;
ERROR HY000: PL/SQL: numeric or value error
SELECT UTL_RAW.CONVERT(UTL_RAW.CAST_TO_RAW('a'), 'GBK', '') FROM DUAL;
ERROR HY000: PL/SQL: numeric or value error
SELECT UTL_RAW.CONVERT(UTL_RAW.CAST_TO_RAW('a'), 'GBK', NULL) FROM DUAL;
ERROR HY000: PL/SQL: numeric or value error
SELECT HEX(UTL_RAW.CONVERT(UTL_RAW.CAST_TO_RAW('a'), 'GBK', 'UTF8MB4')) FROM DUAL;
HEX(UTL_RAW.CONVERT(UTL_RAW.CAST_TO_RAW('a'), 'GBK', 'UTF8MB4'))
61
SELECT HEX(UTL_RAW.CONVERT(UTL_RAW.CAST_TO_RAW('ab'), 'GBK', 'UTF8MB4')) FROM DUAL;
HEX(UTL_RAW.CONVERT(UTL_RAW.CAST_TO_RAW('ab'), 'GBK', 'UTF8MB4'))
6162
SELECT HEX(UTL_RAW.CONVERT(UTL_RAW.CAST_TO_RAW('你好'), 'GBK', 'UTF8MB4')) FROM DUAL;
HEX(UTL_RAW.CONVERT(UTL_RAW.CAST_TO_RAW('你好'), 'GBK', 'UTF8MB4'))
C4E3BAC3
SELECT HEX(UTL_RAW.CONVERT(UTL_RAW.CAST_TO_RAW('你好'), 'UTF8MB4', 'GBK')) FROM DUAL;
HEX(UTL_RAW.CONVERT(UTL_RAW.CAST_TO_RAW('你好'), 'UTF8MB4', 'GBK'))
E6B5A3E78AB2E382BD
#
# UTL_RAW.COPIES
#
SELECT UTL_RAW.COPIES(NULL, 1) FROM DUAL;
ERROR HY000: PL/SQL: numeric or value error
SELECT UTL_RAW.COPIES('', 1) FROM DUAL;
ERROR HY000: PL/SQL: numeric or value error
SELECT UTL_RAW.COPIES(UTL_RAW.CAST_TO_RAW('a'), '') FROM DUAL;
ERROR HY000: PL/SQL: numeric or value error
SELECT UTL_RAW.COPIES(UTL_RAW.CAST_TO_RAW('a'), NULL) FROM DUAL;
ERROR HY000: PL/SQL: numeric or value error
SELECT UTL_RAW.COPIES(UTL_RAW.CAST_TO_RAW('a'), 0) FROM DUAL;
ERROR HY000: PL/SQL: numeric or value error
SELECT HEX(UTL_RAW.COPIES(UTL_RAW.CAST_TO_RAW('a'), 1)) FROM DUAL;
HEX(UTL_RAW.COPIES(UTL_RAW.CAST_TO_RAW('a'), 1))
61
SELECT HEX(UTL_RAW.COPIES(UTL_RAW.CAST_TO_RAW('a'), 2)) FROM DUAL;
HEX(UTL_RAW.COPIES(UTL_RAW.CAST_TO_RAW('a'), 2))
6161
SELECT HEX(UTL_RAW.COPIES(UTL_RAW.CAST_TO_RAW('ab'), 1)) FROM DUAL;
HEX(UTL_RAW.COPIES(UTL_RAW.CAST_TO_RAW('ab'), 1))
6162
SELECT HEX(UTL_RAW.COPIES(UTL_RAW.CAST_TO_RAW('ab'), 2)) FROM DUAL;
HEX(UTL_RAW.COPIES(UTL_RAW.CAST_TO_RAW('ab'), 2))
61626162
SELECT HEX(UTL_RAW.COPIES(UTL_RAW.CAST_TO_RAW('你好'), 1)) FROM DUAL;
HEX(UTL_RAW.COPIES(UTL_RAW.CAST_TO_RAW('你好'), 1))
E4BDA0E5A5BD
SELECT HEX(UTL_RAW.COPIES(UTL_RAW.CAST_TO_RAW('你好'), 2)) FROM DUAL;
HEX(UTL_RAW.COPIES(UTL_RAW.CAST_TO_RAW('你好'), 2))
E4BDA0E5A5BDE4BDA0E5A5BD
#
# UTL_RAW.LENGTH
#
SELECT UTL_RAW.LENGTH(UTL_RAW.CAST_TO_RAW('')) FROM DUAL;
UTL_RAW.LENGTH(UTL_RAW.CAST_TO_RAW(''))
NULL
SELECT UTL_RAW.LENGTH(UTL_RAW.CAST_TO_RAW(NULL)) FROM DUAL;
UTL_RAW.LENGTH(UTL_RAW.CAST_TO_RAW(NULL))
NULL
SELECT UTL_RAW.LENGTH(UTL_RAW.CAST_TO_RAW('a')) FROM DUAL;
UTL_RAW.LENGTH(UTL_RAW.CAST_TO_RAW('a'))
1
SELECT UTL_RAW.LENGTH(UTL_RAW.CAST_TO_RAW('ab')) FROM DUAL;
UTL_RAW.LENGTH(UTL_RAW.CAST_TO_RAW('ab'))
2
SELECT UTL_RAW.LENGTH(UTL_RAW.CAST_TO_RAW('你好')) FROM DUAL;
UTL_RAW.LENGTH(UTL_RAW.CAST_TO_RAW('你好'))
6
#
# UTL_RAW.OVERLAY
#
SELECT UTL_RAW.OVERLAY('', UTL_RAW.CAST_TO_RAW('abc')) FROM DUAL;
ERROR HY000: PL/SQL: numeric or value error
SELECT UTL_RAW.OVERLAY(NULL, UTL_RAW.CAST_TO_RAW('abc')) FROM DUAL;
ERROR HY000: PL/SQL: numeric or value error
SELECT UTL_RAW.OVERLAY(UTL_RAW.CAST_TO_RAW('xxx'), '') FROM DUAL;
ERROR HY000: PL/SQL: numeric or value error
SELECT UTL_RAW.OVERLAY(UTL_RAW.CAST_TO_RAW('xxx'), NULL) FROM DUAL;
ERROR HY000: PL/SQL: numeric or value error
SELECT UTL_RAW.OVERLAY(UTL_RAW.CAST_TO_RAW('xxx'), UTL_RAW.CAST_TO_RAW('abc'), 0) FROM DUAL;
ERROR HY000: PL/SQL: numeric or value error
SELECT UTL_RAW.OVERLAY(UTL_RAW.CAST_TO_RAW('xxx'), UTL_RAW.CAST_TO_RAW('abc'), 1, -1) FROM DUAL;
ERROR HY000: PL/SQL: numeric or value error
SELECT HEX(UTL_RAW.OVERLAY(UTL_RAW.CAST_TO_RAW('xxx'), UTL_RAW.CAST_TO_RAW('abc'))) FROM DUAL;
HEX(UTL_RAW.OVERLAY(UTL_RAW.CAST_TO_RAW('xxx'), UTL_RAW.CAST_TO_RAW('abc')))
787878
SELECT HEX(UTL_RAW.OVERLAY(UTL_RAW.CAST_TO_RAW('xxx'), UTL_RAW.CAST_TO_RAW('abc'), 4)) FROM DUAL;
HEX(UTL_RAW.OVERLAY(UTL_RAW.CAST_TO_RAW('xxx'), UTL_RAW.CAST_TO_RAW('abc'), 4))
616263787878
SELECT HEX(UTL_RAW.OVERLAY(UTL_RAW.CAST_TO_RAW('x'), UTL_RAW.CAST_TO_RAW('abc'), 4, 3)) FROM DUAL;
HEX(UTL_RAW.OVERLAY(UTL_RAW.CAST_TO_RAW('x'), UTL_RAW.CAST_TO_RAW('abc'), 4, 3))
616263780000
SELECT HEX(UTL_RAW.OVERLAY(UTL_RAW.CAST_TO_RAW('xxx'), UTL_RAW.CAST_TO_RAW('abc'), 4, 7, UTL_RAW.CAST_TO_RAW('qwe'))) FROM DUAL;
HEX(UTL_RAW.OVERLAY(UTL_RAW.CAST_TO_RAW('xxx'), UTL_RAW.CAST_TO_RAW('abc'), 4, 7, UTL_RAW.CAST_TO_RAW('qwe')))
61626378787871717171
SELECT HEX(UTL_RAW.OVERLAY(UTL_RAW.CAST_TO_RAW('xxx'), UTL_RAW.CAST_TO_RAW('abc'), 2, 3, UTL_RAW.CAST_TO_RAW('qwe'))) FROM DUAL;
HEX(UTL_RAW.OVERLAY(UTL_RAW.CAST_TO_RAW('xxx'), UTL_RAW.CAST_TO_RAW('abc'), 2, 3, UTL_RAW.CAST_TO_RAW('qwe')))
61787878
SELECT HEX(UTL_RAW.OVERLAY(UTL_RAW.CAST_TO_RAW('xxx'), UTL_RAW.CAST_TO_RAW('abc'), 5, 3, UTL_RAW.CAST_TO_RAW('qwe'))) FROM DUAL;
HEX(UTL_RAW.OVERLAY(UTL_RAW.CAST_TO_RAW('xxx'), UTL_RAW.CAST_TO_RAW('abc'), 5, 3, UTL_RAW.CAST_TO_RAW('qwe')))
61626371787878
SELECT HEX(UTL_RAW.OVERLAY(UTL_RAW.CAST_TO_RAW('xxx'), UTL_RAW.CAST_TO_RAW('abc'), 7, 3, UTL_RAW.CAST_TO_RAW('qwe'))) FROM DUAL;
HEX(UTL_RAW.OVERLAY(UTL_RAW.CAST_TO_RAW('xxx'), UTL_RAW.CAST_TO_RAW('abc'), 7, 3, UTL_RAW.CAST_TO_RAW('qwe')))
616263717171787878
SELECT HEX(UTL_RAW.OVERLAY(UTL_RAW.CAST_TO_RAW('xxx'), UTL_RAW.CAST_TO_RAW('abc'), 7, 3, UTL_RAW.CAST_TO_RAW(''))) FROM DUAL;
HEX(UTL_RAW.OVERLAY(UTL_RAW.CAST_TO_RAW('xxx'), UTL_RAW.CAST_TO_RAW('abc'), 7, 3, UTL_RAW.CAST_TO_RAW('')))
616263000000787878
SELECT HEX(UTL_RAW.OVERLAY(UTL_RAW.CAST_TO_RAW('xxx'), UTL_RAW.CAST_TO_RAW('abc'), 7, 3, UTL_RAW.CAST_TO_RAW(NULL))) FROM DUAL;
HEX(UTL_RAW.OVERLAY(UTL_RAW.CAST_TO_RAW('xxx'), UTL_RAW.CAST_TO_RAW('abc'), 7, 3, UTL_RAW.CAST_TO_RAW(NULL)))
616263000000787878
SELECT HEX(UTL_RAW.OVERLAY(UTL_RAW.CAST_TO_RAW('xxx'), UTL_RAW.CAST_TO_RAW('abc'), 4, 0, UTL_RAW.CAST_TO_RAW('qwe'))) FROM DUAL;
HEX(UTL_RAW.OVERLAY(UTL_RAW.CAST_TO_RAW('xxx'), UTL_RAW.CAST_TO_RAW('abc'), 4, 0, UTL_RAW.CAST_TO_RAW('qwe')))
616263
SELECT HEX(UTL_RAW.OVERLAY(UTL_RAW.CAST_TO_RAW('xxx'), UTL_RAW.CAST_TO_RAW('abc'), 4, 1, UTL_RAW.CAST_TO_RAW('qwe'))) FROM DUAL;
HEX(UTL_RAW.OVERLAY(UTL_RAW.CAST_TO_RAW('xxx'), UTL_RAW.CAST_TO_RAW('abc'), 4, 1, UTL_RAW.CAST_TO_RAW('qwe')))
61626378
SELECT HEX(UTL_RAW.OVERLAY(UTL_RAW.CAST_TO_RAW('xxx'), UTL_RAW.CAST_TO_RAW('abc'), 4, 4, UTL_RAW.CAST_TO_RAW('qwe'))) FROM DUAL;
HEX(UTL_RAW.OVERLAY(UTL_RAW.CAST_TO_RAW('xxx'), UTL_RAW.CAST_TO_RAW('abc'), 4, 4, UTL_RAW.CAST_TO_RAW('qwe')))
61626378787871
SELECT HEX(UTL_RAW.OVERLAY(UTL_RAW.CAST_TO_RAW('xxx'), UTL_RAW.CAST_TO_RAW('abc'), 4, 7, UTL_RAW.CAST_TO_RAW('qwe'))) FROM DUAL;
HEX(UTL_RAW.OVERLAY(UTL_RAW.CAST_TO_RAW('xxx'), UTL_RAW.CAST_TO_RAW('abc'), 4, 7, UTL_RAW.CAST_TO_RAW('qwe')))
61626378787871717171
SELECT HEX(UTL_RAW.OVERLAY(UTL_RAW.CAST_TO_RAW('xxx'), UTL_RAW.CAST_TO_RAW('abc'), 4, 7, UTL_RAW.CAST_TO_RAW(''))) FROM DUAL;
HEX(UTL_RAW.OVERLAY(UTL_RAW.CAST_TO_RAW('xxx'), UTL_RAW.CAST_TO_RAW('abc'), 4, 7, UTL_RAW.CAST_TO_RAW('')))
61626378787800000000
SELECT HEX(UTL_RAW.OVERLAY(UTL_RAW.CAST_TO_RAW('xxx'), UTL_RAW.CAST_TO_RAW('abc'), 4, 7, UTL_RAW.CAST_TO_RAW(NULL))) FROM DUAL;
HEX(UTL_RAW.OVERLAY(UTL_RAW.CAST_TO_RAW('xxx'), UTL_RAW.CAST_TO_RAW('abc'), 4, 7, UTL_RAW.CAST_TO_RAW(NULL)))
61626378787800000000
#
# UTL_RAW.REVERSE
#
SELECT UTL_RAW.REVERSE('') FROM DUAL;
ERROR HY000: PL/SQL: numeric or value error
SELECT UTL_RAW.REVERSE(NULL) FROM DUAL;
ERROR HY000: PL/SQL: numeric or value error
SELECT HEX(UTL_RAW.REVERSE(UTL_RAW.CAST_TO_RAW('a'))) FROM DUAL;
HEX(UTL_RAW.REVERSE(UTL_RAW.CAST_TO_RAW('a')))
61
SELECT HEX(UTL_RAW.REVERSE(UTL_RAW.CAST_TO_RAW('ab'))) FROM DUAL;
HEX(UTL_RAW.REVERSE(UTL_RAW.CAST_TO_RAW('ab')))
6261
SELECT HEX(UTL_RAW.CAST_TO_RAW('你好')), HEX(UTL_RAW.REVERSE(UTL_RAW.CAST_TO_RAW('你好'))) FROM DUAL;
HEX(UTL_RAW.CAST_TO_RAW('你好'))	HEX(UTL_RAW.REVERSE(UTL_RAW.CAST_TO_RAW('你好')))
E4BDA0E5A5BD	BDA5E5A0BDE4
#
# UTL_RAW.SUBSTR
#
SELECT UTL_RAW.SUBSTR(NULL, 1) FROM DUAL;
ERROR HY000: PL/SQL: numeric or value error
SELECT UTL_RAW.SUBSTR('', 1) FROM DUAL;
ERROR HY000: PL/SQL: numeric or value error
SELECT UTL_RAW.SUBSTR(UTL_RAW.CAST_TO_RAW('abc'), -4) FROM DUAL;
ERROR HY000: PL/SQL: numeric or value error
SELECT UTL_RAW.SUBSTR(UTL_RAW.CAST_TO_RAW('abc'), 1, 0) FROM DUAL;
ERROR HY000: PL/SQL: numeric or value error
SELECT UTL_RAW.SUBSTR(UTL_RAW.CAST_TO_RAW('abc'), 2, 3) FROM DUAL;
ERROR HY000: PL/SQL: numeric or value error
SELECT HEX(UTL_RAW.SUBSTR(UTL_RAW.CAST_TO_RAW('abc'), 0)) FROM DUAL;
HEX(UTL_RAW.SUBSTR(UTL_RAW.CAST_TO_RAW('abc'), 0))
616263
SELECT HEX(UTL_RAW.SUBSTR(UTL_RAW.CAST_TO_RAW('abc'), 1)) FROM DUAL;
HEX(UTL_RAW.SUBSTR(UTL_RAW.CAST_TO_RAW('abc'), 1))
616263
SELECT HEX(UTL_RAW.SUBSTR(UTL_RAW.CAST_TO_RAW('abc'), -1)) FROM DUAL;
HEX(UTL_RAW.SUBSTR(UTL_RAW.CAST_TO_RAW('abc'), -1))
63
SELECT HEX(UTL_RAW.SUBSTR(UTL_RAW.CAST_TO_RAW('abc'), 1, 1)) FROM DUAL;
HEX(UTL_RAW.SUBSTR(UTL_RAW.CAST_TO_RAW('abc'), 1, 1))
61
SELECT HEX(UTL_RAW.SUBSTR(UTL_RAW.CAST_TO_RAW('abc'), 1, 2)) FROM DUAL;
HEX(UTL_RAW.SUBSTR(UTL_RAW.CAST_TO_RAW('abc'), 1, 2))
6162
SELECT HEX(UTL_RAW.SUBSTR(UTL_RAW.CAST_TO_RAW('abc'), 1, 3)) FROM DUAL;
HEX(UTL_RAW.SUBSTR(UTL_RAW.CAST_TO_RAW('abc'), 1, 3))
616263
SELECT HEX(UTL_RAW.SUBSTR(UTL_RAW.CAST_TO_RAW('abc'), -2, 2)) FROM DUAL;
HEX(UTL_RAW.SUBSTR(UTL_RAW.CAST_TO_RAW('abc'), -2, 2))
6263
SELECT HEX(UTL_RAW.SUBSTR(UTL_RAW.CAST_TO_RAW('abc'), -1, 1)) FROM DUAL;
HEX(UTL_RAW.SUBSTR(UTL_RAW.CAST_TO_RAW('abc'), -1, 1))
63
#
# UTL_RAW.TRANSLATE
#
SELECT UTL_RAW.TRANSLATE('', UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('xyz')) FROM DUAL;
ERROR HY000: PL/SQL: numeric or value error
SELECT UTL_RAW.TRANSLATE(NULL, UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('xyz')) FROM DUAL;
ERROR HY000: PL/SQL: numeric or value error
SELECT UTL_RAW.TRANSLATE(UTL_RAW.CAST_TO_RAW('abc'), '', UTL_RAW.CAST_TO_RAW('xyz')) FROM DUAL;
ERROR HY000: PL/SQL: numeric or value error
SELECT UTL_RAW.TRANSLATE(UTL_RAW.CAST_TO_RAW('abc'), NULL, UTL_RAW.CAST_TO_RAW('xyz')) FROM DUAL;
ERROR HY000: PL/SQL: numeric or value error
SELECT UTL_RAW.TRANSLATE(UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('abc'), '') FROM DUAL;
ERROR HY000: PL/SQL: numeric or value error
SELECT UTL_RAW.TRANSLATE(UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('abc'), NULL) FROM DUAL;
ERROR HY000: PL/SQL: numeric or value error
SELECT HEX(UTL_RAW.TRANSLATE(UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('xyz'))) FROM DUAL;
HEX(UTL_RAW.TRANSLATE(UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('xyz')))
78797A
SELECT HEX(UTL_RAW.TRANSLATE(UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('qqq'), UTL_RAW.CAST_TO_RAW('xyz'))) FROM DUAL;
HEX(UTL_RAW.TRANSLATE(UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('qqq'), UTL_RAW.CAST_TO_RAW('xyz')))
616263
SELECT HEX(UTL_RAW.TRANSLATE(UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('qaq'), UTL_RAW.CAST_TO_RAW('xyz'))) FROM DUAL;
HEX(UTL_RAW.TRANSLATE(UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('qaq'), UTL_RAW.CAST_TO_RAW('xyz')))
796263
SELECT HEX(UTL_RAW.TRANSLATE(UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('ccc'), UTL_RAW.CAST_TO_RAW('xyz'))) FROM DUAL;
HEX(UTL_RAW.TRANSLATE(UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('ccc'), UTL_RAW.CAST_TO_RAW('xyz')))
616278
SELECT HEX(UTL_RAW.TRANSLATE(UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('ccb'), UTL_RAW.CAST_TO_RAW('xyz'))) FROM DUAL;
HEX(UTL_RAW.TRANSLATE(UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('ccb'), UTL_RAW.CAST_TO_RAW('xyz')))
617A78
SELECT HEX(UTL_RAW.TRANSLATE(UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('qqqb'), UTL_RAW.CAST_TO_RAW('xyz'))) FROM DUAL;
HEX(UTL_RAW.TRANSLATE(UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('qqqb'), UTL_RAW.CAST_TO_RAW('xyz')))
6163
SELECT HEX(UTL_RAW.TRANSLATE(UTL_RAW.CAST_TO_RAW('abcd'), UTL_RAW.CAST_TO_RAW('qqqb'), UTL_RAW.CAST_TO_RAW('xyz'))) FROM DUAL;
HEX(UTL_RAW.TRANSLATE(UTL_RAW.CAST_TO_RAW('abcd'), UTL_RAW.CAST_TO_RAW('qqqb'), UTL_RAW.CAST_TO_RAW('xyz')))
616364
SELECT HEX(UTL_RAW.TRANSLATE(UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('qqqb'), UTL_RAW.CAST_TO_RAW('xyz?'))) FROM DUAL;
HEX(UTL_RAW.TRANSLATE(UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('qqqb'), UTL_RAW.CAST_TO_RAW('xyz?')))
613F63
SELECT HEX(UTL_RAW.TRANSLATE(UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('wxyz'))) FROM DUAL;
HEX(UTL_RAW.TRANSLATE(UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('wxyz')))
777879
SELECT HEX(UTL_RAW.TRANSLATE(UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('wec'), UTL_RAW.CAST_TO_RAW('wxyz'))) FROM DUAL;
HEX(UTL_RAW.TRANSLATE(UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('wec'), UTL_RAW.CAST_TO_RAW('wxyz')))
616279
SELECT HEX(UTL_RAW.TRANSLATE(UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('xby'), UTL_RAW.CAST_TO_RAW('xyz'))) FROM DUAL;
HEX(UTL_RAW.TRANSLATE(UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('xby'), UTL_RAW.CAST_TO_RAW('xyz')))
617963
#
# UTL_RAW.TRANSLITERATE
#
SELECT HEX(UTL_RAW.TRANSLITERATE(UTL_RAW.CAST_TO_RAW('abc'))) FROM DUAL;
ERROR HY000: Parameter 'to_set' is invalid for missing.
SELECT HEX(UTL_RAW.TRANSLITERATE(UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('xyz'))) FROM DUAL;
ERROR HY000: Parameter 'from_set' is invalid for missing.
SELECT HEX(UTL_RAW.TRANSLITERATE(UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('xyz'), UTL_RAW.CAST_TO_RAW('abc'))) FROM DUAL;
ERROR HY000: Parameter 'pad' is invalid for missing.
SELECT HEX(UTL_RAW.TRANSLITERATE('',                        UTL_RAW.CAST_TO_RAW('xyz'), UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('pod'))) FROM DUAL;
ERROR HY000: PL/SQL: numeric or value error
SELECT HEX(UTL_RAW.TRANSLITERATE(UTL_RAW.CAST_TO_RAW(''),   UTL_RAW.CAST_TO_RAW('xyz'), UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('pod'))) FROM DUAL;
ERROR HY000: PL/SQL: numeric or value error
SELECT HEX(UTL_RAW.TRANSLITERATE(NULL,                      UTL_RAW.CAST_TO_RAW('xyz'), UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('pod'))) FROM DUAL;
ERROR HY000: PL/SQL: numeric or value error
SELECT HEX(UTL_RAW.TRANSLITERATE(UTL_RAW.CAST_TO_RAW(NULL), UTL_RAW.CAST_TO_RAW('xyz'), UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('pod'))) FROM DUAL;
ERROR HY000: PL/SQL: numeric or value error
SELECT HEX(UTL_RAW.TRANSLITERATE(UTL_RAW.CAST_TO_RAW('abc'), '',                                UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('pod'))) FROM DUAL;
ERROR HY000: PL/SQL: numeric or value error
SELECT HEX(UTL_RAW.TRANSLITERATE(UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW(''),           UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('pod'))) FROM DUAL;
ERROR HY000: PL/SQL: numeric or value error
SELECT HEX(UTL_RAW.TRANSLITERATE(UTL_RAW.CAST_TO_RAW('abc'), NULL,                              UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('pod'))) FROM DUAL;
ERROR HY000: PL/SQL: numeric or value error
SELECT HEX(UTL_RAW.TRANSLITERATE(UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW(NULL),         UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('pod'))) FROM DUAL;
ERROR HY000: PL/SQL: numeric or value error
SELECT HEX(UTL_RAW.TRANSLITERATE(UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('xyz'), '',                        UTL_RAW.CAST_TO_RAW('pod'))) FROM DUAL;
ERROR HY000: PL/SQL: numeric or value error
SELECT HEX(UTL_RAW.TRANSLITERATE(UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('xyz'), UTL_RAW.CAST_TO_RAW(''),   UTL_RAW.CAST_TO_RAW('pod'))) FROM DUAL;
ERROR HY000: PL/SQL: numeric or value error
SELECT HEX(UTL_RAW.TRANSLITERATE(UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('xyz'), NULL,                      UTL_RAW.CAST_TO_RAW('pod'))) FROM DUAL;
ERROR HY000: PL/SQL: numeric or value error
SELECT HEX(UTL_RAW.TRANSLITERATE(UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('xyz'), UTL_RAW.CAST_TO_RAW(NULL), UTL_RAW.CAST_TO_RAW('pod'))) FROM DUAL;
ERROR HY000: PL/SQL: numeric or value error
SELECT HEX(UTL_RAW.TRANSLITERATE(UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('xyz'), UTL_RAW.CAST_TO_RAW('abc'), '')) FROM DUAL;
ERROR HY000: PL/SQL: numeric or value error
SELECT HEX(UTL_RAW.TRANSLITERATE(UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('xyz'), UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW(''))) FROM DUAL;
ERROR HY000: PL/SQL: numeric or value error
SELECT HEX(UTL_RAW.TRANSLITERATE(UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('xyz'), UTL_RAW.CAST_TO_RAW('abc'), NULL)) FROM DUAL;
ERROR HY000: PL/SQL: numeric or value error
SELECT HEX(UTL_RAW.TRANSLITERATE(UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('xyz'), UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW(NULL))) FROM DUAL;
ERROR HY000: PL/SQL: numeric or value error
SELECT HEX(UTL_RAW.TRANSLITERATE(UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('xyz'), UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('p'))) FROM DUAL;
HEX(UTL_RAW.TRANSLITERATE(UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('xyz'), UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('p')))
78797A
SELECT HEX(UTL_RAW.TRANSLITERATE(UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('xyz'), UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('pod'))) FROM DUAL;
HEX(UTL_RAW.TRANSLITERATE(UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('xyz'), UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('pod')))
78797A
SELECT HEX(UTL_RAW.TRANSLITERATE(UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('xyz'), UTL_RAW.CAST_TO_RAW('uvwabc'), UTL_RAW.CAST_TO_RAW('pod'))) FROM DUAL;
HEX(UTL_RAW.TRANSLITERATE(UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('xyz'), UTL_RAW.CAST_TO_RAW('uvwabc'), UTL_RAW.CAST_TO_RAW('pod')))
707070
SELECT HEX(UTL_RAW.TRANSLITERATE(UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('xyz'), UTL_RAW.CAST_TO_RAW('qqqb'), UTL_RAW.CAST_TO_RAW('pod'))) FROM DUAL;
HEX(UTL_RAW.TRANSLITERATE(UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('xyz'), UTL_RAW.CAST_TO_RAW('qqqb'), UTL_RAW.CAST_TO_RAW('pod')))
617063
SELECT HEX(UTL_RAW.TRANSLITERATE(UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('xyz'), UTL_RAW.CAST_TO_RAW('xby'), UTL_RAW.CAST_TO_RAW('pod'))) FROM DUAL;
HEX(UTL_RAW.TRANSLITERATE(UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('xyz'), UTL_RAW.CAST_TO_RAW('xby'), UTL_RAW.CAST_TO_RAW('pod')))
617963
SELECT HEX(UTL_RAW.TRANSLITERATE(UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('xyz'), UTL_RAW.CAST_TO_RAW('xyz'), UTL_RAW.CAST_TO_RAW('pod'))) FROM DUAL;
HEX(UTL_RAW.TRANSLITERATE(UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('xyz'), UTL_RAW.CAST_TO_RAW('xyz'), UTL_RAW.CAST_TO_RAW('pod')))
616263
SELECT HEX(UTL_RAW.TRANSLITERATE(UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('x'), UTL_RAW.CAST_TO_RAW('xyz'), UTL_RAW.CAST_TO_RAW('pod'))) FROM DUAL;
HEX(UTL_RAW.TRANSLITERATE(UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('x'), UTL_RAW.CAST_TO_RAW('xyz'), UTL_RAW.CAST_TO_RAW('pod')))
616263
SELECT HEX(UTL_RAW.TRANSLITERATE('616263', '78797a', '78627a', '70')) FROM DUAL;
HEX(UTL_RAW.TRANSLITERATE('616263', '78797a', '78627a', '70'))
617963
SELECT HEX(UTL_RAW.TRANSLITERATE('616263', '7879', '78627a', '7071')) FROM DUAL;
HEX(UTL_RAW.TRANSLITERATE('616263', '7879', '78627a', '7071'))
617963
SELECT HEX(UTL_RAW.TRANSLITERATE('616263', '78797a', '78627a', '7071')) FROM DUAL;
HEX(UTL_RAW.TRANSLITERATE('616263', '78797a', '78627a', '7071'))
617963
SELECT HEX(UTL_RAW.TRANSLITERATE('616263', '78797a', '7862', '7071')) FROM DUAL;
HEX(UTL_RAW.TRANSLITERATE('616263', '78797a', '7862', '7071'))
617963
#
# UTL_RAW.XRANGE
#
SELECT HEX(UTL_RAW.XRANGE()) FROM DUAL;
HEX(UTL_RAW.XRANGE())
000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF
SELECT HEX(UTL_RAW.XRANGE(UTL_RAW.CAST_TO_RAW(''), UTL_RAW.CAST_TO_RAW('a'))) FROM DUAL;
HEX(UTL_RAW.XRANGE(UTL_RAW.CAST_TO_RAW(''), UTL_RAW.CAST_TO_RAW('a')))
000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F6061
SELECT HEX(UTL_RAW.XRANGE(UTL_RAW.CAST_TO_RAW(NULL), UTL_RAW.CAST_TO_RAW('a'))) FROM DUAL;
HEX(UTL_RAW.XRANGE(UTL_RAW.CAST_TO_RAW(NULL), UTL_RAW.CAST_TO_RAW('a')))
000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F6061
SELECT HEX(UTL_RAW.XRANGE(UTL_RAW.CAST_TO_RAW('a'), UTL_RAW.CAST_TO_RAW(''))) FROM DUAL;
HEX(UTL_RAW.XRANGE(UTL_RAW.CAST_TO_RAW('a'), UTL_RAW.CAST_TO_RAW('')))
6162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF
SELECT HEX(UTL_RAW.XRANGE(UTL_RAW.CAST_TO_RAW('a'), UTL_RAW.CAST_TO_RAW(NULL))) FROM DUAL;
HEX(UTL_RAW.XRANGE(UTL_RAW.CAST_TO_RAW('a'), UTL_RAW.CAST_TO_RAW(NULL)))
6162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF
SELECT HEX(UTL_RAW.XRANGE(UTL_RAW.CAST_TO_RAW(''), UTL_RAW.CAST_TO_RAW(''))) FROM DUAL;
HEX(UTL_RAW.XRANGE(UTL_RAW.CAST_TO_RAW(''), UTL_RAW.CAST_TO_RAW('')))
000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF
SELECT HEX(UTL_RAW.XRANGE(UTL_RAW.CAST_TO_RAW(NULL), UTL_RAW.CAST_TO_RAW(NULL))) FROM DUAL;
HEX(UTL_RAW.XRANGE(UTL_RAW.CAST_TO_RAW(NULL), UTL_RAW.CAST_TO_RAW(NULL)))
000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF
SELECT HEX(UTL_RAW.XRANGE(UTL_RAW.CAST_TO_RAW('a'), UTL_RAW.CAST_TO_RAW('b'))) FROM DUAL;
HEX(UTL_RAW.XRANGE(UTL_RAW.CAST_TO_RAW('a'), UTL_RAW.CAST_TO_RAW('b')))
6162
SELECT HEX(UTL_RAW.XRANGE(UTL_RAW.CAST_TO_RAW('a'), UTL_RAW.CAST_TO_RAW('a'))) FROM DUAL;
HEX(UTL_RAW.XRANGE(UTL_RAW.CAST_TO_RAW('a'), UTL_RAW.CAST_TO_RAW('a')))
61
SELECT HEX(UTL_RAW.XRANGE(UTL_RAW.CAST_TO_RAW('b'), UTL_RAW.CAST_TO_RAW('a'))) FROM DUAL;
HEX(UTL_RAW.XRANGE(UTL_RAW.CAST_TO_RAW('b'), UTL_RAW.CAST_TO_RAW('a')))
62636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F6061
SELECT HEX(UTL_RAW.XRANGE(UTL_RAW.CAST_TO_RAW('cd'), UTL_RAW.CAST_TO_RAW('ab'))) FROM DUAL;
HEX(UTL_RAW.XRANGE(UTL_RAW.CAST_TO_RAW('cd'), UTL_RAW.CAST_TO_RAW('ab')))
636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F6061
SELECT HEX(UTL_RAW.XRANGE(UTL_RAW.CAST_TO_RAW('cd'), UTL_RAW.CAST_TO_RAW('a'))) FROM DUAL;
HEX(UTL_RAW.XRANGE(UTL_RAW.CAST_TO_RAW('cd'), UTL_RAW.CAST_TO_RAW('a')))
636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F6061
SELECT HEX(UTL_RAW.XRANGE(UTL_RAW.CAST_TO_RAW('c'), UTL_RAW.CAST_TO_RAW('ab'))) FROM DUAL;
HEX(UTL_RAW.XRANGE(UTL_RAW.CAST_TO_RAW('c'), UTL_RAW.CAST_TO_RAW('ab')))
636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F6061
drop table t1;
drop table t2;
drop table tvarchar2;
drop table treal;
drop table tint;
drop table tnumber;
#
# PROCEDURE
#
BEGIN
SELECT HEX(UTL_RAW.CAST_TO_RAW('a')) FROM DUAL;
SELECT HEX(UTL_RAW.CAST_TO_VARCHAR2(UTL_RAW.CAST_TO_RAW('a'))) FROM DUAL;
SELECT HEX(UTL_RAW.CAST_TO_NVARCHAR2(UTL_RAW.CAST_TO_RAW('a'))) FROM DUAL;
SELECT HEX(UTL_RAW.BIT_AND(UTL_RAW.CAST_TO_RAW('a'), UTL_RAW.CAST_TO_RAW('b'))) FROM DUAL;
SELECT HEX(UTL_RAW.BIT_COMPLEMENT(UTL_RAW.CAST_TO_RAW('a'))) FROM DUAL;
SELECT HEX(UTL_RAW.BIT_OR(UTL_RAW.CAST_TO_RAW('a'), UTL_RAW.CAST_TO_RAW('b'))) FROM DUAL;
SELECT HEX(UTL_RAW.BIT_XOR(UTL_RAW.CAST_TO_RAW('a'), UTL_RAW.CAST_TO_RAW('b'))) FROM DUAL;
SELECT HEX(UTL_RAW.CAST_FROM_BINARY_DOUBLE(3.14, 1)) FROM DUAL;
SELECT HEX(UTL_RAW.CAST_TO_BINARY_DOUBLE(UTL_RAW.CAST_FROM_BINARY_DOUBLE(3.14))) FROM DUAL;
SELECT HEX(UTL_RAW.CAST_FROM_BINARY_FLOAT(3.14)) FROM DUAL;
SELECT HEX(UTL_RAW.CAST_TO_BINARY_FLOAT(UTL_RAW.CAST_FROM_BINARY_FLOAT(3.14))) FROM DUAL;
SELECT HEX(UTL_RAW.CAST_FROM_BINARY_INTEGER(3)) FROM DUAL;
SELECT HEX(UTL_RAW.CAST_TO_BINARY_INTEGER(UTL_RAW.CAST_FROM_BINARY_INTEGER(3))) FROM DUAL;
SELECT HEX(UTL_RAW.COMPARE(UTL_RAW.CAST_TO_RAW('a'), UTL_RAW.CAST_TO_RAW('ab'), UTL_RAW.CAST_TO_RAW('b'))) FROM DUAL;
SELECT HEX(UTL_RAW.CONCAT(UTL_RAW.CAST_TO_RAW('a'), UTL_RAW.CAST_TO_RAW('b'), UTL_RAW.CAST_TO_RAW('c'), UTL_RAW.CAST_TO_RAW('d'), UTL_RAW.CAST_TO_RAW('e'), UTL_RAW.CAST_TO_RAW('f')
, UTL_RAW.CAST_TO_RAW('ff'), UTL_RAW.CAST_TO_RAW('ee'), UTL_RAW.CAST_TO_RAW('dd'), UTL_RAW.CAST_TO_RAW('cc'), UTL_RAW.CAST_TO_RAW('bb'), UTL_RAW.CAST_TO_RAW('aa'))) FROM DUAL;
SELECT HEX(UTL_RAW.CONVERT(UTL_RAW.CAST_TO_RAW('你好'), 'GBK', 'UTF8MB4')) FROM DUAL;
SELECT HEX(UTL_RAW.COPIES(UTL_RAW.CAST_TO_RAW('a'), 2)) FROM DUAL;
SELECT HEX(UTL_RAW.LENGTH(UTL_RAW.CAST_TO_RAW('ab'))) FROM DUAL;
SELECT HEX(UTL_RAW.OVERLAY(UTL_RAW.CAST_TO_RAW('xxx'), UTL_RAW.CAST_TO_RAW('abc'), 2, 3, UTL_RAW.CAST_TO_RAW('qwe'))) FROM DUAL;
SELECT HEX(UTL_RAW.REVERSE(UTL_RAW.CAST_TO_RAW('ab'))) FROM DUAL;
SELECT HEX(UTL_RAW.SUBSTR(UTL_RAW.CAST_TO_RAW('abc'), 1, 2)) FROM DUAL;
SELECT HEX(UTL_RAW.TRANSLATE(UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('xyz'))) FROM DUAL;
SELECT HEX(UTL_RAW.TRANSLITERATE(UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('xyz'), UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('0'))) FROM DUAL;
SELECT HEX(UTL_RAW.XRANGE(UTL_RAW.CAST_TO_RAW('b'), UTL_RAW.CAST_TO_RAW('a'))) FROM DUAL;
END;//
HEX(UTL_RAW.CAST_TO_RAW('a'))
61
HEX(UTL_RAW.CAST_TO_VARCHAR2(UTL_RAW.CAST_TO_RAW('a')))
61
HEX(UTL_RAW.CAST_TO_NVARCHAR2(UTL_RAW.CAST_TO_RAW('a')))
61
HEX(UTL_RAW.BIT_AND(UTL_RAW.CAST_TO_RAW('a'), UTL_RAW.CAST_TO_RAW('b')))
60
HEX(UTL_RAW.BIT_COMPLEMENT(UTL_RAW.CAST_TO_RAW('a')))
9E
HEX(UTL_RAW.BIT_OR(UTL_RAW.CAST_TO_RAW('a'), UTL_RAW.CAST_TO_RAW('b')))
63
HEX(UTL_RAW.BIT_XOR(UTL_RAW.CAST_TO_RAW('a'), UTL_RAW.CAST_TO_RAW('b')))
03
HEX(UTL_RAW.CAST_FROM_BINARY_DOUBLE(3.14, 1))
40091EB851EB851F
HEX(UTL_RAW.CAST_TO_BINARY_DOUBLE(UTL_RAW.CAST_FROM_BINARY_DOUBLE(3.14)))
3
HEX(UTL_RAW.CAST_FROM_BINARY_FLOAT(3.14))
4048F5C3
HEX(UTL_RAW.CAST_TO_BINARY_FLOAT(UTL_RAW.CAST_FROM_BINARY_FLOAT(3.14)))
3
HEX(UTL_RAW.CAST_FROM_BINARY_INTEGER(3))
00000003
HEX(UTL_RAW.CAST_TO_BINARY_INTEGER(UTL_RAW.CAST_FROM_BINARY_INTEGER(3)))
3
HEX(UTL_RAW.COMPARE(UTL_RAW.CAST_TO_RAW('a'), UTL_RAW.CAST_TO_RAW('ab'), UTL_RAW.CAST_TO_RAW('b')))
0
HEX(UTL_RAW.CONCAT(UTL_RAW.CAST_TO_RAW('a'), UTL_RAW.CAST_TO_RAW('b'), UTL_RAW.CAST_TO_RAW('c'), UTL_RAW.CAST_TO_RAW('d'), UTL_RAW.CAST_TO_RAW('e'), UTL_RAW.CAST_TO_RAW('f')
, UTL_RAW.CAST_TO_RAW('ff'), UTL_RAW.CAST_TO_RAW('ee'), UTL_RAW.CAST_TO_RAW('dd')
616263646566666665656464636362626161
HEX(UTL_RAW.CONVERT(UTL_RAW.CAST_TO_RAW('你好'), 'GBK', 'UTF8MB4'))
C4E3BAC3
HEX(UTL_RAW.COPIES(UTL_RAW.CAST_TO_RAW('a'), 2))
6161
HEX(UTL_RAW.LENGTH(UTL_RAW.CAST_TO_RAW('ab')))
2
HEX(UTL_RAW.OVERLAY(UTL_RAW.CAST_TO_RAW('xxx'), UTL_RAW.CAST_TO_RAW('abc'), 2, 3, UTL_RAW.CAST_TO_RAW('qwe')))
61787878
HEX(UTL_RAW.REVERSE(UTL_RAW.CAST_TO_RAW('ab')))
6261
HEX(UTL_RAW.SUBSTR(UTL_RAW.CAST_TO_RAW('abc'), 1, 2))
6162
HEX(UTL_RAW.TRANSLATE(UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('xyz')))
78797A
HEX(UTL_RAW.TRANSLITERATE(UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('xyz'), UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('0')))
78797A
HEX(UTL_RAW.XRANGE(UTL_RAW.CAST_TO_RAW('b'), UTL_RAW.CAST_TO_RAW('a')))
62636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F6061
CREATE OR REPLACE PROCEDURE p_test() AS
BEGIN
SELECT HEX(UTL_RAW.CAST_TO_RAW('a')) FROM DUAL;
SELECT HEX(UTL_RAW.CAST_TO_VARCHAR2(UTL_RAW.CAST_TO_RAW('a'))) FROM DUAL;
SELECT HEX(UTL_RAW.CAST_TO_NVARCHAR2(UTL_RAW.CAST_TO_RAW('a'))) FROM DUAL;
SELECT HEX(UTL_RAW.BIT_AND(UTL_RAW.CAST_TO_RAW('a'), UTL_RAW.CAST_TO_RAW('b'))) FROM DUAL;
SELECT HEX(UTL_RAW.BIT_COMPLEMENT(UTL_RAW.CAST_TO_RAW('a'))) FROM DUAL;
SELECT HEX(UTL_RAW.BIT_OR(UTL_RAW.CAST_TO_RAW('a'), UTL_RAW.CAST_TO_RAW('b'))) FROM DUAL;
SELECT HEX(UTL_RAW.BIT_XOR(UTL_RAW.CAST_TO_RAW('a'), UTL_RAW.CAST_TO_RAW('b'))) FROM DUAL;
SELECT HEX(UTL_RAW.CAST_FROM_BINARY_DOUBLE(3.14, 1)) FROM DUAL;
SELECT HEX(UTL_RAW.CAST_TO_BINARY_DOUBLE(UTL_RAW.CAST_FROM_BINARY_DOUBLE(3.14))) FROM DUAL;
SELECT HEX(UTL_RAW.CAST_FROM_BINARY_FLOAT(3.14)) FROM DUAL;
SELECT HEX(UTL_RAW.CAST_TO_BINARY_FLOAT(UTL_RAW.CAST_FROM_BINARY_FLOAT(3.14))) FROM DUAL;
SELECT HEX(UTL_RAW.CAST_FROM_BINARY_INTEGER(3)) FROM DUAL;
SELECT HEX(UTL_RAW.CAST_TO_BINARY_INTEGER(UTL_RAW.CAST_FROM_BINARY_INTEGER(3))) FROM DUAL;
SELECT HEX(UTL_RAW.COMPARE(UTL_RAW.CAST_TO_RAW('a'), UTL_RAW.CAST_TO_RAW('ab'), UTL_RAW.CAST_TO_RAW('b'))) FROM DUAL;
SELECT HEX(UTL_RAW.CONCAT(UTL_RAW.CAST_TO_RAW('a'), UTL_RAW.CAST_TO_RAW('b'), UTL_RAW.CAST_TO_RAW('c'), UTL_RAW.CAST_TO_RAW('d'), UTL_RAW.CAST_TO_RAW('e'), UTL_RAW.CAST_TO_RAW('f')
, UTL_RAW.CAST_TO_RAW('ff'), UTL_RAW.CAST_TO_RAW('ee'), UTL_RAW.CAST_TO_RAW('dd'), UTL_RAW.CAST_TO_RAW('cc'), UTL_RAW.CAST_TO_RAW('bb'), UTL_RAW.CAST_TO_RAW('aa'))) FROM DUAL;
SELECT HEX(UTL_RAW.CONVERT(UTL_RAW.CAST_TO_RAW('你好'), 'GBK', 'UTF8MB4')) FROM DUAL;
SELECT HEX(UTL_RAW.COPIES(UTL_RAW.CAST_TO_RAW('a'), 2)) FROM DUAL;
SELECT HEX(UTL_RAW.LENGTH(UTL_RAW.CAST_TO_RAW('ab'))) FROM DUAL;
SELECT HEX(UTL_RAW.OVERLAY(UTL_RAW.CAST_TO_RAW('xxx'), UTL_RAW.CAST_TO_RAW('abc'), 2, 3, UTL_RAW.CAST_TO_RAW('qwe'))) FROM DUAL;
SELECT HEX(UTL_RAW.REVERSE(UTL_RAW.CAST_TO_RAW('ab'))) FROM DUAL;
SELECT HEX(UTL_RAW.SUBSTR(UTL_RAW.CAST_TO_RAW('abc'), 1, 2)) FROM DUAL;
SELECT HEX(UTL_RAW.TRANSLATE(UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('xyz'))) FROM DUAL;
SELECT HEX(UTL_RAW.TRANSLITERATE(UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('xyz'), UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('0'))) FROM DUAL;
SELECT HEX(UTL_RAW.XRANGE(UTL_RAW.CAST_TO_RAW('b'), UTL_RAW.CAST_TO_RAW('a'))) FROM DUAL;
END//
CALL p_test//
HEX(UTL_RAW.CAST_TO_RAW('a'))
61
HEX(UTL_RAW.CAST_TO_VARCHAR2(UTL_RAW.CAST_TO_RAW('a')))
61
HEX(UTL_RAW.CAST_TO_NVARCHAR2(UTL_RAW.CAST_TO_RAW('a')))
61
HEX(UTL_RAW.BIT_AND(UTL_RAW.CAST_TO_RAW('a'), UTL_RAW.CAST_TO_RAW('b')))
60
HEX(UTL_RAW.BIT_COMPLEMENT(UTL_RAW.CAST_TO_RAW('a')))
9E
HEX(UTL_RAW.BIT_OR(UTL_RAW.CAST_TO_RAW('a'), UTL_RAW.CAST_TO_RAW('b')))
63
HEX(UTL_RAW.BIT_XOR(UTL_RAW.CAST_TO_RAW('a'), UTL_RAW.CAST_TO_RAW('b')))
03
HEX(UTL_RAW.CAST_FROM_BINARY_DOUBLE(3.14, 1))
40091EB851EB851F
HEX(UTL_RAW.CAST_TO_BINARY_DOUBLE(UTL_RAW.CAST_FROM_BINARY_DOUBLE(3.14)))
3
HEX(UTL_RAW.CAST_FROM_BINARY_FLOAT(3.14))
4048F5C3
HEX(UTL_RAW.CAST_TO_BINARY_FLOAT(UTL_RAW.CAST_FROM_BINARY_FLOAT(3.14)))
3
HEX(UTL_RAW.CAST_FROM_BINARY_INTEGER(3))
00000003
HEX(UTL_RAW.CAST_TO_BINARY_INTEGER(UTL_RAW.CAST_FROM_BINARY_INTEGER(3)))
3
HEX(UTL_RAW.COMPARE(UTL_RAW.CAST_TO_RAW('a'), UTL_RAW.CAST_TO_RAW('ab'), UTL_RAW.CAST_TO_RAW('b')))
0
HEX(UTL_RAW.CONCAT(UTL_RAW.CAST_TO_RAW('a'), UTL_RAW.CAST_TO_RAW('b'), UTL_RAW.CAST_TO_RAW('c'), UTL_RAW.CAST_TO_RAW('d'), UTL_RAW.CAST_TO_RAW('e'), UTL_RAW.CAST_TO_RAW('f')
, UTL_RAW.CAST_TO_RAW('ff'), UTL_RAW.CAST_TO_RAW('ee'), UTL_RAW.CAST_TO_RAW('dd')
616263646566666665656464636362626161
HEX(UTL_RAW.CONVERT(UTL_RAW.CAST_TO_RAW('你好'), 'GBK', 'UTF8MB4'))
C4E3BAC3
HEX(UTL_RAW.COPIES(UTL_RAW.CAST_TO_RAW('a'), 2))
6161
HEX(UTL_RAW.LENGTH(UTL_RAW.CAST_TO_RAW('ab')))
2
HEX(UTL_RAW.OVERLAY(UTL_RAW.CAST_TO_RAW('xxx'), UTL_RAW.CAST_TO_RAW('abc'), 2, 3, UTL_RAW.CAST_TO_RAW('qwe')))
61787878
HEX(UTL_RAW.REVERSE(UTL_RAW.CAST_TO_RAW('ab')))
6261
HEX(UTL_RAW.SUBSTR(UTL_RAW.CAST_TO_RAW('abc'), 1, 2))
6162
HEX(UTL_RAW.TRANSLATE(UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('xyz')))
78797A
HEX(UTL_RAW.TRANSLITERATE(UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('xyz'), UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('0')))
78797A
HEX(UTL_RAW.XRANGE(UTL_RAW.CAST_TO_RAW('b'), UTL_RAW.CAST_TO_RAW('a')))
62636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F6061
Warnings:
Note	1585	This function 'BIT_AND' has the same name as a native function
Note	1585	This function 'BIT_OR' has the same name as a native function
Note	1585	This function 'BIT_XOR' has the same name as a native function
Warning	3720	NATIONAL/NCHAR/NVARCHAR implies the character set UTF8MB3, which will be replaced by UTF8MB4 in a future release. Please consider using CHAR(x) CHARACTER SET UTF8MB4 in order to be unambiguous.
Note	1585	This function 'CONCAT' has the same name as a native function
Note	1585	This function 'CONVERT' has the same name as a native function
Note	1585	This function 'LENGTH' has the same name as a native function
Note	1585	This function 'REVERSE' has the same name as a native function
Note	1585	This function 'SUBSTR' has the same name as a native function
Note	1585	This function 'TRANSLATE' has the same name as a native function
CALL p_test//
HEX(UTL_RAW.CAST_TO_RAW('a'))
61
HEX(UTL_RAW.CAST_TO_VARCHAR2(UTL_RAW.CAST_TO_RAW('a')))
61
HEX(UTL_RAW.CAST_TO_NVARCHAR2(UTL_RAW.CAST_TO_RAW('a')))
61
HEX(UTL_RAW.BIT_AND(UTL_RAW.CAST_TO_RAW('a'), UTL_RAW.CAST_TO_RAW('b')))
60
HEX(UTL_RAW.BIT_COMPLEMENT(UTL_RAW.CAST_TO_RAW('a')))
9E
HEX(UTL_RAW.BIT_OR(UTL_RAW.CAST_TO_RAW('a'), UTL_RAW.CAST_TO_RAW('b')))
63
HEX(UTL_RAW.BIT_XOR(UTL_RAW.CAST_TO_RAW('a'), UTL_RAW.CAST_TO_RAW('b')))
03
HEX(UTL_RAW.CAST_FROM_BINARY_DOUBLE(3.14, 1))
40091EB851EB851F
HEX(UTL_RAW.CAST_TO_BINARY_DOUBLE(UTL_RAW.CAST_FROM_BINARY_DOUBLE(3.14)))
3
HEX(UTL_RAW.CAST_FROM_BINARY_FLOAT(3.14))
4048F5C3
HEX(UTL_RAW.CAST_TO_BINARY_FLOAT(UTL_RAW.CAST_FROM_BINARY_FLOAT(3.14)))
3
HEX(UTL_RAW.CAST_FROM_BINARY_INTEGER(3))
00000003
HEX(UTL_RAW.CAST_TO_BINARY_INTEGER(UTL_RAW.CAST_FROM_BINARY_INTEGER(3)))
3
HEX(UTL_RAW.COMPARE(UTL_RAW.CAST_TO_RAW('a'), UTL_RAW.CAST_TO_RAW('ab'), UTL_RAW.CAST_TO_RAW('b')))
0
HEX(UTL_RAW.CONCAT(UTL_RAW.CAST_TO_RAW('a'), UTL_RAW.CAST_TO_RAW('b'), UTL_RAW.CAST_TO_RAW('c'), UTL_RAW.CAST_TO_RAW('d'), UTL_RAW.CAST_TO_RAW('e'), UTL_RAW.CAST_TO_RAW('f')
, UTL_RAW.CAST_TO_RAW('ff'), UTL_RAW.CAST_TO_RAW('ee'), UTL_RAW.CAST_TO_RAW('dd')
616263646566666665656464636362626161
HEX(UTL_RAW.CONVERT(UTL_RAW.CAST_TO_RAW('你好'), 'GBK', 'UTF8MB4'))
C4E3BAC3
HEX(UTL_RAW.COPIES(UTL_RAW.CAST_TO_RAW('a'), 2))
6161
HEX(UTL_RAW.LENGTH(UTL_RAW.CAST_TO_RAW('ab')))
2
HEX(UTL_RAW.OVERLAY(UTL_RAW.CAST_TO_RAW('xxx'), UTL_RAW.CAST_TO_RAW('abc'), 2, 3, UTL_RAW.CAST_TO_RAW('qwe')))
61787878
HEX(UTL_RAW.REVERSE(UTL_RAW.CAST_TO_RAW('ab')))
6261
HEX(UTL_RAW.SUBSTR(UTL_RAW.CAST_TO_RAW('abc'), 1, 2))
6162
HEX(UTL_RAW.TRANSLATE(UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('xyz')))
78797A
HEX(UTL_RAW.TRANSLITERATE(UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('xyz'), UTL_RAW.CAST_TO_RAW('abc'), UTL_RAW.CAST_TO_RAW('0')))
78797A
HEX(UTL_RAW.XRANGE(UTL_RAW.CAST_TO_RAW('b'), UTL_RAW.CAST_TO_RAW('a')))
62636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F6061
DROP PROCEDURE p_test//
CREATE or replace PROCEDURE p1() AS
i  blob;
BEGIN
SELECT HEX(UTL_RAW.BIT_AND('F0','BA')) into i;
select i;
END//
Warnings:
Note	1585	This function 'BIT_AND' has the same name as a native function
Note	1585	This function 'BIT_OR' has the same name as a native function
Note	1585	This function 'BIT_XOR' has the same name as a native function
Warning	3720	NATIONAL/NCHAR/NVARCHAR implies the character set UTF8MB3, which will be replaced by UTF8MB4 in a future release. Please consider using CHAR(x) CHARACTER SET UTF8MB4 in order to be unambiguous.
Note	1585	This function 'CONCAT' has the same name as a native function
Note	1585	This function 'CONVERT' has the same name as a native function
Note	1585	This function 'LENGTH' has the same name as a native function
Note	1585	This function 'REVERSE' has the same name as a native function
Note	1585	This function 'SUBSTR' has the same name as a native function
Note	1585	This function 'TRANSLATE' has the same name as a native function
CALL p1//
i
B0
Warnings:
Note	1585	This function 'BIT_AND' has the same name as a native function
Note	1585	This function 'BIT_OR' has the same name as a native function
Note	1585	This function 'BIT_XOR' has the same name as a native function
Warning	3720	NATIONAL/NCHAR/NVARCHAR implies the character set UTF8MB3, which will be replaced by UTF8MB4 in a future release. Please consider using CHAR(x) CHARACTER SET UTF8MB4 in order to be unambiguous.
Note	1585	This function 'CONCAT' has the same name as a native function
Note	1585	This function 'CONVERT' has the same name as a native function
Note	1585	This function 'LENGTH' has the same name as a native function
Note	1585	This function 'REVERSE' has the same name as a native function
Note	1585	This function 'SUBSTR' has the same name as a native function
Note	1585	This function 'TRANSLATE' has the same name as a native function
CALL p1//
i
B0
DROP PROCEDURE p1//
create or replace procedure p1() as
i  blob;
begin
select hex(utl_raw.bit_and('f0','ba')) into i;
select i;
end//
Warnings:
Note	1585	This function 'BIT_AND' has the same name as a native function
Note	1585	This function 'BIT_OR' has the same name as a native function
Note	1585	This function 'BIT_XOR' has the same name as a native function
Warning	3720	NATIONAL/NCHAR/NVARCHAR implies the character set UTF8MB3, which will be replaced by UTF8MB4 in a future release. Please consider using CHAR(x) CHARACTER SET UTF8MB4 in order to be unambiguous.
Note	1585	This function 'CONCAT' has the same name as a native function
Note	1585	This function 'CONVERT' has the same name as a native function
Note	1585	This function 'LENGTH' has the same name as a native function
Note	1585	This function 'REVERSE' has the same name as a native function
Note	1585	This function 'SUBSTR' has the same name as a native function
Note	1585	This function 'TRANSLATE' has the same name as a native function
call p1//
i
B0
Warnings:
Note	1585	This function 'BIT_AND' has the same name as a native function
Note	1585	This function 'BIT_OR' has the same name as a native function
Note	1585	This function 'BIT_XOR' has the same name as a native function
Warning	3720	NATIONAL/NCHAR/NVARCHAR implies the character set UTF8MB3, which will be replaced by UTF8MB4 in a future release. Please consider using CHAR(x) CHARACTER SET UTF8MB4 in order to be unambiguous.
Note	1585	This function 'CONCAT' has the same name as a native function
Note	1585	This function 'CONVERT' has the same name as a native function
Note	1585	This function 'LENGTH' has the same name as a native function
Note	1585	This function 'REVERSE' has the same name as a native function
Note	1585	This function 'SUBSTR' has the same name as a native function
Note	1585	This function 'TRANSLATE' has the same name as a native function
call p1//
i
B0
drop procedure p1//
#
# TEST PARAM IS STRING WITH BINARY CHARACTER SET
#
create table tstrbinary(
id int,
b  varchar(1024) collate binary
);
insert into tstrbinary values(1, 'aaaabbbb'),(2, 'gggghhhh'),(3, '你好！');
SELECT id, HEX(UTL_RAW.BIT_AND(b, b)) FROM tstrbinary;
id	HEX(UTL_RAW.BIT_AND(b, b))
1	6161616162626262
2	6767676768686868
3	E4BDA0E5A5BDEFBC81
Warnings:
Note	1585	This function 'BIT_AND' has the same name as a native function
Note	1585	This function 'BIT_OR' has the same name as a native function
Note	1585	This function 'BIT_XOR' has the same name as a native function
Warning	3720	NATIONAL/NCHAR/NVARCHAR implies the character set UTF8MB3, which will be replaced by UTF8MB4 in a future release. Please consider using CHAR(x) CHARACTER SET UTF8MB4 in order to be unambiguous.
Warning	3720	NATIONAL/NCHAR/NVARCHAR implies the character set UTF8MB3, which will be replaced by UTF8MB4 in a future release. Please consider using CHAR(x) CHARACTER SET UTF8MB4 in order to be unambiguous.
Warning	3720	NATIONAL/NCHAR/NVARCHAR implies the character set UTF8MB3, which will be replaced by UTF8MB4 in a future release. Please consider using CHAR(x) CHARACTER SET UTF8MB4 in order to be unambiguous.
Note	1585	This function 'CONCAT' has the same name as a native function
Note	1585	This function 'CONVERT' has the same name as a native function
Note	1585	This function 'LENGTH' has the same name as a native function
Note	1585	This function 'REVERSE' has the same name as a native function
Note	1585	This function 'SUBSTR' has the same name as a native function
Note	1585	This function 'TRANSLATE' has the same name as a native function
Note	1585	This function 'BIT_AND' has the same name as a native function
Note	1585	This function 'BIT_OR' has the same name as a native function
Note	1585	This function 'BIT_XOR' has the same name as a native function
Warning	3720	NATIONAL/NCHAR/NVARCHAR implies the character set UTF8MB3, which will be replaced by UTF8MB4 in a future release. Please consider using CHAR(x) CHARACTER SET UTF8MB4 in order to be unambiguous.
Warning	3720	NATIONAL/NCHAR/NVARCHAR implies the character set UTF8MB3, which will be replaced by UTF8MB4 in a future release. Please consider using CHAR(x) CHARACTER SET UTF8MB4 in order to be unambiguous.
Warning	3720	NATIONAL/NCHAR/NVARCHAR implies the character set UTF8MB3, which will be replaced by UTF8MB4 in a future release. Please consider using CHAR(x) CHARACTER SET UTF8MB4 in order to be unambiguous.
Note	1585	This function 'CONCAT' has the same name as a native function
Note	1585	This function 'CONVERT' has the same name as a native function
Note	1585	This function 'LENGTH' has the same name as a native function
Note	1585	This function 'REVERSE' has the same name as a native function
Note	1585	This function 'SUBSTR' has the same name as a native function
Note	1585	This function 'TRANSLATE' has the same name as a native function
SELECT id, HEX(UTL_RAW.BIT_COMPLEMENT(b)) FROM tstrbinary;
id	HEX(UTL_RAW.BIT_COMPLEMENT(b))
1	9E9E9E9E9D9D9D9D
2	9898989897979797
3	1B425F1A5A4210437E
SELECT id, HEX(UTL_RAW.BIT_OR(b, b)) FROM tstrbinary;
id	HEX(UTL_RAW.BIT_OR(b, b))
1	6161616162626262
2	6767676768686868
3	E4BDA0E5A5BDEFBC81
SELECT id, HEX(UTL_RAW.BIT_XOR(b, b)) FROM tstrbinary;
id	HEX(UTL_RAW.BIT_XOR(b, b))
1	0000000000000000
2	0000000000000000
3	000000000000000000
SELECT id, UTL_RAW.CAST_TO_BINARY_DOUBLE(b) FROM tstrbinary;
id	UTL_RAW.CAST_TO_BINARY_DOUBLE(b)
1	1.2217638484107489e161
2	1.3034546221845597e190
3	-1.8759756350490687e177
SELECT id, UTL_RAW.CAST_TO_BINARY_FLOAT(b) FROM tstrbinary;
id	UTL_RAW.CAST_TO_BINARY_FLOAT(b)
1	2.59846e20
2	1.09277e24
3	-2.79842e22
SELECT id, UTL_RAW.CAST_TO_BINARY_INTEGER(SUBSTR(b, 1, 2)), UTL_RAW.CAST_TO_BINARY_INTEGER(SUBSTR(b, 1, 4)) FROM tstrbinary;
id	UTL_RAW.CAST_TO_BINARY_INTEGER(SUBSTR(b, 1, 2))	UTL_RAW.CAST_TO_BINARY_INTEGER(SUBSTR(b, 1, 4))
1	24929	1633771873
2	26471	1734829927
3	58557	-457334555
SELECT id, UTL_RAW.CAST_TO_VARCHAR2(b) FROM tstrbinary;
id	UTL_RAW.CAST_TO_VARCHAR2(b)
1	aaaabbbb
2	gggghhhh
3	你好！
SELECT id, UTL_RAW.CAST_TO_NVARCHAR2(b) FROM tstrbinary;
id	UTL_RAW.CAST_TO_NVARCHAR2(b)
1	aaaabbbb
2	gggghhhh
3	你好！
SELECT id, HEX(UTL_RAW.COMPARE(b, b, b)) FROM tstrbinary;
id	HEX(UTL_RAW.COMPARE(b, b, b))
1	0
2	0
3	0
SELECT id, HEX(UTL_RAW.CONCAT(b, b, b)) FROM tstrbinary;
id	HEX(UTL_RAW.CONCAT(b, b, b))
1	616161616262626261616161626262626161616162626262
2	676767676868686867676767686868686767676768686868
3	E4BDA0E5A5BDEFBC81E4BDA0E5A5BDEFBC81E4BDA0E5A5BDEFBC81
SELECT id, HEX(UTL_RAW.CONVERT(b, 'GBK', 'UTF8MB4')) FROM tstrbinary;
id	HEX(UTL_RAW.CONVERT(b, 'GBK', 'UTF8MB4'))
1	6161616162626262
2	6767676768686868
3	C4E3BAC3A3A1
SELECT id, HEX(UTL_RAW.COPIES(b, 2)) FROM tstrbinary;
id	HEX(UTL_RAW.COPIES(b, 2))
1	61616161626262626161616162626262
2	67676767686868686767676768686868
3	E4BDA0E5A5BDEFBC81E4BDA0E5A5BDEFBC81
SELECT id, UTL_RAW.LENGTH(b) FROM tstrbinary;
id	UTL_RAW.LENGTH(b)
1	8
2	8
3	9
SELECT id, HEX(UTL_RAW.OVERLAY(b, b, 1, 1, b)) FROM tstrbinary;
id	HEX(UTL_RAW.OVERLAY(b, b, 1, 1, b))
1	6161616162626262
2	6767676768686868
3	E4BDA0E5A5BDEFBC81
SELECT id, HEX(UTL_RAW.REVERSE(b)) FROM tstrbinary;
id	HEX(UTL_RAW.REVERSE(b))
1	6262626261616161
2	6868686867676767
3	81BCEFBDA5E5A0BDE4
SELECT id, HEX(UTL_RAW.SUBSTR(b, 1, 2)) FROM tstrbinary;
id	HEX(UTL_RAW.SUBSTR(b, 1, 2))
1	6161
2	6767
3	E4BD
SELECT id, HEX(UTL_RAW.TRANSLATE(b, b, b)) FROM tstrbinary;
id	HEX(UTL_RAW.TRANSLATE(b, b, b))
1	6161616162626262
2	6767676768686868
3	E4BDA0E5A5BDEFBC81
SELECT id, HEX(UTL_RAW.TRANSLITERATE(b, b, b, b)) FROM tstrbinary;
id	HEX(UTL_RAW.TRANSLITERATE(b, b, b, b))
1	6161616162626262
2	6767676768686868
3	E4BDA0E5A5BDEFBC81
SELECT id, HEX(UTL_RAW.XRANGE(b, b)) FROM tstrbinary;
id	HEX(UTL_RAW.XRANGE(b, b))
1	61
2	67
3	E4
drop table tstrbinary;
#
# TEST PARAM IS STRING WITH NON-BINARY CHARACTER SET
#
#
# UTL_RAW.BIT_AND
#
SELECT HEX(UTL_RAW.BIT_AND('a', 'b')) FROM DUAL;
HEX(UTL_RAW.BIT_AND('a', 'b'))
0A
SELECT HEX(UTL_RAW.BIT_AND('aabbccddeeff', 'aabbccddeeff')) FROM DUAL;
HEX(UTL_RAW.BIT_AND('aabbccddeeff', 'aabbccddeeff'))
AABBCCDDEEFF
SELECT HEX(UTL_RAW.BIT_AND('GG', 'aabbccddeeff')) FROM DUAL;
ERROR 22007: Illegal string 'GG' value found during parsing
SELECT HEX(UTL_RAW.BIT_AND('aabbccddeeff', 'GG')) FROM DUAL;
ERROR 22007: Illegal string 'GG' value found during parsing
SELECT HEX(UTL_RAW.BIT_AND(' ', 'aabbccddeeff')) FROM DUAL;
ERROR 22007: Illegal string ' ' value found during parsing
SELECT HEX(UTL_RAW.BIT_AND('aabbccddeeff', ' ')) FROM DUAL;
ERROR 22007: Illegal string ' ' value found during parsing
SELECT HEX(UTL_RAW.BIT_AND('🀀', 'aabbccddeeff')) FROM DUAL;
ERROR 22007: Illegal string 'ð' value found during parsing
SELECT HEX(UTL_RAW.BIT_AND('aabbccddeeff', '🀀')) FROM DUAL;
ERROR 22007: Illegal string 'ð' value found during parsing
#
# UTL_RAW.BIT_COMPLEMENT
#
SELECT HEX(UTL_RAW.BIT_COMPLEMENT('a')) FROM DUAL;
HEX(UTL_RAW.BIT_COMPLEMENT('a'))
F5
SELECT HEX(UTL_RAW.BIT_COMPLEMENT('aabbccddeeff')) FROM DUAL;
HEX(UTL_RAW.BIT_COMPLEMENT('aabbccddeeff'))
554433221100
SELECT HEX(UTL_RAW.BIT_COMPLEMENT('GG')) FROM DUAL;
ERROR 22007: Illegal string 'GG' value found during parsing
#
# UTL_RAW.BIT_OR
#
SELECT HEX(UTL_RAW.BIT_OR('a', 'b')) FROM DUAL;
HEX(UTL_RAW.BIT_OR('a', 'b'))
0B
SELECT HEX(UTL_RAW.BIT_OR('aabbccddeeff', 'aabbccddeeff')) FROM DUAL;
HEX(UTL_RAW.BIT_OR('aabbccddeeff', 'aabbccddeeff'))
AABBCCDDEEFF
SELECT HEX(UTL_RAW.BIT_OR('GG', 'aabbccddeeff')) FROM DUAL;
ERROR 22007: Illegal string 'GG' value found during parsing
SELECT HEX(UTL_RAW.BIT_OR('aabbccddeeff', 'GG')) FROM DUAL;
ERROR 22007: Illegal string 'GG' value found during parsing
#
# UTL_RAW.BIT_XOR
#
SELECT HEX(UTL_RAW.BIT_XOR('a', 'b')) FROM DUAL;
HEX(UTL_RAW.BIT_XOR('a', 'b'))
01
SELECT HEX(UTL_RAW.BIT_XOR('aabbccddeeff', 'aabbccddeeff')) FROM DUAL;
HEX(UTL_RAW.BIT_XOR('aabbccddeeff', 'aabbccddeeff'))
000000000000
SELECT HEX(UTL_RAW.BIT_XOR('GG', 'aabbccddeeff')) FROM DUAL;
ERROR 22007: Illegal string 'GG' value found during parsing
SELECT HEX(UTL_RAW.BIT_XOR('aabbccddeeff', 'GG')) FROM DUAL;
ERROR 22007: Illegal string 'GG' value found during parsing
#
# UTL_RAW.CAST_TO_BINARY_DOUBLE
#
SELECT UTL_RAW.CAST_TO_BINARY_DOUBLE('abcddcba') FROM DUAL;
ERROR HY000: PL/SQL: numeric or value error
SELECT UTL_RAW.CAST_TO_BINARY_DOUBLE('aabbccddddccbbaa') FROM DUAL;
UTL_RAW.CAST_TO_BINARY_DOUBLE('aabbccddddccbbaa')
-7.757653106946799e-103
SELECT UTL_RAW.CAST_TO_BINARY_DOUBLE('GGGGGGGGGGGGGGGG') FROM DUAL;
ERROR 22007: Illegal string 'GGGGGGGGGGGGGGGG' value found during parsing
#
# UTL_RAW.CAST_TO_BINARY_FLOAT
#
SELECT UTL_RAW.CAST_TO_BINARY_FLOAT('abcd') FROM DUAL;
ERROR HY000: PL/SQL: numeric or value error
SELECT UTL_RAW.CAST_TO_BINARY_FLOAT('aabbccdd') FROM DUAL;
UTL_RAW.CAST_TO_BINARY_FLOAT('aabbccdd')
-0.0000000000003336
SELECT UTL_RAW.CAST_TO_BINARY_FLOAT('GGGGGGGG') FROM DUAL;
ERROR 22007: Illegal string 'GGGGGGGG' value found during parsing
#
# UTL_RAW.CAST_TO_BINARY_INTEGER
#
SELECT UTL_RAW.CAST_TO_BINARY_INTEGER('aabb') FROM DUAL;
UTL_RAW.CAST_TO_BINARY_INTEGER('aabb')
43707
SELECT UTL_RAW.CAST_TO_BINARY_INTEGER('aabbccdd') FROM DUAL;
UTL_RAW.CAST_TO_BINARY_INTEGER('aabbccdd')
-1430532899
SELECT UTL_RAW.CAST_TO_BINARY_INTEGER('aabbccddee') FROM DUAL;
ERROR HY000: PL/SQL: numeric or value error
SELECT UTL_RAW.CAST_TO_BINARY_INTEGER('GGGGGGGG') FROM DUAL;
ERROR 22007: Illegal string 'GGGGGGGG' value found during parsing
#
# UTL_RAW.CAST_TO_VARCHAR2
#
SELECT HEX(UTL_RAW.CAST_TO_VARCHAR2('a')) FROM DUAL;
HEX(UTL_RAW.CAST_TO_VARCHAR2('a'))
0A
SELECT HEX(UTL_RAW.CAST_TO_VARCHAR2('aabbccdd')) FROM DUAL;
HEX(UTL_RAW.CAST_TO_VARCHAR2('aabbccdd'))
NULL
SELECT HEX(UTL_RAW.CAST_TO_VARCHAR2('GGGGGGGG')) FROM DUAL;
ERROR 22007: Illegal string 'GGGGGGGG' value found during parsing
#
# UTL_RAW.CAST_TO_NVARCHAR2
#
SELECT HEX(UTL_RAW.CAST_TO_NVARCHAR2('a')) FROM DUAL;
HEX(UTL_RAW.CAST_TO_NVARCHAR2('a'))
0A
SELECT HEX(UTL_RAW.CAST_TO_NVARCHAR2('aabbccdd')) FROM DUAL;
HEX(UTL_RAW.CAST_TO_NVARCHAR2('aabbccdd'))
NULL
SELECT HEX(UTL_RAW.CAST_TO_NVARCHAR2('GGGGGGGG')) FROM DUAL;
ERROR 22007: Illegal string 'GGGGGGGG' value found during parsing
#
# UTL_RAW.COMPARE
#
SELECT HEX(UTL_RAW.COMPARE('a', 'a', 'a')) FROM DUAL;
HEX(UTL_RAW.COMPARE('a', 'a', 'a'))
0
SELECT HEX(UTL_RAW.COMPARE('aabbccdd', 'aabbccdd', 'aabbccdd')) FROM DUAL;
HEX(UTL_RAW.COMPARE('aabbccdd', 'aabbccdd', 'aabbccdd'))
0
SELECT HEX(UTL_RAW.COMPARE('GGGGGGGG', 'GGGGGGGG', 'GGGGGGGG')) FROM DUAL;
ERROR 22007: Illegal string 'GGGGGGGG' value found during parsing
#
# UTL_RAW.CONCAT
#
SELECT HEX(UTL_RAW.CONCAT('a', 'a', 'a')) FROM DUAL;
HEX(UTL_RAW.CONCAT('a', 'a', 'a'))
0A0A0A
SELECT HEX(UTL_RAW.CONCAT('aabbccdd', 'aabbccdd', 'aabbccdd')) FROM DUAL;
HEX(UTL_RAW.CONCAT('aabbccdd', 'aabbccdd', 'aabbccdd'))
AABBCCDDAABBCCDDAABBCCDD
SELECT HEX(UTL_RAW.CONCAT('GGGGGGGG', 'GGGGGGGG', 'GGGGGGGG')) FROM DUAL;
ERROR 22007: Illegal string 'GGGGGGGG' value found during parsing
#
# UTL_RAW.CONVERT
#
SELECT HEX(UTL_RAW.CONVERT('a', 'GBK', 'UTF8MB4')) FROM DUAL;
HEX(UTL_RAW.CONVERT('a', 'GBK', 'UTF8MB4'))
0A
SELECT HEX(UTL_RAW.CONVERT('aabbccdd', 'GBK', 'UTF8MB4')) FROM DUAL;
HEX(UTL_RAW.CONVERT('aabbccdd', 'GBK', 'UTF8MB4'))
3F3F3F
SELECT HEX(UTL_RAW.CONVERT('GGGGGGGG', 'GBK', 'UTF8MB4')) FROM DUAL;
ERROR 22007: Illegal string 'GGGGGGGG' value found during parsing
#
# UTL_RAW.COPIES
#
SELECT HEX(UTL_RAW.COPIES('a', 2)) FROM DUAL;
HEX(UTL_RAW.COPIES('a', 2))
0A0A
SELECT HEX(UTL_RAW.COPIES('aabbccdd', '2')) FROM DUAL;
HEX(UTL_RAW.COPIES('aabbccdd', '2'))
AABBCCDDAABBCCDD
SELECT HEX(UTL_RAW.COPIES('GGGGGGGG', '2')) FROM DUAL;
ERROR 22007: Illegal string 'GGGGGGGG' value found during parsing
#
# UTL_RAW.LENGTH
#
SELECT HEX(UTL_RAW.LENGTH('a')) FROM DUAL;
HEX(UTL_RAW.LENGTH('a'))
1
SELECT HEX(UTL_RAW.LENGTH('aabbccdd')) FROM DUAL;
HEX(UTL_RAW.LENGTH('aabbccdd'))
4
SELECT HEX(UTL_RAW.LENGTH('GGGGGGGG')) FROM DUAL;
ERROR 22007: Illegal string 'GGGGGGGG' value found during parsing
#
# UTL_RAW.LENGTH
#
SELECT HEX(UTL_RAW.OVERLAY('a', 'a', 1, 1, 'a')) FROM DUAL;
HEX(UTL_RAW.OVERLAY('a', 'a', 1, 1, 'a'))
0A
SELECT HEX(UTL_RAW.OVERLAY('aabbccdd', 'aabbccdd', 1, 1, 'aabbccdd')) FROM DUAL;
HEX(UTL_RAW.OVERLAY('aabbccdd', 'aabbccdd', 1, 1, 'aabbccdd'))
AABBCCDD
SELECT HEX(UTL_RAW.OVERLAY('GGGGGGGG', 'GGGGGGGG', 1, 1, 'GGGGGGGG')) FROM DUAL;
ERROR 22007: Illegal string 'GGGGGGGG' value found during parsing
#
# UTL_RAW.REVERSE
#
SELECT HEX(UTL_RAW.REVERSE('a')) FROM DUAL;
HEX(UTL_RAW.REVERSE('a'))
0A
SELECT HEX(UTL_RAW.REVERSE('aabbccdd')) FROM DUAL;
HEX(UTL_RAW.REVERSE('aabbccdd'))
DDCCBBAA
SELECT HEX(UTL_RAW.REVERSE('GGGGGGGG')) FROM DUAL;
ERROR 22007: Illegal string 'GGGGGGGG' value found during parsing
#
# UTL_RAW.SUBSTR
#
SELECT HEX(UTL_RAW.SUBSTR('a', 1, 2)) FROM DUAL;
ERROR HY000: PL/SQL: numeric or value error
SELECT HEX(UTL_RAW.SUBSTR('aabbccdd', 1, 2)) FROM DUAL;
HEX(UTL_RAW.SUBSTR('aabbccdd', 1, 2))
AABB
SELECT HEX(UTL_RAW.SUBSTR('GGGGGGGG', 1, 2)) FROM DUAL;
ERROR 22007: Illegal string 'GGGGGGGG' value found during parsing
#
# UTL_RAW.TRANSLATE
#
SELECT HEX(UTL_RAW.TRANSLATE('a', 'a', 'a')) FROM DUAL;
HEX(UTL_RAW.TRANSLATE('a', 'a', 'a'))
0A
SELECT HEX(UTL_RAW.TRANSLATE('aabbccdd', 'aabbccdd', 'aabbccdd')) FROM DUAL;
HEX(UTL_RAW.TRANSLATE('aabbccdd', 'aabbccdd', 'aabbccdd'))
AABBCCDD
SELECT HEX(UTL_RAW.TRANSLATE('GGGGGGGG', 'GGGGGGGG', 'GGGGGGGG')) FROM DUAL;
ERROR 22007: Illegal string 'GGGGGGGG' value found during parsing
#
# UTL_RAW.TRANSLITERATE
#
SELECT HEX(UTL_RAW.TRANSLITERATE('a', 'a', 'a', 'a')) FROM DUAL;
HEX(UTL_RAW.TRANSLITERATE('a', 'a', 'a', 'a'))
0A
SELECT HEX(UTL_RAW.TRANSLITERATE('aabbccdd', 'aabbccdd', 'aabbccdd', 'aabbccdd')) FROM DUAL;
HEX(UTL_RAW.TRANSLITERATE('aabbccdd', 'aabbccdd', 'aabbccdd', 'aabbccdd'))
AABBCCDD
SELECT HEX(UTL_RAW.TRANSLITERATE('GGGGGGGG', 'GGGGGGGG', 'GGGGGGGG', 'GGGGGGGG')) FROM DUAL;
ERROR 22007: Illegal string 'GGGGGGGG' value found during parsing
#
# UTL_RAW.XRANGE
#
SELECT HEX(UTL_RAW.XRANGE('a', 'b')) FROM DUAL;
HEX(UTL_RAW.XRANGE('a', 'b'))
0A0B
SELECT HEX(UTL_RAW.XRANGE('aabbccdd', 'bbccddaa')) FROM DUAL;
HEX(UTL_RAW.XRANGE('aabbccdd', 'bbccddaa'))
AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABB
SELECT HEX(UTL_RAW.XRANGE('GGGGGGGG', 'GGGGGGGG')) FROM DUAL;
ERROR 22007: Illegal string 'GGGGGGGG' value found during parsing
#
# Other
#
create table tabl1 (id int, u1 varchar(64) binary);
Warnings:
Warning	1287	'BINARY as attribute of a type' is deprecated and will be removed in a future release. Please use a CHARACTER SET clause with _bin collation instead
insert into tabl1 values (1,NULL),(2,'a'),(3,'bb');
SELECT HEX(UTL_RAW.BIT_AND('FF',u1)) FROM tabl1;
HEX(UTL_RAW.BIT_AND('FF',u1))
NULL
0A
BB
SELECT HEX(UTL_RAW.BIT_AND('FF',u1)) FROM tabl1;
HEX(UTL_RAW.BIT_AND('FF',u1))
NULL
0A
BB
drop table tabl1;
create table tabl1 (id int, u1 varchar(64) charset binary);
insert into tabl1 values (1,NULL),(2,'a'),(3,'bb');
SELECT HEX(UTL_RAW.BIT_AND('FF',u1)) FROM tabl1;
HEX(UTL_RAW.BIT_AND('FF',u1))
NULL
61
6262
SELECT HEX(UTL_RAW.BIT_AND('FF',u1)) FROM tabl1;
HEX(UTL_RAW.BIT_AND('FF',u1))
NULL
61
6262
drop table tabl1;
SELECT UTL_RAW.BIT_AND(TO_NUMBER('2e+60','9.99EEEE'), 'aa') FROM DUAL;
ERROR 42000: Incorrect parameters in the call to stored function utl_raw.BIT_AND
SELECT UTL_RAW.BIT_AND('aa', TO_NUMBER('2e+60','9.99EEEE')) FROM DUAL;
ERROR 42000: Incorrect parameters in the call to stored function utl_raw.BIT_AND
SELECT HEX(UTL_RAW.TRANSLATE('0102030405', '0203', '06')) FROM DUAL;
HEX(UTL_RAW.TRANSLATE('0102030405', '0203', '06'))
01060405
SELECT HEX(UTL_RAW.TRANSLITERATE('010203040502', '0809', '01020304', '0a')) FROM DUAL;
HEX(UTL_RAW.TRANSLITERATE('010203040502', '0809', '01020304', '0a'))
08090A0A0509
DROP TABLE IF EXISTS t1;
Warnings:
Note	1051	Unknown table 'test.t1'
CREATE TABLE t1(id INT, c1 RAW) PARTITION BY HASH (id) PARTITIONS 8;
INSERT INTO t1 VALUES (1, NULL);
SELECT id , UTL_RAW.COPIES(HEX(c1), 3) AS result1 FROM t1 ;
ERROR HY000: PL/SQL: numeric or value error
SELECT id , UTL_RAW.OVERLAY(HEX(c1), UTL_RAW.CAST_TO_RAW('abc')) AS result1 FROM t1 ;
ERROR HY000: PL/SQL: numeric or value error
SELECT id , UTL_RAW.OVERLAY(UTL_RAW.CAST_TO_RAW('abc'), HEX(c1)) AS result1 FROM t1 ;
ERROR HY000: PL/SQL: numeric or value error
SELECT id , UTL_RAW.REVERSE(HEX(c1)) AS result1 FROM t1 ;
ERROR HY000: PL/SQL: numeric or value error
SELECT id , UTL_RAW.SUBSTR(HEX(c1), 3) AS result1 FROM t1 ;
ERROR HY000: PL/SQL: numeric or value error
SELECT id , UTL_RAW.TRANSLITERATE(c1, '010203', '010203', '00') AS result1 FROM t1 ;
ERROR HY000: PL/SQL: numeric or value error
SELECT id , UTL_RAW.TRANSLITERATE(HEX(c1), '010203', '010203', '00') AS result1 FROM t1 ;
ERROR HY000: PL/SQL: numeric or value error
DROP TABLE t1;
