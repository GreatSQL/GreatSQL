# Tests for mysql default sql_mode
SET SQL_MODE=default;
DROP TABLE IF EXISTS t1;
Warnings:
Note	1051	Unknown table 'test.t1'
DROP function IF EXISTS f1;
Warnings:
Note	1305	FUNCTION test.f1 does not exist
CREATE TABLE t1 (
int_field INTEGER UNSIGNED NOT NULL,
char_field CHAR(10),
INDEX(`int_field`)
);
insert into t1 values(1,'test1');
insert into t1 values(2,'test2');
insert into t1 values(3,'test3');
WITH FUNCTION f1() RETURNS INT
RETURN (SELECT COUNT(*) FROM t1);
select f1() from dual /
f1()
3
select f1() from dual /
ERROR 42000: FUNCTION test.f1 does not exist
with function f1() returns int
return (select * from (select 100) as r);
select f1() from dual/
f1()
100
select f1() from dual/
ERROR 42000: FUNCTION test.f1 does not exist
with function f1() returns int
begin
declare a, b int;
drop temporary table if exists t3;
create temporary table t3 (id int);
insert into t3 values (1), (2), (3);
set a:= (select count(*) from t3);
set b:= (select count(*) from t3 t3_alias);
return a + b;
end;
select f1() from dual/
f1()
6
select f1() from dual/
ERROR 42000: FUNCTION test.f1 does not exist
with function f1(C INT) RETURNS INT BEGIN RETURN C * 10; END;
select f1(1) from dual/
f1(1)
10
with function f1(C INT) RETURNS INT BEGIN RETURN C * 0; END;
select f1(1) from dual/
f1(1)
0
select f1(1) from dual/
ERROR 42000: FUNCTION test.f1 does not exist
with function f1(C INT) RETURNS INT BEGIN RETURN C * 10; END;
insert into t1 values(10,'test10');/
ERROR 42000: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'insert into t1 values(10,'test10')' at line 2
with function f1(C INT) RETURNS INT BEGIN RETURN C * 10; END;
update t1 set t1.char_field = 'testtest' where t1.int_field =1;/
ERROR 42000: This version of MySQL doesn't yet support 'with function support format :with function ....select .... '
with function f1(C INT) RETURNS INT BEGIN RETURN C * 10; END;
delete from t1 where t1.int_field =1;/
ERROR 42000: This version of MySQL doesn't yet support 'with function support format :with function ....select .... '
DROP TABLE t1;

# Tests for mysql sql_mode under oracle

SET SQL_MODE=oracle;
DROP function IF EXISTS f1;
Warnings:
Note	1305	FUNCTION test.f1 does not exist
select f1() from dual;
ERROR 42000: FUNCTION test.f1 does not exist
WITH FUNCTION f1() RETURN INT AS BEGIN RETURN 1; END;
select f1() from dual/
f1()
1
select f1() from dual/
ERROR 42000: FUNCTION test.f1 does not exist
WITH FUNCTION f1() RETURN INT IS BEGIN RETURN 1; END;
select f1() from dual/
f1()
1
select f1() from dual/
ERROR 42000: FUNCTION test.f1 does not exist
WITH FUNCTION f1 (p1 VARCHAR2(10)) RETURN VARCHAR(20)
AS
p2 VARCHAR(10);
BEGIN
SET p2:='new';
RETURN CONCAT(p1, p2);
END;
select f1('is test ') from dual/
f1('is test ')
is test new
select f1('is test ') from dual/
ERROR 42000: FUNCTION test.f1 does not exist
WITH FUNCTION f1 (p1 VARCHAR2(10)) RETURN VARCHAR(20)
AS
BEGIN
DECLARE
p2 VARCHAR(10);
BEGIN
SET p2:='new';
RETURN CONCAT(p1, p2);
END;
DECLARE
t1 VARCHAR(10);
t2 VARCHAR(10);
BEGIN
END;
END;
select f1('test is') from dual/
f1('test is')
test isnew
select f1('test is') from dual/
ERROR 42000: FUNCTION test.f1 does not exist
#
# Tests when udf function is exit, with function still excute and priority over udf function
#
SET SQL_MODE=default;
DROP function IF EXISTS f1;
Warnings:
Note	1305	FUNCTION test.f1 does not exist
create function f1(C INT) RETURNS INT BEGIN RETURN C * 10; END/
select f1(1) from dual/
f1(1)
10
with function f1(C INT) RETURNS INT BEGIN RETURN C * 0; END;
select f1(1) from dual/
f1(1)
0
select f1(1) from dual/
f1(1)
10
with function f1(C INT) RETURNS INT BEGIN RETURN C * 11; END;
select f1(1) from dual/
f1(1)
11
with function f1(C INT) RETURNS INT BEGIN RETURN C * 11; END;
select f1(1),f1(2) from dual/
f1(1)	f1(2)
11	22
select f1(1) from dual/
f1(1)
10
with function f2(C INT) RETURNS INT BEGIN RETURN C * 11; END;
select f2(1), f1(1) from dual/
f2(1)	f1(1)
11	10
with function f2(C INT) RETURNS INT BEGIN RETURN C * 11; END;
select f2(1), f(1) from dual/
ERROR 42000: FUNCTION test.f does not exist
select f1(1) from dual/
f1(1)
10
DROP function IF EXISTS f1;
#
# Tests when function is exit, with function still excute and priority lower function
#
SET SQL_MODE=oracle;
SELECT LENGTH ('bbbb') FROM dual;
LENGTH ('bbbb')
4
WITH FUNCTION LENGTH(C varchar2(50)) RETURN INT AS BEGIN RETURN 6; END;
SELECT LENGTH('bbbb') FROM DUAL/
LENGTH('bbbb')
4
Warnings:
Note	1585	This function 'LENGTH' has the same name as a native function
WITH FUNCTION LENGTH(C varchar2(50)) RETURN INT AS BEGIN RETURN 6; END;
SELECT length('bbbb') FROM DUAL/
length('bbbb')
4
Warnings:
Note	1585	This function 'LENGTH' has the same name as a native function
SELECT LENGTH('bbbb') FROM DUAL/
LENGTH('bbbb')
4
WITH FUNCTION LENGTH(C varchar2(50)) RETURN INT AS BEGIN RETURN 6; END;
SELECT LENGTH('bbbb'),INSTR('hello world', 'l') FROM DUAL/
LENGTH('bbbb')	INSTR('hello world', 'l')
4	3
Warnings:
Note	1585	This function 'LENGTH' has the same name as a native function
SELECT LENGTH('bbbb'),INSTR('hello world', 'l') FROM DUAL/
LENGTH('bbbb')	INSTR('hello world', 'l')
4	3
WITH FUNCTION LENGTHTMP(C varchar2(50)) RETURN INT AS BEGIN RETURN 8; END;
SELECT LENGTHTMP('bbbb') FROM DUAL/
LENGTHTMP('bbbb')
8
SELECT LENGTHTMP('bbbb') FROM DUAL/
ERROR 42000: FUNCTION test.LENGTHTMP does not exist
#
# Tests unsupport prepare Sql
#
SET SQL_MODE=default;
prepare stmt from "with function f1(C INT) RETURNS INT BEGIN RETURN C * 10; END; select f1(1) from dual;";
ERROR HY000: This command is not supported in the prepared statement protocol yet
prepare stmt from "with function f1(C INT) RETURNS INT BEGIN RETURN C * 10; END; select f1(1) from dual;";
ERROR HY000: This command is not supported in the prepared statement protocol yet
prepare stmt from "select length('test') from dual";
select length('test') from dual;
length('test')
4
#
# Tests other Sql
#
SET SQL_MODE=default;
drop procedure if exists p1;
Warnings:
Note	1305	PROCEDURE test.p1 does not exist
drop table if exists t1;
Warnings:
Note	1051	Unknown table 'test.t1'
create table t1 (a integer);
insert into t1 values(1);
insert into t1 values(2);
insert into t1 values(3);
with function f1(C INT) RETURNS INT BEGIN RETURN C * 10; END; select f1(10) from dual/
f1(10)
100
with function f1(C INT) RETURNS INT BEGIN RETURN C * 10; END; select f1(t1.a) from t1/
f1(t1.a)
10
20
30
with function f1(C INT) RETURNS INT BEGIN RETURN C * 10; END; select f1(t1.a),f1(10) from t1/
f1(t1.a)	f1(10)
10	100
20	100
30	100
explain with function f1(C INT) RETURNS INT BEGIN RETURN C * 10; END; select f1(t1.a) from t1/
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	NULL	ALL	NULL	NULL	NULL	NULL	3	100.00	NULL
Warnings:
Note	1003	/* select#1 */ select `f1`(`test`.`t1`.`a`) AS `f1(t1.a)` from `test`.`t1`
explain with function f1(C INT) RETURNS INT BEGIN RETURN C * 10; END; select f1(t1.a),f1(10) from t1/
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	NULL	ALL	NULL	NULL	NULL	NULL	3	100.00	NULL
Warnings:
Note	1003	/* select#1 */ select `f1`(`test`.`t1`.`a`) AS `f1(t1.a)`,`f1`(10) AS `f1(10)` from `test`.`t1`
drop table t1;
drop table if exists t2;
Warnings:
Note	1051	Unknown table 'test.t2'
drop function if exists f_agg;
Warnings:
Note	1305	FUNCTION test.f_agg does not exist
create table t2(id int,name varchar(20));
insert into t2 values(1,'test1');
insert into t2 values(2,'test2');
SET SQL_MODE=oracle;
with function f_agg(i_id int,i_name varchar(20)) return varchar(20)
is
begin
insert into t2 values(i_id,i_name);
return i_name;
end;
select f_agg(5,'test5') from dual/
f_agg(5,'test5')
test5
insert into t2 values(3,'test3');
insert into t2 values(4,'test4');
with function f_delete(i_id integer,i_name varchar(10)) return varchar(10)
is
begin 
delete from t2 where t2.id = i_id;
return i_name;
end;
select f_delete(1,'test1') from dual/
f_delete(1,'test1')
test1
drop table t2;
WITH FUNCTION f1(C INT) RETURN INT AS BEGIN RETURN C * 10; END;
SELECT F1(10) FROM DUAL/
F1(10)
100
#
# Tests unsupport SQL
#
SET SQL_MODE=oracle;
WITH FUNCTION LENGTHTMP(C varchar2(50)) RETURN INT AS BEGIN RETURN 8; END;
SELECT LENGTHTMP('bbbb') FROM DUAL/
LENGTHTMP('bbbb')
8
WITH FUNCTION f21(C1 INT) RETURN INT AS BEGIN RETURN C1; END;
SELECT f21(1) FROM dual WHERE 100 IN
(
WITH FUNCTION f22(C1 INT) RETURN INT AS BEGIN RETURN C1 + 2; END;
FUNCTION f23(C1 INT) RETURN INT AS BEGIN RETURN C1 - 2; END;
v21(C) AS (SELECT 50 FROM dual)
SELECT f22(C) +f23(C) FROM v21
)
/
ERROR 2F003: Can't create a FUNCTION from within another stored routine
select LENGTH('test') from dual/
LENGTH('test')
4
with function f2(C INT) RETURNS INT BEGIN RETURN C * 10; END; select f2(10) from dual union with function f3(C INT) RETURNS INT BEGIN RETURN C * 20; END;select f3(10) from dual/
ERROR 42000: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'RETURNS INT BEGIN RETURN C * 10; END; select f2(10) from dual union with functio' at line 1
select LENGTH('test') from dual/
LENGTH('test')
4
with FUNCTION f_del(p_id NUMBER) RETURN NUMBER deterministic IS
BEGIN
RETURN p_id+1;
END; drop with function f_del;/
ERROR 42000: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'drop with function f_del' at line 4
with FUNCTION f_del(p_id NUMBER) RETURN NUMBER deterministic IS
BEGIN
RETURN p_id+1;
END; drop with function f_del;/
ERROR 42000: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'drop with function f_del' at line 4
select LENGTH('test') from dual/
LENGTH('test')
4
WITH FUNCTION test.f_del(p_id NUMBER) RETURN NUMBER DETERMINISTIC IS BEGIN   RETURN p_id +1; END; SELECT id,test.f_del(p_id) FROM test1/
ERROR 42000: This version of MySQL doesn't yet support 'with function avoids the <db>.function format.'
select LENGTH('test') from dual/
LENGTH('test')
4
#
# Tests the same function name in nested SQL
#
SET SQL_MODE=oracle;
drop function IF EXISTS f_del;
Warnings:
Note	1305	FUNCTION test.f_del does not exist
drop function IF EXISTS f_del_out;
Warnings:
Note	1305	FUNCTION test.f_del_out does not exist
create  FUNCTION f_del(p_id int) RETURN int deterministic is  BEGIN RETURN p_id+100; END/
create  FUNCTION f_del_out(p_id int) RETURN int deterministic is
p_var int;
BEGIN
p_var :=f_del(p_id);
#p_var :=to_number(p_id);
set @p_del=p_var;
RETURN p_var;
END;/
select f_del_out(300),@p_del;/
f_del_out(300)	@p_del
400	400
with FUNCTION f_del(p_var int) RETURN int deterministic IS
name1 int;
BEGIN
select f_del_out(p_var) into name1 from dual;
RETURN name1 ;
END; select f_del(300),@p_del;/
f_del(300)	@p_del
400	400
with FUNCTION f_del_alias(p_var int) RETURN int deterministic IS
name1 int;
BEGIN
select f_del_out(p_var) into name1 from dual;
RETURN name1 ;
END; select f_del_alias(300),@p_del;/
f_del_alias(300)	@p_del
400	400
drop function IF EXISTS f_del;
drop function IF EXISTS f_del_out;
drop function IF EXISTS f_del1;
Warnings:
Note	1305	FUNCTION test.f_del1 does not exist
drop function IF EXISTS f_del2;
Warnings:
Note	1305	FUNCTION test.f_del2 does not exist
CREATE FUNCTION f_del(p_id int) RETURN INT DETERMINISTIC IS BEGIN RETURN p_id+100; END; /
CREATE FUNCTION f_del1(p_id int) RETURN INT DETERMINISTIC IS
p_var int;
BEGIN
p_var := f_del(p_id);
RETURN p_var;
END;
/
CREATE FUNCTION f_del2(p_var int) RETURN INT DETERMINISTIC IS
name2 int;
BEGIN
select f_del1(p_var) into name2 from dual;
RETURN name2 ;
END;
/
SELECT f_del2(300) from dual;
/
f_del2(300)
400
WITH FUNCTION f_del(p_var int) RETURN INT DETERMINISTIC IS
name1 int;
BEGIN
select f_del1(p_var) into name1 from dual;
RETURN name1 ;
END; SELECT f_del(300) from dual;
/
f_del(300)
400
drop function IF EXISTS f_del;
drop function IF EXISTS f_del1;
drop function IF EXISTS f_del2;
