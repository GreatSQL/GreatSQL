drop table if exists t1,t2,t3,t4;
create table t1(id serial primary key , col1 char(20) , col2 varchar(100));
create table t2(id serial primary key , col1 char(20) , col2 varchar(100));
create table t3(id serial primary key , col1 char(20) , col2 varchar(100));
create table t4(id serial primary key , col1 char(20) , col2 varchar(100));
insert into t1 select 0 , 'test_col1_0' , 'test1_col2_0' from dual;
insert into t1 select 0 , 'test_col1_1' , 'test1_col2_0' from dual;
insert into t1 select 0 , 'test_col1_2' , 'test1_col2_0' from dual;
insert all
into t2
into t3(id, col2, col1) values (id, col1, col2)
into t4 values( id+1, col2, col1)
select  id , col1, col2 from t1 ;
select * from t2;
id	col1	col2
1	test_col1_0	test1_col2_0
2	test_col1_1	test1_col2_0
3	test_col1_2	test1_col2_0
select * from t3;
id	col1	col2
1	test1_col2_0	test_col1_0
2	test1_col2_0	test_col1_1
3	test1_col2_0	test_col1_2
select * from t4;
id	col1	col2
2	test1_col2_0	test_col1_0
3	test1_col2_0	test_col1_1
4	test1_col2_0	test_col1_2
truncate table t2;
insert all
into t2
into t3(id, col1, col2)
select id , col1, col2 from t1 ;
ERROR 23000: Duplicate entry '1' for key 't3.PRIMARY'
truncate table t2;
truncate table t3;
truncate table t4;
insert all
into t2
into t3(id, col1, col2)
into t4  values( 0, 'test4col_1', col2)
select  id , col1, col2 from t1 ;
select * from t2;
id	col1	col2
1	test_col1_0	test1_col2_0
2	test_col1_1	test1_col2_0
3	test_col1_2	test1_col2_0
select * from t3;
id	col1	col2
1	test_col1_0	test1_col2_0
2	test_col1_1	test1_col2_0
3	test_col1_2	test1_col2_0
select * from t4;
id	col1	col2
1	test4col_1	test1_col2_0
2	test4col_1	test1_col2_0
3	test4col_1	test1_col2_0
truncate table t2;
truncate table t3;
truncate table t4;
insert all
into t2 values (0, 'test2_col1', 'test2_col2')
into t3 (id, col2, col1) values (0, 'test3_col2', 'test3_col1')
into t4 (col2,id) values ('test_col2' , 10)
select 1 from dual;
select * from t2;
id	col1	col2
1	test2_col1	test2_col2
select * from t3;
id	col1	col2
1	test3_col1	test3_col2
select * from t4;
id	col1	col2
10	NULL	test_col2
truncate table t2;
truncate table t3;
truncate table t4;
insert all
into t2(id, col1) values (0,'insert_value1')
into t2(id, col1) values (0,'insert_value2')
into t2(id, col1) values (0,'insert_value3')
select 1 from dual;
select last_insert_id();
last_insert_id()
0
select * from t2;
id	col1	col2
1	insert_value1	NULL
2	insert_value2	NULL
3	insert_value3	NULL
truncate table t2;
create table cj(id char(20), val_id int);
insert into cj values('t2', 0);
create trigger upd_t2 after update on t2 for each row
begin
update cj set val_id = new.id;
end|
create trigger i_t2 after insert on t2 for each row
begin
insert into t4 values(new.id, new.col1 , new.col2);
end|
create trigger del_t2 after delete on t2 for each row
begin
delete from t3  where id = old.id;
end|
truncate table t2;
insert all into t2 into t3 select * from t1;
select * from cj;
id	val_id
t2	0
select * from t4;
id	col1	col2
1	test_col1_0	test1_col2_0
2	test_col1_1	test1_col2_0
3	test_col1_2	test1_col2_0
select * from t2;
id	col1	col2
1	test_col1_0	test1_col2_0
2	test_col1_1	test1_col2_0
3	test_col1_2	test1_col2_0
delete from t2;
select * from t3;
id	col1	col2
drop trigger upd_t2;
drop trigger del_t2;
drop trigger i_t2;
drop table cj;
create table nokey(id int, col1 varchar(100));
insert all
into nokey(id, col1) values (1,'insert_value1')
into nokey(id, col1) values (1,'insert_value2')
into nokey(id, col1) values (1,'insert_value3')
select 1 from dual;
select * from nokey;
id	col1
1	insert_value1
1	insert_value2
1	insert_value3
drop table nokey;
SET @v0 = 0;
SET @v1 = 'test2';
prepare stmt from "insert all into t1(id, col1,col2) values (?, 'test1', ?) select 1 from dual";
EXECUTE stmt USING @v0, @v1;
DEALLOCATE prepare stmt;
select * from t1;
id	col1	col2
1	test_col1_0	test1_col2_0
2	test_col1_1	test1_col2_0
3	test_col1_2	test1_col2_0
4	test1	test2
truncate table t2;
prepare stmt FROM "INSERT all INTO  t2(col1, id, col2 ) values (col1, id,col2)
 SELECT  id,col1, col2 from t1
 LIMIT 1";
EXECUTE stmt;
EXECUTE stmt;
ERROR 23000: Duplicate entry '1' for key 't2.PRIMARY'
EXECUTE stmt;
ERROR 23000: Duplicate entry '1' for key 't2.PRIMARY'
DEALLOCATE prepare stmt;
truncate table t2;
INSERT all  INTO t1(id, col1, col1, col2, col2) VALUES (0, 'col1', 'col1', 2, 2) select 1 from dual;
ERROR 42000: Column 'col1' specified twice
insert all into t2  select 1 from dual;
ERROR 21S01: Column count doesn't match value count at row 1
insert all 
into t3(id, col2, col1) values (id, col1, col3)
into t4 values( id+1, col2, col1)
select  id , col1, col2 from t1 ;
ERROR 42S22: Unknown column 'col3' in 'field list'
create view  view1 as (select * from t2);
insert all into view1  into t3 select * from t1;
ERROR HY000: insert all not support view table
drop view view1;
CREATE TABLE auto_inc1 ( USID INTEGER UNSIGNED, ServerID TINYINT UNSIGNED, State ENUM ('unknown', 'Access-Granted', 'Session-Active', 'Session-Closed' ) NOT NULL DEFAULT 'unknown', SessionID CHAR(32), User CHAR(32) NOT NULL DEFAULT '<UNKNOWN>', NASAddr INTEGER UNSIGNED, NASPort INTEGER UNSIGNED, NASPortType INTEGER UNSIGNED, ConnectSpeed INTEGER UNSIGNED, CarrierType CHAR(32), CallingStationID CHAR(32), CalledStationID CHAR(32), AssignedAddr INTEGER UNSIGNED, SessionTime INTEGER UNSIGNED, PacketsIn INTEGER UNSIGNED, OctetsIn INTEGER UNSIGNED, PacketsOut INTEGER UNSIGNED, OctetsOut INTEGER UNSIGNED, TerminateCause INTEGER UNSIGNED, UnauthTime TINYINT UNSIGNED, AccessRequestTime DATETIME, AcctStartTime DATETIME, AcctLastTime DATETIME, LastModification TIMESTAMP NOT NULL);
CREATE TABLE auto_inc2 ( USID INTEGER UNSIGNED AUTO_INCREMENT, ServerID TINYINT UNSIGNED, State ENUM ('unknown', 'Access-Granted', 'Session-Active', 'Session-Closed' ) NOT NULL DEFAULT 'unknown', SessionID CHAR(32), User TEXT NOT NULL, NASAddr INTEGER UNSIGNED, NASPort INTEGER UNSIGNED, NASPortType INTEGER UNSIGNED, ConnectSpeed INTEGER UNSIGNED, CarrierType CHAR(32), CallingStationID CHAR(32), CalledStationID CHAR(32), AssignedAddr INTEGER UNSIGNED, SessionTime INTEGER UNSIGNED, PacketsIn INTEGER UNSIGNED, OctetsIn INTEGER UNSIGNED, PacketsOut INTEGER UNSIGNED, OctetsOut INTEGER UNSIGNED, TerminateCause INTEGER UNSIGNED, UnauthTime TINYINT UNSIGNED, AccessRequestTime DATETIME, AcctStartTime DATETIME, AcctLastTime DATETIME, LastModification TIMESTAMP NOT NULL, INDEX(USID,ServerID,NASAddr,SessionID), INDEX(AssignedAddr));
CREATE TABLE auto_inc3 ( USID INTEGER UNSIGNED AUTO_INCREMENT, ServerID TINYINT UNSIGNED, State ENUM ('unknown', 'Access-Granted', 'Session-Active', 'Session-Closed' ) NOT NULL DEFAULT 'unknown', SessionID CHAR(32), User TEXT NOT NULL, NASAddr INTEGER UNSIGNED, NASPort INTEGER UNSIGNED, NASPortType INTEGER UNSIGNED, ConnectSpeed INTEGER UNSIGNED, CarrierType CHAR(32), CallingStationID CHAR(32), CalledStationID CHAR(32), AssignedAddr INTEGER UNSIGNED, SessionTime INTEGER UNSIGNED, PacketsIn INTEGER UNSIGNED, OctetsIn INTEGER UNSIGNED, PacketsOut INTEGER UNSIGNED, OctetsOut INTEGER UNSIGNED, TerminateCause INTEGER UNSIGNED, UnauthTime TINYINT UNSIGNED, AccessRequestTime DATETIME, AcctStartTime DATETIME, AcctLastTime DATETIME, LastModification TIMESTAMP NOT NULL, INDEX(USID,ServerID,NASAddr,SessionID), INDEX(AssignedAddr));
INSERT INTO auto_inc1 VALUES (39,42,'Access-Granted','46','491721000045',2130706433,17690,NULL,NULL,'Localnet','491721000045','49172200000',754974766,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'2003-07-18 00:11:21',NULL,NULL,20030718001121);
INSERT all INTO auto_inc2 into auto_inc3 SELECT USID, ServerID, State, SessionID, User, NASAddr, NASPort, NASPortType, ConnectSpeed, CarrierType, CallingStationID, CalledStationID, AssignedAddr, SessionTime, PacketsIn, OctetsIn, PacketsOut, OctetsOut, TerminateCause, UnauthTime, AccessRequestTime, AcctStartTime, AcctLastTime, LastModification from auto_inc1 LIMIT 1;
select * from auto_inc2;
USID	ServerID	State	SessionID	User	NASAddr	NASPort	NASPortType	ConnectSpeed	CarrierType	CallingStationID	CalledStationID	AssignedAddr	SessionTime	PacketsIn	OctetsIn	PacketsOut	OctetsOut	TerminateCause	UnauthTime	AccessRequestTime	AcctStartTime	AcctLastTime	LastModification
39	42	Access-Granted	46	491721000045	2130706433	17690	NULL	NULL	Localnet	491721000045	49172200000	754974766	NULL	NULL	NULL	NULL	NULL	NULL	NULL	2003-07-18 00:11:21	NULL	NULL	2003-07-18 00:11:21
select * from auto_inc3;
USID	ServerID	State	SessionID	User	NASAddr	NASPort	NASPortType	ConnectSpeed	CarrierType	CallingStationID	CalledStationID	AssignedAddr	SessionTime	PacketsIn	OctetsIn	PacketsOut	OctetsOut	TerminateCause	UnauthTime	AccessRequestTime	AcctStartTime	AcctLastTime	LastModification
39	42	Access-Granted	46	491721000045	2130706433	17690	NULL	NULL	Localnet	491721000045	49172200000	754974766	NULL	NULL	NULL	NULL	NULL	NULL	NULL	2003-07-18 00:11:21	NULL	NULL	2003-07-18 00:11:21
drop table auto_inc1,auto_inc2,auto_inc3;
CREATE TABLE employees (
`id` int(11) NOT NULL AUTO_INCREMENT,
`fname` varchar(25) NOT NULL,
`lname` varchar(25) NOT NULL,
`store_id` int(11) NOT NULL,
`department_id` int(11) NOT NULL,
PRIMARY KEY (`id`)
)PARTITION BY RANGE (id) (
PARTITION p0 VALUES LESS THAN (5)  ,
PARTITION p1 VALUES LESS THAN (10)  ,
PARTITION p2 VALUES LESS THAN MAXVALUE );
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
INSERT all
INTO employees PARTITION (p0) VALUES  (3, 'Tim', 'Greene', 3, 1)
INTO employees PARTITION (p1,p2) values  (8, 'Linda', 'Mills', 2, 1)
select 1 from dual;
INSERT all
INTO employees PARTITION (p0) VALUES  (23, 'Tim', 'Greene', 3, 1)
INTO employees PARTITION (p1) values  (8, 'Linda', 'Mills', 2, 1)
select 1 from dual;
ERROR HY000: Found a row not matching the given partition set
explain 
INSERT all 
INTO employees PARTITION (p0) VALUES  (3, 'Tim', 'Greene', 3, 1)
INTO employees PARTITION (p1,p2) values (8, 'Linda', 'Mills', 2, 1)
select 1 from dual;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	INSERT	employees	p0	ALL	NULL	NULL	NULL	NULL	NULL	NULL	NULL
1	INSERT	employees	p1,p2	ALL	NULL	NULL	NULL	NULL	NULL	NULL	NULL
1	PRIMARY	<derived2>	NULL	system	NULL	NULL	NULL	NULL	1	100.00	NULL
2	DERIVED	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	No tables used
Warnings:
Note	1003	insert  all into `test`.`employees` PARTITION (`p0`) (`test`.`employees`.`id`,`test`.`employees`.`fname`,`test`.`employees`.`lname`,`test`.`employees`.`store_id`,`test`.`employees`.`department_id`) VALUES (3,'Tim','Greene',3,1) into `test`.`employees` PARTITION (`p1`,`p2`) (`test`.`employees`.`id`,`test`.`employees`.`fname`,`test`.`employees`.`lname`,`test`.`employees`.`store_id`,`test`.`employees`.`department_id`) VALUES (8,'Linda','Mills',2,1) 
drop table employees;
explain format=tree insert all
into t2 
into t3(id, col2, col1) values (id, col1, col2)
into t4 values( id+1, col2, col1)
select  id , col1, col2 from t1 ;
EXPLAIN
-> Table scan on t1  (cost=*** rows=***)

explain insert all into t2 into t3 into t4
select * from t1 ;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	INSERT	t2	NULL	ALL	NULL	NULL	NULL	NULL	NULL	NULL	NULL
1	INSERT	t3	NULL	ALL	NULL	NULL	NULL	NULL	NULL	NULL	NULL
1	INSERT	t4	NULL	ALL	NULL	NULL	NULL	NULL	NULL	NULL	NULL
1	SIMPLE	t1	NULL	ALL	NULL	NULL	NULL	NULL	4	100.00	NULL
Warnings:
Note	1003	insert  all into `test`.`t2` (`test`.`t2`.`id`,`test`.`t2`.`col1`,`test`.`t2`.`col2`) VALUES (`test`.`t1`.`id`,`test`.`t1`.`col1`,`test`.`t1`.`col2`) into `test`.`t3` (`test`.`t3`.`id`,`test`.`t3`.`col1`,`test`.`t3`.`col2`) VALUES (`test`.`t1`.`id`,`test`.`t1`.`col1`,`test`.`t1`.`col2`) into `test`.`t4` (`test`.`t4`.`id`,`test`.`t4`.`col1`,`test`.`t4`.`col2`) VALUES (`test`.`t1`.`id`,`test`.`t1`.`col1`,`test`.`t1`.`col2`) 
drop table t1,t2,t3,t4;
create table t_date(c1 int);
create table t_date2(c1 int);
set sql_mode='';
insert all into t_date(c1) values (id) into t_date2(c1) values (id) select 11111111111111111 as id from dual;
Warnings:
Warning	1264	Out of range value for column 't_date.c1' at row 1
Warning	1264	Out of range value for column 't_date2.c1' at row 1
drop table t_date,t_date2;
create table nokey(id int, col1 varchar(100));
insert into nokey values( 1, '123');
insert all into nokey select * from nokey ;
explain insert all into nokey select * from nokey;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	INSERT	nokey	NULL	ALL	NULL	NULL	NULL	NULL	NULL	NULL	NULL
1	SIMPLE	nokey	NULL	ALL	NULL	NULL	NULL	NULL	2	100.00	Using temporary
Warnings:
Note	1003	insert  all into `test`.`nokey` (`test`.`nokey`.`id`,`test`.`nokey`.`col1`) VALUES (`test`.`nokey`.`id`,`test`.`nokey`.`col1`) 
drop table nokey;
create table t1 (id int, c char(1));
set OPTIMIZER_TRACE="enabled=on";
insert all into t1 select 1 from dual;
ERROR 21S01: Column count doesn't match value count at row 1
SELECT * FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;
QUERY	TRACE	MISSING_BYTES_BEYOND_MAX_MEM_SIZE	INSUFFICIENT_PRIVILEGES
insert all into t1 select 1 from dual	{
  "steps": [
    {
      "join_preparation": {
        "select#": 1,
        "steps": [
          {
            "join_preparation": {
              "select#": 2,
              "steps": [
                {
                  "expanded_query": "/* select#2 */ select 1 AS `1`"
                }
              ]
            }
          },
          {
            "derived": {
              "table": "",
              "select#": 2,
              "materialized": true
            }
          },
          {
            "expanded_query": "insert  all into `t1` (`t1`.`id`,`t1`.`c`) VALUES (`1`) "
          }
        ]
      }
    }
  ]
}	0	0
drop table t1;
CREATE TABLE employees (
`id` int(11) NOT NULL AUTO_INCREMENT,
`fname` varchar(25) NOT NULL,
`lname` varchar(25) NOT NULL,
`store_id` int(11) NOT NULL,
`department_id` int(11) NOT NULL,
`cond_value` int NOT NULL,
PRIMARY KEY (`id`)
)PARTITION BY RANGE (id) (
PARTITION p0 VALUES LESS THAN (5)  ,
PARTITION p1 VALUES LESS THAN (10)  ,
PARTITION p2 VALUES LESS THAN MAXVALUE );
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
TRUNCATE employees;
INSERT ALL
WHEN 3>x THEN
INTO employees PARTITION (p0) VALUES (4, 'Gary', 'Kang', 4, 5, x)
INTO employees PARTITION (p2) VALUES (31, 'Tim1', 'Greene1', 31, 11, x)
WHEN 2>x THEN
INTO employees PARTITION (p0) VALUES (3,   'Tim',  'Greene',  3,  1, x)
ELSE
INTO employees PARTITION (p1,p2) VALUES (8, 'Linda', 'Mills', 2, 1, x)
INTO employees PARTITION (p1,p2) VALUES (48, 'Linda4', 'Mills4', 42, 41, x)
SELECT 4 x FROM dual;
SELECT * FROM employees;
id	fname	lname	store_id	department_id	cond_value
8	Linda	Mills	2	1	4
48	Linda4	Mills4	42	41	4
SELECT '2 rows expected';
2 rows expected
2 rows expected
TRUNCATE employees;
INSERT ALL
WHEN 3>x THEN
INTO employees PARTITION (p0) VALUES (4, 'Gary', 'Kang', 4, 5, x)
INTO employees PARTITION (p2) VALUES (31, 'Tim1', 'Greene1', 31, 11, x)
WHEN 2>x THEN
INTO employees PARTITION (p0) VALUES (3,   'Tim',  'Greene',  3,  1, x)
ELSE
INTO employees PARTITION (p1,p2) VALUES (8, 'Linda', 'Mills', 2, 1, x)
INTO employees PARTITION (p1,p2) VALUES (48, 'Linda4', 'Mills4', 42, 41, x)
SELECT 2 x FROM dual;
SELECT * FROM employees;
id	fname	lname	store_id	department_id	cond_value
4	Gary	Kang	4	5	2
8	Linda	Mills	2	1	2
31	Tim1	Greene1	31	11	2
48	Linda4	Mills4	42	41	2
SELECT '4 rows expected';
4 rows expected
4 rows expected
TRUNCATE employees;
INSERT ALL
WHEN 3>x THEN
INTO employees PARTITION (p0) VALUES (4, 'Gary', 'Kang', 4, 5, x)
INTO employees PARTITION (p2) VALUES (31, 'Tim1', 'Greene1', 31, 11, x)
WHEN 2>x THEN
INTO employees PARTITION (p0) VALUES (3,   'Tim',  'Greene',  3,  1, x)
ELSE
INTO employees PARTITION (p1,p2) VALUES (8, 'Linda', 'Mills', 2, 1, x)
INTO employees PARTITION (p1,p2) VALUES (48, 'Linda4', 'Mills4', 42, 41, x)
SELECT 1 x FROM dual;
SELECT * FROM employees;
id	fname	lname	store_id	department_id	cond_value
3	Tim	Greene	3	1	1
4	Gary	Kang	4	5	1
8	Linda	Mills	2	1	1
31	Tim1	Greene1	31	11	1
48	Linda4	Mills4	42	41	1
SELECT '5 rows expected';
5 rows expected
5 rows expected
SET SQL_MODE=ORACLE;
TRUNCATE employees;
INSERT FIRST
WHEN 3>x THEN
INTO employees PARTITION (p0) VALUES (4, 'Gary', 'Kang', 4, 5, x)
INTO employees PARTITION (p2) VALUES (31, 'Tim1', 'Greene1', 31, 11, x)
WHEN 2>x THEN
INTO employees PARTITION (p0) VALUES (3,   'Tim',  'Greene',  3,  1, x)
ELSE
INTO employees PARTITION (p1,p2) VALUES (8, 'Linda', 'Mills', 2, 1, x)
INTO employees PARTITION (p1,p2) VALUES (48, 'Linda4', 'Mills4', 42, 41, x)
SELECT 4 x FROM dual;
SELECT * FROM employees;
id	fname	lname	store_id	department_id	cond_value
8	Linda	Mills	2	1	4
48	Linda4	Mills4	42	41	4
SELECT '8/48 expected';
8/48 expected
8/48 expected
TRUNCATE employees;
INSERT FIRST
WHEN 3>x THEN
INTO employees PARTITION (p0) VALUES (4, 'Gary', 'Kang', 4, 5, x)
INTO employees PARTITION (p2) VALUES (31, 'Tim1', 'Greene1', 31, 11, x)
WHEN 2>x THEN
INTO employees PARTITION (p0) VALUES (3,   'Tim',  'Greene',  3,  1, x)
ELSE
INTO employees PARTITION (p1,p2) VALUES (8, 'Linda', 'Mills', 2, 1, x)
INTO employees PARTITION (p1,p2) VALUES (48, 'Linda4', 'Mills4', 42, 41, x)
SELECT 2 x FROM dual;
SELECT * FROM employees;
id	fname	lname	store_id	department_id	cond_value
4	Gary	Kang	4	5	2
31	Tim1	Greene1	31	11	2
SELECT 'Gary/Tim1 expected';
Gary/Tim1 expected
Gary/Tim1 expected
TRUNCATE employees;
INSERT FIRST
WHEN 2>x THEN
INTO employees PARTITION (p0) VALUES (3,   'Tim',  'Greene',  3,  1, x)
WHEN 3>x THEN
INTO employees PARTITION (p0) VALUES (4, 'Gary', 'Kang', 4, 5, x)
INTO employees PARTITION (p2) VALUES (31, 'Tim1', 'Greene1', 31, 11, x)
ELSE
INTO employees PARTITION (p1,p2) VALUES (8, 'Linda', 'Mills', 2, 1, x)
INTO employees PARTITION (p1,p2) VALUES (48, 'Linda4', 'Mills4', 42, 41, x)
SELECT 2 x FROM dual;
SELECT * FROM employees;
id	fname	lname	store_id	department_id	cond_value
4	Gary	Kang	4	5	2
31	Tim1	Greene1	31	11	2
SELECT 'Gary/Tim1 expected';
Gary/Tim1 expected
Gary/Tim1 expected
TRUNCATE employees;
INSERT FIRST
WHEN 3>x THEN
INTO employees PARTITION (p0) VALUES (4, 'Gary', 'Kang', 4, 5, x)
INTO employees PARTITION (p2) VALUES (31, 'Tim1', 'Greene1', 31, 11, x)
WHEN 2>x THEN
INTO employees PARTITION (p0) VALUES (3,   'Tim',  'Greene',  3,  1, x)
ELSE
INTO employees PARTITION (p1,p2) VALUES (8, 'Linda', 'Mills', 2, 1, x)
INTO employees PARTITION (p1,p2) VALUES (48, 'Linda4', 'Mills4', 42, 41, x)
SELECT 1 x FROM dual;
SELECT * FROM employees;
id	fname	lname	store_id	department_id	cond_value
4	Gary	Kang	4	5	1
31	Tim1	Greene1	31	11	1
SELECT 'Gary/Tim1 expected';
Gary/Tim1 expected
Gary/Tim1 expected
TRUNCATE employees;
INSERT FIRST
WHEN 2>x THEN
INTO employees PARTITION (p0) VALUES (3,   'Tim',  'Greene',  3,  1, x)
WHEN 3>x THEN
INTO employees PARTITION (p0) VALUES (4, 'Gary', 'Kang', 4, 5, x)
INTO employees PARTITION (p2) VALUES (31, 'Tim1', 'Greene1', 31, 11, x)
ELSE
INTO employees PARTITION (p1,p2) VALUES (8, 'Linda', 'Mills', 2, 1, x)
INTO employees PARTITION (p1,p2) VALUES (48, 'Linda4', 'Mills4', 42, 41, x)
SELECT 1 x FROM dual;
SELECT * FROM employees;
id	fname	lname	store_id	department_id	cond_value
3	Tim	Greene	3	1	1
SELECT 'Tim expected';
Tim expected
Tim expected
INSERT FIRST
WHEN 2>x THEN
INTO employees PARTITION (p0) VALUES (3,   'Tim',  'Greene',  3,  1, x)
ELSE
INTO employees PARTITION (p1,p2) VALUES (8, 'Linda', 'Mills', 2, 1, x)
ELSE
INTO employees PARTITION (p1,p2) VALUES (48, 'Linda4', 'Mills4', 42, 41, x)
SELECT 1 x FROM dual;
ERROR HY000: ELSE clause should not appear more than once
INSERT FIRST
WHEN 2>x THEN
INTO employees PARTITION (p0) VALUES (3,   'Tim',  'Greene',  3,  1, x)
ELSE
INTO employees PARTITION (p1,p2) VALUES (8, 'Linda', 'Mills', 2, 1, x)
WHEN 3>x THEN
INTO employees PARTITION (p1,p2) VALUES (48, 'Linda4', 'Mills4', 42, 41, x)
SELECT 1 x FROM dual;
ERROR HY000: WHEN clause should not appear after ELSE clause
INSERT ALL
INTO employees PARTITION (p0) VALUES (3,   'Tim',  'Greene',  3,  1, x)
WHEN 3>x THEN
INTO employees PARTITION (p0) VALUES (4, 'Gary', 'Kang', 4, 5, x)
ELSE
INTO employees PARTITION (p1,p2) VALUES (8, 'Linda', 'Mills', 2, 1, x)
SELECT 1 x FROM dual;
ERROR HY000: WHEN or ELSE should not follow unconditional clause
INSERT FIRST
INTO employees PARTITION (p0) VALUES (3,   'Tim',  'Greene',  3,  1, x)
INTO employees PARTITION (p0) VALUES (4, 'Gary', 'Kang', 4, 5, x)
INTO employees PARTITION (p1,p2) VALUES (8, 'Linda', 'Mills', 2, 1, x)
SELECT 1 x FROM dual;
ERROR HY000: no WHEN clause found after INSERT FIRST
SET SQL_MODE=DEFAULT;
DROP TABLE employees;
CREATE TABLE employees (
ID decimal(11,0) NOT NULL ,
FNAME VARCHAR(25 ) NOT NULL ,
LNAME VARCHAR(25 ) NOT NULL ,
STORE_ID decimal(11,0) NOT NULL ,
DEPARTMENT_ID decimal(11,0) NOT NULL
);
CREATE TABLE employees2    (
ID decimal(11,0) NOT NULL ,
FNAME VARCHAR(25 ) NOT NULL ,
LNAME VARCHAR(25 ) NOT NULL ,
STORE_ID decimal(11,0) NOT NULL ,
DEPARTMENT_ID decimal(11,0) NOT NULL
);
CREATE TABLE `t1` (
`id` int DEFAULT NULL,
`name` varchar(100) NOT NULL,
`code` varchar(255) DEFAULT NULL,
PRIMARY KEY (`name`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
INSERT ALL
WHEN 3>x THEN
INTO employees  VALUES (x, 'Gary', 'Kang', 4, 5)
INTO employees  VALUES (x, 'Tim1', 'Greene1', 31, 11)
WHEN 2<x THEN
INTO employees2  VALUES (x,   'Tim',  'Greene',  3,  1)
ELSE
INTO employees  VALUES (x, 'Linda', 'Mills', 2, 1)
INTO employees VALUES (x, 'Linda4', 'Mills4', 42, 41)
SELECT id x FROM t1;
DROP TABLE employees;
DROP TABLE employees2;
DROP TABLE t1;
DROP TABLE IF EXISTS temp1,temp2,temp3;
Warnings:
Note	1051	Unknown table 'test.temp1'
Note	1051	Unknown table 'test.temp2'
Note	1051	Unknown table 'test.temp3'
CREATE TABLE temp1 (id number(5,0),type varchar2(10));
CREATE TABLE temp2 like temp1;
CREATE TABLE temp3 like temp1;
insert into temp1 values(1,'aa');
insert into temp1 values(2,'bb');
insert into temp2 values(11,'xx11');
insert into temp2 values(22,'xx22');
insert all into temp3
select * from temp1
union
select * from temp2;
select * from temp3;
id	type
1	aa
2	bb
11	xx11
22	xx22
explain format=tree insert all into temp3
select * from temp1
union
select * from temp2;
EXPLAIN
-> Table scan on   (cost=*** rows=***)
    -> Union materialize with deduplication  (cost=*** rows=***)
        -> Table scan on temp1  (cost=*** rows=***)
        -> Table scan on temp2  (cost=*** rows=***)

drop table temp1;
drop table temp2;
drop table temp3;
