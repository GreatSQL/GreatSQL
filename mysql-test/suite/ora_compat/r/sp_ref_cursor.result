set sql_mode="oracle";
set @@udt_format_result='DBA';
CREATE TABLE t1 (a INT, b VARCHAR(3));
insert into t1 values(1,'aa'),(2,'bb'),(3,'cc') ;
#
# test of SYS_REFCURSOR,open cursor for ident
#
CREATE or replace PROCEDURE p1() as
cSendCursor SYS_REFCURSOR;
rSql varchar(100);
dr_type t1%rowtype;
begin
rSql := 'select * from t1';
open cSendCursor for rSql;
loop
fetch cSendCursor into dr_type;
exit when cSendCursor%NOTFOUND;
select dr_type.a,dr_type.b;
end loop;
end;
$$
show procedure code p1;
Pos	Instruction
0	set rSql@1 NULL
1	set dr_type@2 NULL
2	set rSql@1 'select * from t1'
3	open_for cSendCursor@0 rSql@1
4	cfetch cSendCursor@0 dr_type@2
5	jump_if_not 7(0) "cSendCursor"%NOTFOUND
6	jump 11
7	stmt "select dr_type.a,dr_type.b"
8	jump 4
call p1;
dr_type.a	dr_type.b
1	aa
dr_type.a	dr_type.b
2	bb
dr_type.a	dr_type.b
3	cc
drop PROCEDURE p1;
#
# test of error ER_SP_UNDECLARED_VAR
#
CREATE or replace PROCEDURE p1() as
cSendCursor SYS_REFCURSOR;
rSql varchar(100);
dr_type t1%rowtype;
begin
rSql := 'select * from t1 into dr_type';
open cSendCursor for rSql;
loop
fetch cSendCursor into dr_type;
exit when cSendCursor%NOTFOUND;
select dr_type.a,dr_type.b;
end loop;
end;
$$
call p1;
ERROR 42000: Undeclared variable: dr_type
drop PROCEDURE p1;
#
# test of open cursor for select_stmt
#
CREATE or replace PROCEDURE p1() as
cSendCursor SYS_REFCURSOR;
dr_type t1%rowtype;
begin
open cSendCursor for select * from t1;
loop
fetch cSendCursor into dr_type;
exit when cSendCursor%NOTFOUND;
select dr_type.a,dr_type.b;
end loop;
end;
$$
call p1;
dr_type.a	dr_type.b
1	aa
dr_type.a	dr_type.b
2	bb
dr_type.a	dr_type.b
3	cc
drop PROCEDURE p1;
#
# test of open cursor for select_stmt
#
CREATE or replace PROCEDURE p1() as
cSendCursor SYS_REFCURSOR;
type dr_typ is record(
a int, b varchar(10)
);
dr_type dr_typ;
begin
open cSendCursor for select * from t1;
loop
fetch cSendCursor into dr_type;
exit when cSendCursor%NOTFOUND;
select dr_type.a,dr_type.b;
end loop;
end;
$$
call p1;
dr_type.a	dr_type.b
1	aa
dr_type.a	dr_type.b
2	bb
dr_type.a	dr_type.b
3	cc
drop PROCEDURE p1;
#
# test of for in (select_stmt) loop
#
CREATE or replace PROCEDURE p1() as
begin
for dr_type in (select * from t1) loop
select dr_type.a,dr_type.b;
end loop;
end;
$$
call p1;
dr_type.a	dr_type.b
1	aa
dr_type.a	dr_type.b
2	bb
dr_type.a	dr_type.b
3	cc
drop PROCEDURE p1;
#
# test of open cursor for ident
#
CREATE or replace PROCEDURE p1() as
cSendCursor SYS_REFCURSOR;
rSql varchar(100);
dr_type t1%rowtype;
begin
rSql := 'update t1 set a=1 ';
open cSendCursor for rSql;
loop
fetch cSendCursor into dr_type;
exit when cSendCursor%NOTFOUND;
select dr_type.a,dr_type.b;
end loop;
end;
$$
call p1;
ERROR 42000: Cursor statement must be a SELECT
drop PROCEDURE p1;
#
# test of ref cursor
#
CREATE or replace PROCEDURE p1() as
type dr_cursor is ref cursor;
cSendCursor dr_cursor;
dr_type t1%rowtype;
begin
open cSendCursor for select * from t1 where a<3;
loop
fetch cSendCursor into dr_type;
exit when cSendCursor%NOTFOUND;
select dr_type.a,dr_type.b;
end loop;
end;
$$
call p1;
dr_type.a	dr_type.b
1	aa
dr_type.a	dr_type.b
2	bb
drop PROCEDURE p1;
#
# test of multiple ref cursor
#
CREATE or replace PROCEDURE p1() as
cSendCursor SYS_REFCURSOR;
type dr_cursor is ref cursor;
cSendCursor1 dr_cursor;
rSql varchar(100);
dr_type t1%rowtype;
begin
rSql := 'select * from t1 where a<3';
open cSendCursor for rSql;
open cSendCursor1 for select * from t1 where a<4;
loop
fetch cSendCursor into dr_type;
exit when cSendCursor%NOTFOUND;
select dr_type;
end loop;
loop
fetch cSendCursor1 into dr_type;
exit when cSendCursor1%NOTFOUND;
select dr_type;
end loop;
end;
$$
call p1;
dr_type
a:1 | b:aa
dr_type
a:2 | b:bb
dr_type
a:1 | b:aa
dr_type
a:2 | b:bb
dr_type
a:3 | b:cc
drop PROCEDURE p1;
#
# test of ref cursor ER_NOT_SUPPORTED_YET
#
CREATE or replace PROCEDURE p1() as
type dr_cursor is ref cursor;
cSendCursor dr_cursor;
dr_type cSendCursor%rowtype;
begin
end;
$$
call p1;
ERROR 42000: This version of MySQL doesn't yet support 'non structure variable used in %rowtype'
#
# test of ref cursor ER_SP_MISMATCH_RECORD_VAR
#
CREATE or replace PROCEDURE p1() as
dr_cursor sys_refcursor;
cSendCursor dr_cursor;
dr_type cSendCursor%rowtype;
begin
end;
$$
ERROR HY000: The variable: dr_cursor is not record type.
#
# test of ref cursor ER_NOT_SUPPORTED_YET
#
CREATE or replace PROCEDURE p1() as
type dr_cursor is ref cursor;
cSendCursor dr_cursor;
dr_type cSendCursor%type;
begin
end;
$$
ERROR 42000: This version of MySQL doesn't yet support 'the use likes ref_cursor%type'
#
# test of ref cursor ER_NOT_SUPPORTED_YET
#
CREATE or replace PROCEDURE p1() as
dr_cursor sys_refcursor;
dr_type dr_cursor%type;
begin
end;
$$
ERROR 42000: This version of MySQL doesn't yet support 'the use likes ref_cursor%type'
#
# test of ref cursor ER_SP_MISMATCH_RECORD_VAR
#
CREATE or replace PROCEDURE p1() as
type dr_cursor is ref cursor;
cSendCursor dr_cursor;
type cc is record(
c1 cSendCursor;
);
begin
end;
$$
ERROR HY000: The variable: cSendCursor is not record type.
#
# test of ref cursor ER_SP_MISMATCH_RECORD_VAR
#
CREATE or replace PROCEDURE p1() as
type dr_cursor is ref cursor;
cSendCursor dr_cursor;
cc cSendCursor;
begin
end;
$$
ERROR HY000: The variable: cSendCursor is not record type.
#
# test of ref cursor ER_SP_MISMATCH_RECORD_VAR
#
CREATE or replace PROCEDURE p1() as
type dr_cursor is ref cursor;
cSendCursor dr_cursor;
i int;
begin
i := cSendCursor;
select i;
end;
$$
call p1;
ERROR HY000: inconsistent datatypes: udt type and non udt type
drop PROCEDURE p1;
#
# test of ref cursor ER_SP_CURSOR_MISMATCH
#
CREATE or replace PROCEDURE p1() as
type dr_cursor is ref cursor;
cSendCursor dr_cursor;
i int;
begin
fetch cSendCursor into i;
end;
$$
call p1;
ERROR 42000: Undefined CURSOR: cSendCursor
drop PROCEDURE p1;
#
# test of ref cursor ER_SP_CURSOR_MISMATCH
#
CREATE or replace PROCEDURE p1() as
type dr_cursor is ref cursor;
cSendCursor dr_cursor;
begin
close cSendCursor;
end;
$$
call p1;
ERROR 42000: Undefined CURSOR: cSendCursor
drop PROCEDURE p1;
#
# test of ref cursor ER_NOT_SUPPORTED_YET
#
CREATE or replace PROCEDURE p1() as
type dr_cursor is ref cursor;
cSendCursor dr_cursor;
begin
open cSendCursor for select * from t1;
fetch cSendCursor into cSendCursor,cSendCursor;
select cSendCursor;
end;
$$
ERROR 42000: This version of MySQL doesn't yet support 'SELECT contains ref cursor variable'
#
# test of ref cursor ER_NOT_SUPPORTED_YET
#
CREATE or replace PROCEDURE p1() as
type dr_cursor is ref cursor;
cSendCursor dr_cursor;
begin
select 1 into cSendCursor;
select cSendCursor;
end;
$$
ERROR 42000: This version of MySQL doesn't yet support 'SELECT contains ref cursor variable'
#
# test of ref cursor ER_SP_DUP_CURS
#
CREATE or replace PROCEDURE p1() as
type dr_cursor is ref cursor;
cSendCursor dr_cursor;
cursor cSendCursor is select * from t1;
begin
open cSendCursor for select * from t1;
end;
$$
ERROR 42000: Duplicate cursor: cSendCursor
#
# test of ref cursor ER_NOT_SUPPORTED_YET
#
CREATE or replace PROCEDURE p1() as
type dr_cursor is ref cursor;
begin
open dr_cursor for select * from t1;
end;
$$
ERROR 42000: This version of MySQL doesn't yet support 'ref cursor define used as cursor'
#
# test of ref cursor ER_SP_CURSOR_MISMATCH
#
CREATE or replace PROCEDURE p1() as
type dr_cursor is ref cursor;
cSendCursor dr_cursor;
begin
open cSendCursor for select * from t1;
open cSendCursor1 for select * from t1;
end;
$$
ERROR 42000: Undefined CURSOR: cSendCursor1
#
# test of ref cursor ER_SP_CURSOR_MISMATCH
#
CREATE or replace PROCEDURE p1() as
type dr_cursor is ref cursor;
cSendCursor dr_cursor;
begin
for i in cSendCursor loop
end loop;
end;
$$
ERROR 42000: This version of MySQL doesn't yet support 'wrong type of cursor used here'
#
# test of ref cursor ER_SP_MISMATCH_RECORD_VAR
#
CREATE or replace PROCEDURE p1() as
dr_cursor sys_refcursor;
cSendCursor dr_cursor;
dr_type cSendCursor%rowtype;
begin
end;
$$
ERROR HY000: The variable: dr_cursor is not record type.
#
# test of var in for loop
#
CREATE or replace PROCEDURE p1() as
dr_type int;
begin
for dr_type in (select * from t1) loop
select dr_type.a,dr_type.b;
end loop;
select dr_type;
end;
$$
call p1;
dr_type.a	dr_type.b
1	aa
dr_type.a	dr_type.b
2	bb
dr_type.a	dr_type.b
3	cc
dr_type
NULL
drop PROCEDURE p1;
#
# test of multiple SYS_REFCURSOR
#
CREATE or replace PROCEDURE p1() as
cSendCursor SYS_REFCURSOR;
cSendCursor2 SYS_REFCURSOR;
rSql varchar(100);
dr_type t1%rowtype;
begin 
rSql := 'select * from t1';
open cSendCursor for rSql;
loop
fetch cSendCursor into dr_type;
exit when cSendCursor%NOTFOUND;
select dr_type.a,dr_type.b;
end loop;
end;
$$
call p1;
dr_type.a	dr_type.b
1	aa
dr_type.a	dr_type.b
2	bb
dr_type.a	dr_type.b
3	cc
drop PROCEDURE p1;
#
# test of duplicate col name
#
CREATE or replace PROCEDURE p1() as
dr_type int;
begin
for dr_type in (select a,b,10 a from t1) loop
select dr_type;
end loop;
end;
$$
call p1;
ERROR 42000: This version of MySQL doesn't yet support 'table with same column name in cursor'
drop PROCEDURE p1;
#
# test of duplicate col name
#
CREATE or replace PROCEDURE p1() as
cSendCursor SYS_REFCURSOR;
rSql varchar(100);
dr_type t1%rowtype;
begin
rSql := 'select * from t1';
open cSendCursor for lsql;
loop
fetch cSendCursor into dr_type;
exit when cSendCursor%NOTFOUND;
select dr_type.a,dr_type.b;
end loop;
end;
$$
ERROR 42000: Undeclared variable: lsql
#
# test of EXIT WHEN
#
CREATE or replace PROCEDURE p1() as
salary INT;
dr t1%rowtype;
CURSOR cselect IS select * from t1;
BEGIN
OPEN cselect;
loop
EXIT WHEN cselect%NOTFOUND;
FETCH cselect INTO dr;
select dr;
END LOOP;
END;
$$
call p1;
dr
a:1 | b:aa
dr
a:2 | b:bb
dr
a:3 | b:cc
dr
a:3 | b:cc
delete from t1;
call p1;
dr
NULL
drop PROCEDURE p1;
#
# test of multiple open ref cursor
#
insert into t1 values(1,'aa'),(2,'bb'),(3,'cc') ;
create or replace procedure p1() as
ccur sys_refcursor;
cursor c is select * from t1;
rsql varchar(100);
dr_type t1%rowtype;
begin
rsql := 'select * from t1';
open ccur for rsql;
loop
exit when ccur%notfound;
fetch ccur into dr_type;
select dr_type.a, dr_type.b;
end loop;
close ccur;
rsql := 'select * from t1 where a > 1';
open ccur for rsql;
loop
exit when ccur%notfound;
fetch ccur into dr_type;
select dr_type.a, dr_type.b;
end loop;
close ccur;
end;
$$
call p1;
dr_type.a	dr_type.b
1	aa
dr_type.a	dr_type.b
2	bb
dr_type.a	dr_type.b
3	cc
dr_type.a	dr_type.b
3	cc
dr_type.a	dr_type.b
2	bb
dr_type.a	dr_type.b
3	cc
dr_type.a	dr_type.b
3	cc
drop PROCEDURE p1;
#
# test of same name of cursor
#
create or replace procedure p1() as
ccur sys_refcursor;
cursor ccur is select * from t1;
begin
end;
$$
ERROR 42000: Duplicate cursor: ccur
#
# test of multiple open ref cursor
#
CREATE TABLE t2 (a INT, b VARCHAR(3), c int);
insert into t2 values(1,'aa',1),(2,'bb',2);
create or replace procedure p1() as
ccur sys_refcursor;
rsql varchar(100);
dr_type t1%rowtype;
dr_type1 t2%rowtype;
begin
rsql := 'select * from t1';
open ccur for rsql;
loop
exit when ccur%notfound;
fetch ccur into dr_type;
select dr_type.a, dr_type.b;
end loop;
close ccur;
rsql := 'select * from t2';
open ccur for rsql;
loop
exit when ccur%notfound;
fetch ccur into dr_type1;
select dr_type1.a, dr_type1.b, dr_type1.c;
end loop;
close ccur;
end;
$$
call p1;
dr_type.a	dr_type.b
1	aa
dr_type.a	dr_type.b
2	bb
dr_type.a	dr_type.b
3	cc
dr_type.a	dr_type.b
3	cc
dr_type1.a	dr_type1.b	dr_type1.c
1	aa	1
dr_type1.a	dr_type1.b	dr_type1.c
2	bb	2
dr_type1.a	dr_type1.b	dr_type1.c
2	bb	2
drop PROCEDURE p1;
#
# test of multiple open ref cursor without close
#
create or replace procedure p1() as
ccur sys_refcursor;
rsql varchar(100);
dr_type t1%rowtype;
dr_type1 t2%rowtype;
begin
rsql := 'select * from t1';
open ccur for rsql;
loop
exit when ccur%notfound;
fetch ccur into dr_type;
select dr_type.a, dr_type.b;
end loop;
rsql := 'select * from t2';
open ccur for rsql;
loop
exit when ccur%notfound;
fetch ccur into dr_type1;
select dr_type1.a, dr_type1.b, dr_type1.c;
end loop;
close ccur;
end;
$$
show procedure code p1;
Pos	Instruction
0	set rsql@1 NULL
1	set dr_type@2 NULL
2	set dr_type1@3 NULL
3	set rsql@1 'select * from t1'
4	open_for ccur@0 rsql@1
5	jump_if_not 7(0) "ccur"%NOTFOUND
6	jump 10
7	cfetch ccur@0 dr_type@2
8	stmt "select dr_type.a, dr_type.b"
9	jump 5
10	set rsql@1 'select * from t2'
11	open_for ccur@0 rsql@1
12	jump_if_not 14(0) "ccur"%NOTFOUND
13	jump 17
14	cfetch ccur@0 dr_type1@3
15	stmt "select dr_type1.a, dr_type1.b, dr_typ..."
16	jump 12
17	cclose ccur@0
call p1;
dr_type.a	dr_type.b
1	aa
dr_type.a	dr_type.b
2	bb
dr_type.a	dr_type.b
3	cc
dr_type.a	dr_type.b
3	cc
dr_type1.a	dr_type1.b	dr_type1.c
1	aa	1
dr_type1.a	dr_type1.b	dr_type1.c
2	bb	2
dr_type1.a	dr_type1.b	dr_type1.c
2	bb	2
drop PROCEDURE p1;
#
# test of multiple open ref cursor
#
create or replace procedure p1() as
ccur sys_refcursor;
rsql varchar(100);
dr_type t1%rowtype;
dr_type1 t2%rowtype;
begin
open ccur;
end;
$$
ERROR 42000: This version of MySQL doesn't yet support 'wrong type of cursor used here'
#
# test of multiple open ref cursor without close
#
create or replace procedure p1() as
ccur sys_refcursor;
rsql varchar(100);
dr_type t1%rowtype;
dr_type1 t2%rowtype;
begin
rsql := 'select * from t1';
open ccur for rsql;
loop
exit when ccur%notfound;
fetch ccur into dr_type;
select dr_type.a, dr_type.b;
end loop;
rsql := 'select * from t2';
open ccur for rsql;
loop
exit when ccur%notfound;
fetch ccur into dr_type1;
select dr_type1.a, dr_type1.b, dr_type1.c;
end loop;
close ccur;
open ccur for rsql;
fetch ccur into dr_type1;
select dr_type1.a, dr_type1.b, dr_type1.c;
end;
$$
show procedure code p1;
Pos	Instruction
0	set rsql@1 NULL
1	set dr_type@2 NULL
2	set dr_type1@3 NULL
3	set rsql@1 'select * from t1'
4	open_for ccur@0 rsql@1
5	jump_if_not 7(0) "ccur"%NOTFOUND
6	jump 10
7	cfetch ccur@0 dr_type@2
8	stmt "select dr_type.a, dr_type.b"
9	jump 5
10	set rsql@1 'select * from t2'
11	open_for ccur@0 rsql@1
12	jump_if_not 14(0) "ccur"%NOTFOUND
13	jump 17
14	cfetch ccur@0 dr_type1@3
15	stmt "select dr_type1.a, dr_type1.b, dr_typ..."
16	jump 12
17	cclose ccur@0
18	open_for ccur@0 rsql@1
19	cfetch ccur@0 dr_type1@3
20	stmt "select dr_type1.a, dr_type1.b, dr_typ..."
call p1;
dr_type.a	dr_type.b
1	aa
dr_type.a	dr_type.b
2	bb
dr_type.a	dr_type.b
3	cc
dr_type.a	dr_type.b
3	cc
dr_type1.a	dr_type1.b	dr_type1.c
1	aa	1
dr_type1.a	dr_type1.b	dr_type1.c
2	bb	2
dr_type1.a	dr_type1.b	dr_type1.c
2	bb	2
dr_type1.a	dr_type1.b	dr_type1.c
1	aa	1
drop PROCEDURE p1;
#
# test of open ref cursor with empty string
#
create or replace procedure p1() as
ccur sys_refcursor;
rsql varchar(100);
dr_type t1%rowtype;
dr_type1 t2%rowtype;
begin
rsql := '';
open ccur for rsql;
end;
$$
call p1;
ERROR 42000: Query was empty
drop PROCEDURE p1;
#
# test of open ref cursor with null string
#
create or replace procedure p1() as
ccur sys_refcursor;
rsql varchar(100);
dr_type t1%rowtype;
dr_type1 t2%rowtype;
begin
rsql := null;
open ccur for rsql;
end;
$$
call p1;
ERROR 42000: Query was empty
drop PROCEDURE p1;
#
# test of duplicate define of cursors
#
create or replace procedure p1() as
ccur sys_refcursor;
rsql varchar(100);
dr_type t1%rowtype;
dr_type1 t2%rowtype;
cursor c is select * from t2;
type dr_cursor is ref cursor;
c dr_cursor;
begin
end;
$$
ERROR 42000: Duplicate cursor: c
#
# test of duplicate define of cursors
#
create or replace procedure p1() as
ccur sys_refcursor;
rsql varchar(100);
dr_type t1%rowtype;
dr_type1 t2%rowtype;
cursor c is select * from t2;
c sys_refcursor;
begin
end;
$$
ERROR 42000: Duplicate cursor: c
#
# test of duplicate open cursors
#
CREATE or replace PROCEDURE p1() as
cSendCursor SYS_REFCURSOR;
rSql varchar(100);
dr_type t2%rowtype;
id int:=0;
begin
rSql := 'select * from t2';
open cSendCursor for rSql;
loop
open cSendCursor for rSql;
fetch cSendCursor into dr_type;
exit when id=3;
select dr_type.a,dr_type.b;
id := id+1;
end loop;
end;
$$
call p1;
dr_type.a	dr_type.b
1	aa
dr_type.a	dr_type.b
1	aa
dr_type.a	dr_type.b
1	aa
drop PROCEDURE p1;
#
# test of unsupport expression
#
CREATE or replace PROCEDURE p1() as
dr_type t1%rowtype;
begin
for dr_type in 1 loop
select dr_type;
end loop;
end;
$$
ERROR 42000: This version of MySQL doesn't yet support 'for loop use the expression, only support cursor sql'
#
# test of for in function loop
#
CREATE FUNCTION f1 (a int) RETURN int no sql
is result int;
BEGIN
result := a+10;
RETURN(result);
END;
$$
CREATE or replace PROCEDURE p1() as
dr_type t1%rowtype;
begin
for dr_type in f1(1) .. f1(2) loop
select dr_type;
end loop;
end;
$$
call p1;
dr_type
11
dr_type
12
drop PROCEDURE p1;
#
# test of for in reverse function loop
#
CREATE or replace PROCEDURE p1() as
dr_type t1%rowtype;
begin
for dr_type in reverse f1(2) .. f1(1) loop
select dr_type;
end loop;
end;
$$
call p1;
drop PROCEDURE p1;
#
# test of for in function loop
#
CREATE or replace PROCEDURE p1() as
begin
for dr_type in (select f1(1)) loop
select dr_type;
end loop;
end;
$$
call p1;
dr_type
f1(1):11
drop PROCEDURE p1;
#
# test of for in select loop
#
CREATE or replace PROCEDURE p1() as
BEGIN
for i in (select 1.1) .. (select 2.6) loop
select i;
end loop;
END;
$$
ERROR 42000: This version of MySQL doesn't yet support 'select stmt used in 'for in expr .. expr loop' sql'
#
# test of for in inner layer of sp
#
CREATE or replace PROCEDURE p1() as
type tklist is table of t1%rowtype INDEX BY pls_integer;
stu_record_val tklist := tklist(1=>null);
BEGIN
stu_record_val(1).a := 10;
stu_record_val(1).b := 'bb';
FORALL i IN f1(1)-10 .. f1(1)-10
insert into t1 values stu_record_val (i);
select * from t1;
END;
$$
call p1();
a	b
1	aa
2	bb
3	cc
10	bb
drop PROCEDURE p1;
drop function f1;
#
# test of for in inner layer of sp
#
set @tv1=10;
CREATE FUNCTION f1(a int) RETURN int NO SQL
AS result int;
BEGIN
result := a + @tv1;
RETURN (result);
END ;$$
CREATE OR REPLACE PROCEDURE p1() AS
BEGIN
FOR dr_type in f1(1) .. f1(2) LOOP
select dr_type;
set @tv1 = @tv1 + 1;
END LOOP;
END;
$$
call p1();
dr_type
11
dr_type
12
drop PROCEDURE p1;
drop function f1;
#
# test of digest about .. % bulk collect into in reverse
#
select statement_digest_text('CREATE or replace PROCEDURE p1() as
begin
  for i in 1 .. 2 loop
    select i;
  end loop;
end;');
statement_digest_text('CREATE or replace PROCEDURE p1() as
begin
  for i in 1 .. 2 loop
    select i;
  end loop;
end;')
CREATE OR REPLACE PROCEDURE `p1` ( ) AS BEGIN FOR `i` IN ? .. ? LOOP SELECT `i` ; END LOOP ; END ;
select statement_digest_text('CREATE or replace PROCEDURE p1() as
begin
  for i in reverse 1 .. 2 loop
    select i;
  end loop;
end;');
statement_digest_text('CREATE or replace PROCEDURE p1() as
begin
  for i in reverse 1 .. 2 loop
    select i;
  end loop;
end;')
CREATE OR REPLACE PROCEDURE `p1` ( ) AS BEGIN FOR `i` in reverse ? .. ? LOOP SELECT `i` ; END LOOP ; END ;
select statement_digest_text('CREATE or replace PROCEDURE p1() as
  id int;
  id1 id%type;
begin
end;');
statement_digest_text('CREATE or replace PROCEDURE p1() as
  id int;
  id1 id%type;
begin
end;')
CREATE OR REPLACE PROCEDURE `p1` ( ) AS `id` INTEGER ; `id1` `id` % TYPE ; BEGIN END ;
select statement_digest_text('CREATE or replace PROCEDURE p1() as
type stu_record is record(
  id int := 1,
  name_d  varchar(20) := ''a'',
  score float := 0
);
type tklist is table of stu_record INDEX BY pls_integer;
stu_record_val tklist;
begin
 select * bulk collect into stu_record_val from t1;
end;');
statement_digest_text('CREATE or replace PROCEDURE p1() as
type stu_record is record(
  id int := 1,
  name_d  varchar(20) := ''a'',
  score float := 0
);
type tklist is table of stu_record INDEX BY pls_integer;
stu_record_val tklist;
begin
 select * bulk
CREATE OR REPLACE PROCEDURE `p1` ( ) AS TYPE `stu_record` IS RECORD ( `id` INTEGER := ? , `name_d` VARCHARACTER (?) := ? , `score` FLOAT4 := ? ) ; TYPE `tklist` IS TABLE OF `stu_record` INDEX BY INTEGER ; `stu_record_val` `tklist` ; SELECT BEGIN * BULK COLLECT INTO `stu_record_val` FROM `t1` ; END ;
DROP TABLE t1;
drop table t2;
#
# Bugfix#7095
#
CREATE TABLE t1 (a INT, b VARCHAR(3));
insert into t1 values(1,'aa'),(2,'bb'),(3,'cc') ;
CREATE or replace PROCEDURE p1() as
begin
for dr_type in (select * from t1) loop
select dr_type.a,dr_type.b;
end loop;
end;
$$
call p1();
dr_type.a	dr_type.b
1	aa
dr_type.a	dr_type.b
2	bb
dr_type.a	dr_type.b
3	cc
truncate table t1;
call p1();
drop PROCEDURE p1;
#
# Bugfix#7445
#
insert into t1 values(1,'aa'),(2,'bb'),(3,'cc') ;
CREATE or replace function f1() RETURN INT no SQL
AS
cSendCursor SYS_REFCURSOR;
rSql varchar(100);
dr_type t1%rowtype;
r_rec int;
begin
rSql := 'select * from t1';
open cSendCursor for rSql;
loop
fetch cSendCursor into dr_type;
exit when cSendCursor%NOTFOUND;
select dr_type.a into r_rec;
end loop;
RETURN r_rec;
end;
$$
select f1();
f1()
3
truncate table t1;
select f1();
f1()
NULL
drop function f1;
drop table t1;
#
# Bugfix#7830
#
CREATE TABLE t1(col1 int,col2 VARCHAR(100),col3 pls_integer) partition by hash(col1) partitions 15  ;
INSERT INTO t1 values(1,'col1',11),(2,'col2',12),(3,'col3',13),(4,'col4',14),(5,'col5',15);
CREATE TEMPORARY table t_t1 (SELECT * FROM t1);
CREATE GLOBAL TEMPORARY TABLE tg_1(
col1 int AUTO_INCREMENT PRIMARY KEY,col2 VARCHAR(100),col3 number NOT NULL default 3.1415)
ON COMMIT PRESERVE ROWS ;
insert into tg_1 values(1,'insert into values',987.564);
insert into tg_1 values(2,'insert into set (data_source)',987.564);
CREATE OR REPLACE PROCEDURE p1(v_sql varchar2(500) )
AS
emp_cursor SYS_REFCURSOR; 
v_employee t1%ROWTYPE;
BEGIN
OPEN emp_cursor FOR v_sql;
LOOP
FETCH emp_cursor INTO v_employee;
EXIT WHEN emp_cursor%NOTFOUND;
SELECT v_employee.col1;
END LOOP;  
CLOSE emp_cursor;
END;
CREATE or replace function f1(rSql varchar2(500)) RETURN INT no SQL
AS
cSendCursor SYS_REFCURSOR;
dr_type t1%rowtype;
r_rec int;
begin
open cSendCursor for rSql;
loop
fetch cSendCursor into dr_type;
exit when cSendCursor%NOTFOUND;
select dr_type.col1 into r_rec;
end loop;
RETURN r_rec;
end;
$$
CALL p1('select * from t_t1');
v_employee.col1
1
v_employee.col1
2
v_employee.col1
3
v_employee.col1
4
v_employee.col1
5
CALL p1('select * from tg_1');
v_employee.col1
1
v_employee.col1
2
CALL p1('select * from t1');
v_employee.col1
1
v_employee.col1
2
v_employee.col1
3
v_employee.col1
4
v_employee.col1
5
drop PROCEDURE p1;
select f1('select * from t_t1');
f1('select * from t_t1')
5
select f1('select * from tg_1');
f1('select * from tg_1')
2
select f1('select * from t1');
f1('select * from t1')
5
drop function f1;
drop table t1;
drop table t_t1;
drop table tg_1;
#
# Bugfix#7823
#
CREATE or replace PROCEDURE p1() as
cSendCursor SYS_REFCURSOR;
begin
select cSendCursor%isopen;
end;
$$
call p1();
cSendCursor%isopen
0
call p1();
cSendCursor%isopen
0
drop PROCEDURE p1;
CREATE or replace PROCEDURE p1() as
cSendCursor SYS_REFCURSOR;
begin
select cSendCursor%notfound;
end;$$
call p1();
ERROR 42000: Undefined CURSOR: cSendCursor
drop PROCEDURE p1;
CREATE or replace PROCEDURE p1() as
cSendCursor SYS_REFCURSOR;
begin
select cSendCursor%rowcount;
end;$$
call p1();
ERROR 24000: Cursor is not open
drop PROCEDURE p1;
CREATE or replace PROCEDURE p1() as
cSendCursor SYS_REFCURSOR;
begin
select cSendCursor%found;
end;$$
call p1();
ERROR 42000: Undefined CURSOR: cSendCursor
drop PROCEDURE p1;
#
# Bugfix#8880
#
CREATE or replace PROCEDURE p1() as
a int := 0;
begin
loop
exit when a=6;
for i in (select 1 as s1,2 as s2 from dual) loop
select i;
end loop;
a:=a+1;
end loop;
end;
$$
call p1();
i
s1:1 | s2:2
i
s1:1 | s2:2
i
s1:1 | s2:2
i
s1:1 | s2:2
i
s1:1 | s2:2
i
s1:1 | s2:2
call p1();
i
s1:1 | s2:2
i
s1:1 | s2:2
i
s1:1 | s2:2
i
s1:1 | s2:2
i
s1:1 | s2:2
i
s1:1 | s2:2
drop PROCEDURE p1;
