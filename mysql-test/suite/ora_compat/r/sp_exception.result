SET sql_mode='ORACLE';
CREATE TABLE t1 (a INT);
INSERT INTO t1 VALUES (10),(20);
CREATE PROCEDURE p1(lim INT, res OUT varchar(50))
as
a INT;
BEGIN
SELECT a INTO a FROM t1 LIMIT lim;
EXCEPTION
WHEN TOO_MANY_ROWS THEN
set res='--- too_many_rows cought ---';
WHEN NO_DATA_FOUND THEN
set res='--- no_data_found cought ---';
END;
$$
SET @res='';
CALL p1(0, @res);
SELECT @res;
@res
--- no_data_found cought ---
CALL p1(2, @res);
SELECT @res;
@res
--- too_many_rows cought ---
DROP PROCEDURE p1;
DROP TABLE t1;
CREATE PROCEDURE p1(res OUT varchar(50))
as
BEGIN
select 1/0 ;
EXCEPTION
WHEN ZERO_DIVIDE THEN
set res='--- ZERO_DIVIDE cought ---';
when others then
set res='--- others cought ---';
END;
$$
CALL p1(@res);
1/0
SELECT @res;
@res
--- ZERO_DIVIDE cought ---
DROP PROCEDURE p1;
#
# Testing DUP_VAL_ON_INDEX
#
CREATE TABLE t1 (a INT PRIMARY KEY);
CREATE PROCEDURE p1(res OUT VARCHAR(50))
as
BEGIN
INSERT INTO t1 VALUES (10);
INSERT INTO t1 VALUES (10);
EXCEPTION
WHEN DUP_VAL_ON_INDEX THEN
set res='--- dup_val_on_index cought ---';
END;
$$
SET @res='';
CALL p1(@res);
SELECT @res;
@res
--- dup_val_on_index cought ---
SELECT * FROM t1;
a
10
DROP PROCEDURE p1;
DROP TABLE t1;
CREATE TABLE t1 (a INT PRIMARY KEY);
INSERT INTO t1 VALUES (10),(20),(30);
CREATE PROCEDURE p1(a INT)
as
BEGIN
INSERT INTO t1 (a) VALUES (a);
EXCEPTION
WHEN DUP_VAL_ON_INDEX THEN
set a= a+1;
INSERT INTO t1 VALUES (a);
WHEN OTHERS THEN
select 'others1';
select 'others2';
END;
$$
CALL p1(30);
SELECT * FROM t1;
a
10
20
30
31
DROP PROCEDURE p1;
DROP TABLE t1;
CREATE PROCEDURE p1()
as
begin
BEGIN
select 'hello world';
raise TOO_MANY_ROWS;
EXCEPTION
WHEN OTHERS THEN
select 'get raise exception from others and raise' as val;
raise;
END;
EXCEPTION
when TOO_MANY_ROWS then
select 'get too_many_rows from raise' as val;
end;
$$
call p1();
hello world
hello world
val
get raise exception from others and raise
val
get too_many_rows from raise
DROP PROCEDURE p1;
CREATE PROCEDURE p1()
as
begin
raise;
EXCEPTION
when others then
select 'get too_many_rows from raise' as val;
end;
$$
ERROR HY000: a RAISE statement with no exception name must be inside an exception handler
CREATE PROCEDURE p1()
as
c EXCEPTION;
b EXCEPTION;
begin
select 'hello world';
raise c;
EXCEPTION
when b then
select 'get raise 2' as res;
raise;
when c then
select 'get raise 1' as res;
end;
$$
call p1();
hello world
hello world
res
get raise 1
DROP PROCEDURE p1;
CREATE PROCEDURE p1()
as
a EXCEPTION;
begin
DECLARE
c EXCEPTION;
begin
raise c;
exception
when c then
select 'get c raise 1' as res;
raise;
end;
EXCEPTION
when a then
select 'get a raise 2 is failed' as res;
END;
$$
call p1();
res
get c raise 1
ERROR 45000: Unhandled user-defined exception condition
DROP PROCEDURE p1;
CREATE PROCEDURE p1()
as
a EXCEPTION;
errno INT;
msg TEXT;
begin
DECLARE
c EXCEPTION;
begin
raise c;
end;
EXCEPTION
when a then
select 'get a raise 2 is failed' as res;
when others then
GET DIAGNOSTICS CONDITION 1
errno = RETURNED_SQLSTATE, msg = MESSAGE_TEXT;
select 'get others:'||errno ||  msg as res;
END;
$$
call p1();
res
get others:45000Unhandled user-defined exception condition
DROP PROCEDURE p1;
CREATE TABLE t1 (a INT);
CREATE PROCEDURE p1()
as
a EXCEPTION;
PRAGMA EXCEPTION_INIT(a,1329);
b INT;
begin
SELECT a INTO b FROM t1;
EXCEPTION
when a then
select '--NO_DATA_FOUND--' as res;
when others then
select 'get others' as res;
raise;
END;
$$
call p1();
res
--NO_DATA_FOUND--
DROP PROCEDURE p1;
DROP TABLE t1;
CREATE PROCEDURE p1(lim INT, res OUT varchar(50))
as
a INT;
BEGIN
SELECT a INTO a FROM t1 LIMIT lim;
EXCEPTION
WHEN TOO_MANY_ROWS THEN
set res='--- too_many_rows cought ---1';
WHEN TOO_MANY_ROWS THEN
set res='--- too_many_rows cought ---2';
WHEN NO_DATA_FOUND THEN
set res='--- no_data_found cought ---';
END;
$$
ERROR 42000: Duplicate handler declared in the same block
CREATE PROCEDURE p1()
as
a EXCEPTION;
PRAGMA EXCEPTION_INIT(a,1329);
begin
select 'hello world';
EXCEPTION
when a then
select '--NO_DATA_FOUND-- a' as res;
when NO_DATA_FOUND then
select '--NO_DATA_FOUND-- b' as res;
when others then
select 'get others' as res;
END;
$$
ERROR 42000: Duplicate handler declared in the same block
CREATE PROCEDURE p1()
as
a EXCEPTION;
PRAGMA EXCEPTION_INIT(a,1329);
b EXCEPTION;
PRAGMA EXCEPTION_INIT(b,1329);
begin
select 'hello world';
EXCEPTION
when a then
select '--NO_DATA_FOUND-- a' as res;
when b then
select '--NO_DATA_FOUND-- b' as res;
when others then
select 'get others' as res;
END;
$$
ERROR 42000: Duplicate handler declared in the same block
CREATE PROCEDURE p1()
as
a EXCEPTION;
PRAGMA EXCEPTION_INIT(a,1329);
begin
select 'hello world';
raise_application_error(1329 , 'test');
EXCEPTION
when a then
select '--NO_DATA_FOUND-- a' as res;
raise;
when others then
select 'get others' as res;
END;
$$
call p1();
hello world
hello world
res
--NO_DATA_FOUND-- a
ERROR 02000: test
DROP PROCEDURE p1;
CREATE PROCEDURE p1()
as
begin
raise_application_error(1329 , 'test');
END;
$$
call p1();
ERROR 02000: test
DROP PROCEDURE p1;
CREATE PROCEDURE p1()
as
begin
raise_application_error(1329 , 'test');
exception
when others then
select sqlerrm ;
END;
$$
call p1();
sqlerrm 
1329 : test
drop PROCEDURE p1;
set sql_mode=oracle;
raise;
ERROR 42000: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'raise' at line 1
raise TOO_MANY_ROWS;
Got one of the listed errors
raise_application_error(1329 , 'test');
ERROR 42000: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'raise_application_error(1329 , 'test')' at line 1
