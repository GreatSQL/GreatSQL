create sequence seq1;
create sequence seq2;
create table t1(ida int, age int);
select seq1.nextval, seq1.currval from dual;
nextval	currval
1	1
insert into t1 values(1, 2), (2, 3);
select seq1.nextval from t1;
nextval
2
3
select seq1.currval, t1.ida from t1 where t1.ida in (select age from t1);
currval	ida
3	2
select seq1.nextval+1 from t1;
seq1.nextval+1
5
6
select seq1.nextval+1, seq1.nextval "a", concat(seq1.nextval+age, 3), ida from t1;
seq1.nextval+1	a	concat(seq1.nextval+age, 3)	ida
7	6	83	1
8	7	103	2
select seq1.currval from t1;
currval
7
7
select seq1.currval, floor(seq1.nextval) from t1;
currval	floor(seq1.nextval)
8	8
9	9
insert into t1 select seq1.nextval, seq1.currval from t1;
select * from t1;
ida	age
1	2
2	3
10	10
11	11
insert into t1 values(seq1.nextval, 11);
insert into t1 values(seq1.nextval, seq1.currval);
insert into t1 values(seq1.currval, 110);
select * from t1;
ida	age
1	2
2	3
10	10
11	11
12	11
13	13
13	110
update t1 set ida = seq1.nextval, age = seq1.currval where ida = 1;
update t1 set ida = seq1.nextval, age = seq1.nextval+2 where ida is not null;
select * from t1;
ida	age
15	17
16	18
17	19
18	20
19	21
20	22
21	23
create table t2(ida int, age int);
insert into t2 values(1, 4), (2, 5);
insert into t2 select seq1.nextval, floor(seq2.nextval) from t1;
select * from t2;
ida	age
1	4
2	5
22	1
23	2
24	3
25	4
26	5
27	6
28	7
select seq1.currval, seq2.nextval, seq1.nextval from t1 where t1.ida in (select age from t1);
currval	nextval	nextval
29	8	29
30	9	30
31	10	31
32	11	32
33	12	33
select * from t1;
ida	age
15	17
16	18
17	19
18	20
19	21
20	22
21	23
select case when seq1.currval = 14 then 14 else seq1.nextval end from t1;
case when seq1.currval = 14 then 14 else seq1.nextval end
34
35
36
37
38
39
40
select case when seq1.nextval is null then true else false end from t1;
case when seq1.nextval is null then true else false end
0
0
0
0
0
0
0
select * from t1 where seq1.nextval > 5;
ERROR HY000: wrong position for sequence: 
select count(*) from t1 group by seq1.nextval, ida;
ERROR HY000: wrong position for sequence: 
select distinct ida, seq1.currval from t1;
ERROR HY000: wrong position for sequence: 
select * from t1 where t1.ida in (select seq1.nextval from t1);
ERROR HY000: wrong position for sequence: 
select * from t1 join t1 t2 on t1.ida = seq1.nextval;
ERROR HY000: wrong position for sequence: 
select seq1.nextval, ida from t1 union select ida, age from t1;
ERROR HY000: wrong position for sequence: 
select 1, ida from t1 union select ida, seq1.currval from t1;
ERROR HY000: wrong position for sequence: 
select seq1.currval from t1 order by ida;
ERROR HY000: wrong position for sequence: 
explain format=tree update t1 join t2 on t1.ida > t2.ida set t1.ida = seq1.nextval, t2.ida = seq2.nextval;
EXPLAIN
-> Update t1 (buffered), t2 (buffered)
    -> SEQUENCE
        -> Nested loop inner join  (cost=7.50 rows=21)
            -> Table scan on t1  (cost=0.95 rows=7)
            -> Filter: (t1.ida > t2.ida)  (cost=0.08 rows=3)
                -> Table scan on t2  (cost=0.08 rows=9)

explain format=tree update t1, t2 set t1.ida = seq1.nextval, t2.ida = seq1.nextval where t1.ida < 5;
EXPLAIN
-> Update t1 (immediate), t2 (buffered)
    -> SEQUENCE
        -> Nested loop inner join  (cost=3.30 rows=21)
            -> Filter: (t1.ida < 5)  (cost=0.95 rows=2)
                -> Table scan on t1  (cost=0.95 rows=7)
            -> Table scan on t2  (cost=0.49 rows=9)

update t1 set ida = seq1.nextval, age = (select seq2.nextval from dual) where ida = 15;
ERROR HY000: wrong position for sequence: 
insert into t1 values(seq1.currval,seq1.currval),(seq1.currval,seq1.currval);
insert into t1 values(seq1.nextval,seq1.currval),(seq1.nextval,seq1.currval);
drop table t1, t2;
drop sequence seq1;
drop sequence seq2;
[#### test bug8528 start ####]
create table t1(c1 varchar(20), c2 varchar(20));
insert into t1 values('11', 'aa'),('22', 'bb');
create sequence seq2 start with 2 increment by 2 minvalue 1 maxvalue 1000000 cycle cache 10 order;
select c1, row_number() over (partition by seq2.nextval order by t1.c2) from t1;
ERROR HY000: wrong position for sequence: window partition by
select c1, row_number() over (order by seq2.nextval) from t1;
ERROR HY000: wrong position for sequence: window order by
select * from t1 order by seq2.nextval;
ERROR HY000: wrong position for sequence: 
select sum(seq2.nextval) from t1;
ERROR HY000: wrong position for sequence: sum
select max(seq2.nextval) from t1;
ERROR HY000: wrong position for sequence: max
select FIRST_VALUE(seq2.nextval) OVER (order by t1.c2) from t1;
ERROR HY000: wrong position for sequence: first_value
select FIRST_VALUE(max(seq2.nextval)) OVER (order by t1.c2) from t1;
ERROR HY000: wrong position for sequence: max
select c1, seq2.nextval, row_number() over (order by t1.c2) from t1;
c1	nextval	row_number() over (order by t1.c2)
11	2	1
22	4	2
drop table t1;
drop sequence seq2;
[#### test bug8528 end ####]
[#### test bug8742 start ####]
create table t1(c1 varchar(20), c2 varchar(20));
insert into t1 values('11', 'aa'),('22', 'bb'), ('33', 'aa'), ('44', 'bb');
create table t2(c1 varchar(20), c2 varchar(20));
insert into t2 select * from t1;
create sequence seq2 start with 2 increment by 2 minvalue 1 maxvalue 1000000 cycle cache 10 order;
select t1.c1, t2.c2, seq2.nextval, row_number() over (partition by t1.c1 order by t1.c2) from t1, t2 where t1.c1 = t2.c1 and t1.c2 = t2.c2;
c1	c2	nextval	row_number() over (partition by t1.c1 order by t1.c2)
11	aa	2	1
22	bb	4	1
33	aa	6	1
44	bb	8	1
select t1.c1, t2.c2, seq2.nextval, row_number() over (partition by t1.c2 order by t1.c1) from t1, t2 where t1.c1 = t2.c1 and t1.c2 = t2.c2;
c1	c2	nextval	row_number() over (partition by t1.c2 order by t1.c1)
11	aa	10	1
33	aa	12	2
22	bb	14	1
44	bb	16	2
select t1.c1, t2.c2, seq2.nextval, row_number() over (order by t1.c1) from t1, t2 where t1.c1 = t2.c1 and t1.c2 = t2.c2;
c1	c2	nextval	row_number() over (order by t1.c1)
11	aa	18	1
22	bb	20	2
33	aa	22	3
44	bb	24	4
select t1.c1, t2.c2, seq2.nextval, row_number() over (partition by t1.c2) from t1, t2 where t1.c1 = t2.c1 and t1.c2 = t2.c2;
c1	c2	nextval	row_number() over (partition by t1.c2)
11	aa	26	1
33	aa	28	2
22	bb	30	1
44	bb	32	2
select seq2.nextval, FIRST_VALUE(t1.c1) OVER (partition by t1.c1 order by t1.c2) from t1, t2 where t1.c1 = t2.c1 and t1.c2 = t2.c2;
nextval	FIRST_VALUE(t1.c1) OVER (partition by t1.c1 order by t1.c2)
34	11
36	22
38	33
40	44
select seq2.nextval, FIRST_VALUE(t1.c1) OVER (partition by t1.c2 order by t1.c1) from t1, t2 where t1.c1 = t2.c1 and t1.c2 = t2.c2;
nextval	FIRST_VALUE(t1.c1) OVER (partition by t1.c2 order by t1.c1)
42	11
44	11
46	22
48	22
drop table t1;
drop table t2;
drop sequence seq2;
[#### test bug8742 end ####]

[######### test dml in sp #########]
create table t1(c1 int primary key, c2 int);
create sequence seq;

[# test prepared statement(similar in sp)]
prepare sql1 from 'insert into t1 values (seq.nextval,seq.currval)';
execute sql1;
execute sql1;
execute sql1;
select * from t1;
c1	c2
1	1
2	2
3	3
prepare sql2 from 'update t1 set c1=seq.currval, c2 = seq.nextval';
execute sql2;
select * from t1;
c1	c2
4	4
5	5
6	6
execute sql2;
select * from t1;
c1	c2
7	7
8	8
9	9
execute sql2;
select * from t1;
c1	c2
10	10
11	11
12	12
truncate table t1;
deallocate prepare sql1;
deallocate prepare sql2;

[# test in sp(procedure,function,trigger)]
create procedure sp1()
begin
insert into t1 values(seq.nextval, seq.currval);
end;$$
create procedure sp2()
begin
update t1 set c1=seq.currval, c2=seq.nextval;
end;$$
call sp1();
call sp1();
call sp1();
select * from t1;
c1	c2
13	13
14	14
15	15
call sp2();
select * from t1;
c1	c2
16	16
17	17
18	18
call sp2();
select * from t1;
c1	c2
19	19
20	20
21	21
call sp2();
select * from t1;
c1	c2
22	22
23	23
24	24
drop procedure sp1;
drop procedure sp2;

[# bugfix 6679: http://zbox.greatdb.com/zentao/bug-view-6679.html]
select lpad(seq.nextval, 18, 0);
lpad(seq.nextval, 18, 0)
000000000000000025
drop table t1;
drop sequence seq;

[# bugfix 7472:http://zbox.greatdb.com/zentao/bug-view-7472.html]
drop procedure if exists p1;
Warnings:
Note	1305	PROCEDURE test.p1 does not exist
drop table if exists t1;
Warnings:
Note	1051	Unknown table 'test.t1'
create table t1(i int);
create procedure p1()
begin
declare max int;
drop sequence if exists myseq;
create sequence myseq start with 1 increment by 1;
set @max=(select myseq.nextval from dual);
end$$
call p1();
ERROR HY000: wrong position for sequence: 
drop sequence myseq;
drop procedure p1;
drop table t1;

[# bugfix 7453: http://zbox.greatdb.com/zentao/bug-view-7453.html]
delete from mysql.greatdb_sequences_persist;
drop sequence if exists myseq;
Warnings:
Note	8583	sequence 'test.myseq' not exists
create sequence myseq minvalue 1000 start with 1000 maxvalue 10000 increment by 1000;
select myseq.nextval from dual;
nextval
1000
select myseq.currval from dual;
currval
1000
alter sequence myseq maxvalue 6000;
ERROR HY000: alter sequence failed, cause "currval" should between MINVALUE and MAXVALUE!
drop sequence if exists myseq;
create sequence myseq minvalue 1000 start with 1000 maxvalue 10000 increment by 1000;
drop sequence myseq;

[# bugfix 7617:http://zbox.greatdb.com/zentao/bug-view-7617.html]
drop sequence if exists myseq;
Warnings:
Note	8583	sequence 'test.myseq' not exists
create sequence myseq start with 1;
drop view if exists v1;
Warnings:
Note	1051	Unknown table 'test.v1'
create view v1 as select myseq.nextval from dual;
ERROR HY000: View's SELECT refers to a sequence 'myseq'
drop sequence myseq;

[# bugfix 8144:http://zbox.greatdb.com/zentao/bug-view-8144.html]
[sequence in cursor]
create table t1(id int);
insert into t1 values (1);
create sequence myseq;
select @@sql_mode into @sql_mode_saved;
set sql_mode=oracle;
CREATE or replace PROCEDURE p1() as
a int;
cursor c2 is select myseq.nextval from t1;
begin 
open c2;
loop
fetch c2 into a; 
exit when c2%notfound; 
select a; 
end loop;
end;$$
call p1();
a
1
call p1();
a
2
drop sequence myseq;
drop procedure p1;
drop table t1;
set @@sql_mode = @sql_mode_saved;

[# bugfix 7455:http://zbox.greatdb.com/zentao/bug-view-7455.html]
drop sequence if exists seq_cycle;
Warnings:
Note	8583	sequence 'test.seq_cycle' not exists
create sequence seq_cycle increment by 1 start with 10 minvalue 5 cycle;
ERROR HY000: create sequence failed, cause ascending sequences that CYCLE must specify MAXVALUE!

[# bugfix 7448:http://zbox.greatdb.com/zentao/bug-view-7448.html]
CREATE SEQUENCE MYSEQ MINVALUE 1 START WITH 10000 MAXVALUE 15000 INCREMENT BY 6000 CYCLE CACHE 2;
drop sequence MYSEQ;
CREATE SEQUENCE MYSEQ MINVALUE 1 START WITH 10000 MAXVALUE 15000 INCREMENT BY 6000 CYCLE CACHE 10;
ERROR HY000: create sequence failed, cause number to CACHE must be less than one cycle!
[# bugfix 8822:http://zbox.greatdb.com/zentao/bug-view-8822.html]
CREATE SEQUENCE seq1;
select (seq1.nextval%(seq1.nextval+1))*rownum from dual connect by level<2;
(seq1.nextval%(seq1.nextval+1))*rownum
1
drop sequence seq1;
[# bugfix 7431:http://zbox.greatdb.com/zentao/bug-view-7431.html]
CREATE SEQUENCE myseq MINVALUE 1 START WITH 1 NOMAXVALUE INCREMENT BY 1 NOCYCLE CACHE 30;
select myseq.nextval from dual connect by level<10;
nextval
1
2
3
4
5
6
7
8
9
drop sequence myseq;
CREATE SEQUENCE myseq ;
select myseq.nextval,sys_connect_by_path(myseq.nextval,'->') from dual connect by level<10;
nextval	sys_connect_by_path(myseq.nextval,'->')
1	->
2	->->1
3	->->1->2
4	->->1->2->3
5	->->1->2->3->4
6	->->1->2->3->4->5
7	->->1->2->3->4->5->6
8	->->1->2->3->4->5->6->7
9	->->1->2->3->4->5->6->7->8
drop sequence myseq;
create sequence seq minvalue -10 maxvalue 10 increment by 1 start with -9;
select seq.nextval;
nextval
-9
drop sequence seq;
create sequence xx;
select xx.nextval;
nextval
1
alter sequence xx  Minvalue 15;
ERROR HY000: alter sequence failed, cause alter MINVALUE can't greater than "currval" 
drop sequence xx;
[# bugfix 9419: enable using sequence for multi table update]
create table t1(c1 int primary key, c2 varchar(64));
create table t2(c1 int primary key, c2 varchar(64));
create sequence seq;
insert into t1 values (1,1),(2,2),(3,3),(4,4),(5,5);
insert into t2 values (1,1),(2,2),(3,3),(4,4),(5,5);
explain
update t1,t2
set t1.c2=concat(seq.currval,'_',seq.nextval), t2.c2=concat(seq.currval,'_',seq.nextval)
where t1.c1=t2.c1;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	UPDATE	t1	NULL	ALL	PRIMARY	NULL	NULL	NULL	5	100.00	NULL
1	UPDATE	t2	NULL	eq_ref	PRIMARY	PRIMARY	4	test.t1.c1	1	100.00	NULL
Warnings:
Note	1003	update `test`.`t1` join `test`.`t2` set `test`.`t1`.`c2` = concat(`test`.`seq`.currval,'_',`test`.`seq`.nextval),`test`.`t2`.`c2` = concat(`test`.`seq`.currval,'_',`test`.`seq`.nextval) where (`test`.`t2`.`c1` = `test`.`t1`.`c1`)
explain format=tree
update t1,t2
set t1.c2=concat(seq.currval,'_',seq.nextval), t2.c2=concat(seq.currval,'_',seq.nextval)
where t1.c1=t2.c1;
EXPLAIN
-> Update t1 (immediate), t2 (buffered)
    -> SEQUENCE
        -> Nested loop inner join  (cost=2.50 rows=5)
            -> Table scan on t1  (cost=0.75 rows=5)
            -> Single-row index lookup on t2 using PRIMARY (c1=t1.c1)  (cost=0.27 rows=1)

update t1,t2
set t1.c2=concat(seq.currval,'_',seq.nextval), t2.c2=concat(seq.currval,'_',seq.nextval)
where t1.c1=t2.c1;
select * from t1;
c1	c2
1	1_1
2	2_2
3	3_3
4	4_4
5	5_5
select * from t2;
c1	c2
1	1_1
2	2_2
3	3_3
4	4_4
5	5_5
drop table t1,t2;
drop sequence seq;
[# bugfix 7431:http://zbox.greatdb.com/zentao/bug-view-7431.html]
create sequence q1;
select q1.nextval;
nextval
1
set @v=q1.currval;
select @v;
@v
1
drop sequence q1;
create sequence q1;
select q1.nextval;
nextval
1
set sql_mode=oracle;
declare
v int;
begin
v:= q1.currval;
select v;
end;
$$
v
1
drop sequence q1;
create sequence q1;
set @n=q1.nextval;
select @n;
@n
1
set @a=q1.nextval,@b=q1.nextval;
select @a,@b;
@a	@b
2	2
set @a=q1.nextval,@b=q1.currval;
select @a,@b;
@a	@b
3	3
drop sequence q1;
CREATE TABLE seq_windows (
name VARCHAR2(20) PRIMARY KEY,
score INT NOT NULL,
team varchar2(2)
);
INSERT INTO
seq_windows(name, score,team)
VALUES
('Smith',81,'2');
INSERT INTO
seq_windows(name, score,team)
VALUES
('Jones',55,'2');
INSERT INTO
seq_windows(name, score,team)
VALUES
('Williams',55,'1');
INSERT INTO
seq_windows(name, score,team)
VALUES
('Taylor',62,'3');
INSERT INTO
seq_windows(name, score,team)
VALUES
('Brown',62,'2');
INSERT INTO
seq_windows(name, score,team)
VALUES
('Davies',84,'1');
INSERT INTO
seq_windows(name, score,team)
VALUES
('Evans',87,'2');
INSERT INTO
seq_windows(name, score,team)
VALUES
('Wilson',72,'2');
INSERT INTO
seq_windows(name, score,team)
VALUES
('Thomas',72,'1');
INSERT INTO
seq_windows(name, score,team)
VALUES
('小张',100,'3');
CREATE SEQUENCE seq_table_windows
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;
select
seq_table_windows.nextval, rownum,
ROW_NUMBER() OVER (ORDER BY score) row_num,
RANK() OVER (PARTITION BY team ORDER BY score) rank_val,name,score,team
from seq_windows where rownum < 11.5425;
nextval	rownum	row_num	rank_val	name	score	team
1	8	2	1	Williams	55	1
2	7	5	2	Thomas	72	1
3	2	8	3	Davies	84	1
4	4	1	1	Jones	55	2
5	1	3	2	Brown	62	2
6	9	6	3	Wilson	72	2
7	5	7	4	Smith	81	2
8	3	9	5	Evans	87	2
9	6	4	1	Taylor	62	3
10	10	10	2	小张	100	3
select
seq_table_windows.nextval + 1,
ROW_NUMBER() OVER (ORDER BY score) row_num
from seq_windows ;
seq_table_windows.nextval + 1	row_num
12	1
13	2
14	3
15	4
16	5
17	6
18	7
19	8
20	9
21	10
select
seq_table_windows.nextval + score,score,
ROW_NUMBER() OVER (ORDER BY score) row_num
from seq_windows ;
seq_table_windows.nextval + score	score	row_num
76	55	1
77	55	2
85	62	3
86	62	4
97	72	5
98	72	6
108	81	7
112	84	8
116	87	9
130	100	10
select
seq_table_windows.nextval + score,
ROW_NUMBER() OVER (ORDER BY score) row_num
from seq_windows ;
seq_table_windows.nextval + score	row_num
86	1
87	2
95	3
96	4
107	5
108	6
118	7
122	8
126	9
140	10
drop sequence seq_table_windows;
drop table seq_windows;
CREATE SEQUENCE id_seq;
create procedure sp2()
AS
id int;
BEGIN
id := id_seq.NEXTVAL;
select id ;
END;
//
create procedure sp3()
AS
id int;
BEGIN
id := id_seq.currval;
select id ;
END;
//
call sp3;
ERROR HY000: read sequence value failed, cause currval is not yet defined in this session
call sp2;
id 
1
call sp3;
id 
1
call sp2;
id 
2
call sp2;
id 
3
select id_seq.nextval;
nextval
4
call sp2;
id 
5
call sp3;
id 
5
drop procedure sp2;
drop procedure sp3;
create function f2 RETURN INT
AS
BEGIN
return id_seq.NEXTVAL; 
END;
//
create function f3  RETURN INT
AS
BEGIN
return id_seq.currval; 
END;
//
select f2() from dual;
f2()
6
select f2() from dual;
f2()
7
select f3() from dual;
f3()
7
select f2() from dual;
f2()
8
select f3() from dual;
f3()
8
drop function f2;
drop function f3;
drop sequence id_seq;
CREATE TABLE ta1 (
id NUMBER,
name VARCHAR2(50)
);
CREATE SEQUENCE id_seq START WITH 1 INCREMENT BY 1 NOCACHE;
CREATE TRIGGER id_trigger
BEFORE INSERT ON ta1
FOR EACH ROW
BEGIN
:NEW.id := id_seq.NEXTVAL;
END;
//
INSERT INTO ta1 (name) VALUES ('Alice');
INSERT INTO ta1 (name) VALUES ('Alice');
INSERT INTO ta1 (name) VALUES ('Alice');
select * from ta1;
id	name
1	Alice
2	Alice
3	Alice
drop TRIGGER id_trigger;
drop table ta1;
drop sequence id_seq;
[# bugfix 10096: sequence memory leak, caused by length of "test.seq_backend" > 15]
create sequence seq_backend;
select seq_backend.nextval;
nextval
1
select seq_backend.nextval;
nextval
2
drop sequence seq_backend;
