create table t1(
id bigint(10),
name varchar(16),
sale bigint(10),
operatime datetime
);
create table t2(
id bigint(10) ,
name varchar(16),
sale bigint(20)
);
insert into t2 values(1,'xiaohong',300);
insert into t2 values(2,'xiaoming',400);
insert into t2 values(3,'xiaoxiao',900);
insert into t2 values(4,'nathan',1200);
create table t3(
id bigint(10) primary key,
name varchar(16),
sale bigint(10),
operatime datetime
);
create table t4(
id bigint(10) primary key,
name varchar(16),
sale bigint(10),
operatime datetime
);
INSERT INTO t4 VALUES(1,'xiaohong',1000,str_to_date('19990101','%Y%m%d'));
INSERT INTO t4 VALUES(2,'xiaoming',500,str_to_date('19990102','%Y%m%d'));
insert into t1 values(1,'xiaohong',1000, str_to_date('19980101','%Y%m%d'));
insert into t1 values(2,'xiaoming',500,str_to_date('19980102','%Y%m%d'));
MERGE INTO t1
USING t2
ON ( t2.id = t1.id )
WHEN MATCHED THEN
UPDATE SET t1.name=t2.name, t1.sale=t2.sale
WHEN NOT MATCHED THEN
INSERT (t1.id, t1.name, t1.sale, t1.operatime)
VALUES (t2.id, t2.name, t2.sale, str_to_date('20210102','%Y%m%d'));
SELECT * FROM t1;
id	name	sale	operatime
1	xiaohong	300	1998-01-01 00:00:00
2	xiaoming	400	1998-01-02 00:00:00
3	xiaoxiao	900	2021-01-02 00:00:00
4	nathan	1200	2021-01-02 00:00:00
TRUNCATE TABLE t1;
insert into t1 values(1,'xiaohong',1000, str_to_date('19980101','%Y%m%d'));
insert into t1 values(2,'xiaoming',500,str_to_date('19980102','%Y%m%d'));
MERGE INTO t1
USING t2
ON ( t2.id = t1.id )
WHEN MATCHED THEN
UPDATE SET t1.name=t2.name, t1.sale=t2.sale WHERE t1.id=1
WHEN NOT MATCHED THEN
INSERT (t1.id, t1.name, t1.sale, t1.operatime)
VALUES (t2.id, t2.name, t2.sale, str_to_date('20210102','%Y%m%d'));
SELECT * FROM t1;
id	name	sale	operatime
1	xiaohong	300	1998-01-01 00:00:00
2	xiaoming	500	1998-01-02 00:00:00
3	xiaoxiao	900	2021-01-02 00:00:00
4	nathan	1200	2021-01-02 00:00:00
TRUNCATE TABLE t1;
insert into t1 values(1,'xiaohong',1000, str_to_date('19980101','%Y%m%d'));
insert into t1 values(2,'xiaoming',500,str_to_date('19980102','%Y%m%d'));
MERGE INTO t1
USING t2
ON ( t2.id = t1.id )
WHEN MATCHED THEN
UPDATE SET t1.name=t2.name, t1.sale=t2.sale
WHEN NOT MATCHED THEN
INSERT
VALUES (t2.id, t2.name, t2.sale, str_to_date('20210102','%Y%m%d'));
SELECT * FROM t1;
id	name	sale	operatime
1	xiaohong	300	1998-01-01 00:00:00
2	xiaoming	400	1998-01-02 00:00:00
3	xiaoxiao	900	2021-01-02 00:00:00
4	nathan	1200	2021-01-02 00:00:00
TRUNCATE TABLE t1;
MERGE INTO t3
USING (SELECT * FROM t2 WHERE id <> 100) t4
ON ( 1 = 1)
WHEN MATCHED THEN
UPDATE SET
t3.name=t4.name,
t3.sale=t4.sale +t3.id +20
WHEN NOT MATCHED THEN
INSERT
VALUES (t4.id, t4.name, t4.sale +t4.id +10, str_to_date('20210102','%Y%m%d'));
SELECT * FROM t3;
id	name	sale	operatime
TRUNCATE TABLE t3;
MERGE INTO t3
USING (SELECT * FROM t2 WHERE id <> 100) t4
ON ( 1 = 0)
WHEN MATCHED THEN
UPDATE SET
t3.name=t4.name,
t3.sale=t4.sale +t3.id +20
WHEN NOT MATCHED THEN
INSERT
VALUES (t4.id, t4.name, t4.sale +t4.id +10, str_to_date('20210102','%Y%m%d'));
SELECT * FROM t3;
id	name	sale	operatime
1	xiaohong	311	2021-01-02 00:00:00
2	xiaoming	412	2021-01-02 00:00:00
3	xiaoxiao	913	2021-01-02 00:00:00
4	nathan	1214	2021-01-02 00:00:00
TRUNCATE TABLE t3;
INSERT INTO t3 VALUES(1,'xiaohong',1000, str_to_date('19991001','%Y%m%d'));
INSERT INTO t3 VALUES(2,'xiaoming',500, str_to_date('19990930','%Y%m%d'));
MERGE INTO t3
USING (SELECT * FROM t2 WHERE id <> 100) t4
ON (t3.id = t4.id)
WHEN MATCHED THEN
UPDATE SET
t3.name=t4.name,
t3.sale=t4.sale +t3.id +20
WHEN NOT MATCHED THEN
INSERT
VALUES (t4.id, t4.name, t4.sale +t4.id +10, str_to_date('20210101','%Y%m%d'));
SELECT * FROM t3;
id	name	sale	operatime
1	xiaohong	321	1999-10-01 00:00:00
2	xiaoming	422	1999-09-30 00:00:00
3	xiaoxiao	913	2021-01-01 00:00:00
4	nathan	1214	2021-01-01 00:00:00
TRUNCATE TABLE t3;
MERGE INTO t3
USING (SELECT * FROM t2 WHERE id <> 100) t4
ON (t3.id = t4.id)
WHEN NOT MATCHED THEN
INSERT
VALUES (t4.id, t4.name, t4.sale, str_to_date('20210101','%Y%m%d'))
WHERE id<>1;
ERROR HY000: column t3.id could not be used in INSERT WHERE clause
set sql_mode=oracle;
create view v_t3 as select * from t3;
MERGE INTO v_t3
USING t2
ON (t3.id = t2.id)
WHEN NOT MATCHED THEN
INSERT
VALUES (t2.id, t2.name, t2.sale, str_to_date('20210101','%Y%m%d'));
ERROR HY000: The target table v_t3 of the MERGE INTO is not insertable-into
drop view v_t3;
CREATE TABLE bonuses (employee_id NUMBER, bonus NUMBER DEFAULT 100);
insert into bonuses values(100, 100);
insert into bonuses values(200, 200);
CREATE VIEW v_bonuses AS SELECT employee_id,bonus FROM bonuses;
MERGE INTO v_bonuses a
USING (SELECT * FROM bonuses) b
ON (a.employee_id = b.employee_id)
WHEN MATCHED THEN
UPDATE SET a.bonus=b.bonus+1
DELETE WHERE (b.bonus < 100);
ERROR HY000: DELETE is not supported when target table is VIEW
MERGE INTO v_bonuses a
USING (SELECT * FROM bonuses) b
ON (a.employee_id = b.employee_id)
WHEN MATCHED THEN
UPDATE SET a.bonus=b.bonus+1;
SELECT * FROM v_bonuses;
employee_id	bonus
100	101
200	201
DROP VIEW v_bonuses;
DROP TABLE bonuses;
set sql_mode=default;
PREPARE stmt1 FROM 'MERGE INTO t3
USING t2
ON (t2.id = t3.id)
WHEN NOT MATCHED THEN
INSERT
VALUES (t2.id, t2.name, t2.sale, str_to_date(''20210101'',''%Y%m%d''))';
execute stmt1;
select * from t3;
id	name	sale	operatime
1	xiaohong	300	2021-01-01 00:00:00
2	xiaoming	400	2021-01-01 00:00:00
3	xiaoxiao	900	2021-01-01 00:00:00
4	nathan	1200	2021-01-01 00:00:00
truncate t3;
INSERT INTO t3 VALUES(1,'xiaohong',1000, str_to_date('19991001','%Y%m%d'));
INSERT INTO t3 VALUES(2,'xiaoming',500, str_to_date('19990930','%Y%m%d'));
create procedure p1()
merge into t3
using t2
on ( t2.id = t3.id )
when matched then
update set t3.name=t2.name, t3.sale=t2.sale
when not matched then
insert (t3.id, t3.name, t3.sale, t3.operatime)
values (t2.id, t2.name, t2.sale, str_to_date('20210102','%Y%m%d'));
call p1();
select * from t3;
id	name	sale	operatime
1	xiaohong	300	1999-10-01 00:00:00
2	xiaoming	400	1999-09-30 00:00:00
3	xiaoxiao	900	2021-01-02 00:00:00
4	nathan	1200	2021-01-02 00:00:00
drop procedure p1;
truncate table t3;
create procedure p1(x int) merge: loop if x=0 THEN leave merge; end if; set x=x+1; end loop merge//
drop procedure p1//
create procedure p1()
begin
merge into t3
using t2
on ( t2.id = t3.id )
when matched then
update set t3.name=t2.name, t3.sale=t2.sale
when not matched then
insert (t3.id, t3.name, t3.sale, t3.operatime)
values (t2.id, t2.name, t2.sale, str_to_date('20210102','%Y%m%d'));
end; //
INSERT INTO t3 VALUES(1,'xiaohong',1000, str_to_date('19991001','%Y%m%d'));
INSERT INTO t3 VALUES(2,'xiaoming',500, str_to_date('19990930','%Y%m%d'));
call p1();
select * from t3;
id	name	sale	operatime
1	xiaohong	300	1999-10-01 00:00:00
2	xiaoming	400	1999-09-30 00:00:00
3	xiaoxiao	900	2021-01-02 00:00:00
4	nathan	1200	2021-01-02 00:00:00
drop procedure p1;
truncate table t3;
create procedure p1(x int) begin
merge: loop if x=0 THEN leave merge; end if; set x=x+1; end loop merge ;
end; //
drop procedure p1//
set sql_mode=oracle;
create procedure p1() as
begin
merge into t3
using t2
on ( t2.id = t3.id )
when matched then
update set t3.name=t2.name, t3.sale=t2.sale
when not matched then
insert (t3.id, t3.name, t3.sale, t3.operatime)
values (t2.id, t2.name, t2.sale, str_to_date('20210102','%Y%m%d'));
end; //
INSERT INTO t3 VALUES(1,'xiaohong',1000, str_to_date('19991001','%Y%m%d'));
INSERT INTO t3 VALUES(2,'xiaoming',500, str_to_date('19990930','%Y%m%d'));
call p1();
select * from t3;
id	name	sale	operatime
1	xiaohong	300	1999-10-01 00:00:00
2	xiaoming	400	1999-09-30 00:00:00
3	xiaoxiao	900	2021-01-02 00:00:00
4	nathan	1200	2021-01-02 00:00:00
drop procedure p1;
truncate table t3;
drop table t1;
drop table t2;
create table t1(c1 number primary key, c2 number, c3 number, c4 number);
create table t2(c1 number primary key, c2 number, c3 number, c4 number);
insert into t1 values (1,1,1,1), (2,2,2,2), (3,3,3,3), (4,4,4,4);
insert into t2 values (1,1,1,1);
merge into t2 using t1 on (t1.c1=t2.c1)
when matched then
update set t2.c4=t1.c4+1000
when not matched then
insert (t2.c1, t2.c3) values (t1.c1+1, t1.c3);
select * from t2;
c1	c2	c3	c4
1	1	1	1001
3	NULL	2	NULL
4	NULL	3	NULL
5	NULL	4	NULL
drop table t1;
drop table t4;
create table t1 (c1 int primary key, c2 int, c3 int, c4 int);
create table t4 (c1 int auto_increment primary key, c2 int, c3 int, c4 int);
insert into t1 values (1,1,1,1), (2,2,2,2), (3,3,3,3), (4,4,4,4);
insert into t4 values (1,1,1,1);
merge into t4 using t1 on (t1.c1=t4.c1)
when matched then
update set t4.c3=t1.c3+t4.c3, t4.c4=t1.c4+t4.c4
when not matched then
insert (c2,c3,c4) values (t1.c2,t1.c3,t1.c4);
select * from t4;
c1	c2	c3	c4
1	1	2	2
2	2	2	2
3	3	3	3
4	4	4	4
drop table t1;
create table t1 (id bigint(10), name varchar(16), sale bigint(10), op bigint);
insert into t1 values (NULL, NULL, NULL, 1234);
merge into t1
using t1 t2
on (t2.id = t1.id)
when not matched then
insert (t1.id, t1.name, sale, op)
value (t2.id, t2.name, t2.sale, 4321);
select * from t1;
id	name	sale	op
NULL	NULL	NULL	1234
NULL	NULL	NULL	4321
drop table t1;
create table t1 (id bigint(10), name varchar(16), sale bigint(10), op bigint);
insert into t1 values (NULL, NULL, NULL, 1234);
merge into t1 using t1 t2 on (t2.id = t1.id)
when not matched then
insert (t1.id, t1.name, sale, op)
value (t2.id, t1.name, t2.sale, 4321);
ERROR 42000: This version of MySQL doesn't yet support 'VALUES clause refers target table'
merge into t1 using t1 t2 on (t2.id = t1.id)
when not matched then
insert (t1.id, t1.name, sale, op)
value (t2.id, name, t2.sale, 4321);
ERROR 42000: This version of MySQL doesn't yet support 'VALUES clause refers target table'
drop table t1;
drop table t2;
create table t1(id number,val varchar(100));
insert into t1 values (1,'101');
insert into t1 values (2,'102');
create table t2(id number,val varchar(100));
insert into t2 values (2,'103');
insert into t2 values (2,'104');
select *,'before' from t1 order by id;
id	val	before
1	101	before
2	102	before
select *,'before' from t2 order by id;
id	val	before
2	103	before
2	104	before
merge into t1
using t2
on(t1.id=t2.id)
when matched then
update set t1.val = t2.val ;
ERROR HY000: unable to get a stable set of rows in the source tables
select *,'after' from t1 order by id;
id	val	after
1	101	after
2	102	after
drop table t1;
drop table t2;
create table t1 (a number, b varchar(100));
create table t2 (a number, b varchar(100));
merge into t2 using t1 on (1=1)
when matched then update set t2.a = t1.b
when not matched then insert (a, b) values (1, '2');
select *,'phase1' from t2;
a	b	phase1
truncate table t2;
insert into t1 values (1, '10');
insert into t1 values (1, '20');
select *,'phase2 before' from t2 right outer join t1 on (1=1);
a	b	a	b	phase2 before
NULL	NULL	1	10	phase2 before
NULL	NULL	1	20	phase2 before
merge into t2 using t1 on (1=1)
when matched then update set t2.b = t1.b
when not matched then insert (a, b) values (t1.a, t1.b);
select *,'phase2 after' from t2;
a	b	phase2 after
insert into t2 values (1, '30');
select *,'phase3 before' from t1 right outer join t2 on (t1.a=t2.a);
a	b	a	b	phase3 before
1	20	1	30	phase3 before
1	10	1	30	phase3 before
select *,'phase3 t1' from t1;
a	b	phase3 t1
1	10	phase3 t1
1	20	phase3 t1
select *,'phase3 t2' from t2;
a	b	phase3 t2
1	30	phase3 t2
merge into t2 using t1 on (t1.a=t2.a)
when matched then update set t2.b = t1.b
when not matched then insert (a, b) values (1, '2');
ERROR HY000: unable to get a stable set of rows in the source tables
select *,'phase3 after' from t1 right outer join t2 on (t1.a=t2.a);
a	b	a	b	phase3 after
1	20	1	30	phase3 after
1	10	1	30	phase3 after
select *,'phase3 t1' from t1;
a	b	phase3 t1
1	10	phase3 t1
1	20	phase3 t1
select *,'phase3 t2' from t2;
a	b	phase3 t2
1	30	phase3 t2
set sql_mode=default;
create table trglog (msg varchar(256));
drop table t1;
drop table t2;
create table t1(c1 int auto_increment primary key, c2 int, c3 int, c4 int);
create table t2(c1 int auto_increment primary key, c2 int, c3 int, c4 int);
insert into t1 values (1,1,1,1),(2,2,2,2),(3,3,3,3),(4,4,4,4),(5,5,5,5);
insert into t2 values (1,1,1,1),(2,2,2,2);
create trigger before_update_t2
before update
on t2 for each row
insert into trglog values (concat('before-update-t2, old.c3 ',
OLD.c3, ' new.c3 ', NEW.c3));
create trigger after_update_t2
after update
on t2 for each row
insert into trglog values (concat('after-update-t2, old.c3 ',
OLD.c3, ' new.c3 ', NEW.c3));
create trigger before_insert_t2
before insert
on t2 for each row
insert into trglog values (concat('before-insert-t2, new.c1 ',
NEW.c1));
create trigger after_insert_t2
after insert
on t2 for each row
insert into trglog values (concat('after-insert-t2, new.c1 ',
NEW.c1));
create trigger before_delete_t2
before delete
on t2 for each row
insert into trglog values (concat('before-delete-t2, old.c3 ',
OLD.c3, ' old.c4 ', OLD.c4));
create trigger after_delete_t2
after delete
on t2 for each row
insert into trglog values (concat('after-delete-t2, old.c3 ',
OLD.c3, ' old.c4 ', OLD.c4));
merge into t2 using t1 on (t1.c1=t2.c1)
when matched then update set t2.c3=t1.c3+t2.c3, t2.c4=t1.c4+t2.c4
when not matched then insert (c2,c3,c4) values (t1.c2,t1.c3,t1.c4);
select * from t2;
c1	c2	c3	c4
1	1	2	2
2	2	4	4
3	3	3	3
4	4	4	4
5	5	5	5
insert into trglog values ('----- matched/not matched above');
delete from t2 where c1>2;
merge into t2 using t1 on (t1.c1=t2.c1)
when matched then update set t2.c3=t1.c3+t2.c3, t2.c4=t1.c4+t2.c4 delete where t2.c4=6;
select * from t2;
c1	c2	c3	c4
1	1	3	3
insert into trglog values ('----- matched above');
delete from t2 where c1>2;
merge into t2 using t1 on (t1.c1=t2.c1)
when not matched then insert (c2,c3,c4) values (t1.c2,t1.c3,t1.c4);
select * from t2;
c1	c2	c3	c4
1	1	3	3
6	2	2	2
7	3	3	3
8	4	4	4
9	5	5	5
insert into trglog values ('----- not matched above');
select * from trglog;
msg
before-update-t2, old.c3 1 new.c3 2
after-update-t2, old.c3 1 new.c3 2
before-update-t2, old.c3 2 new.c3 4
after-update-t2, old.c3 2 new.c3 4
before-insert-t2, new.c1 0
after-insert-t2, new.c1 3
before-insert-t2, new.c1 0
after-insert-t2, new.c1 4
before-insert-t2, new.c1 0
after-insert-t2, new.c1 5
----- matched/not matched above
before-delete-t2, old.c3 3 old.c4 3
after-delete-t2, old.c3 3 old.c4 3
before-delete-t2, old.c3 4 old.c4 4
after-delete-t2, old.c3 4 old.c4 4
before-delete-t2, old.c3 5 old.c4 5
after-delete-t2, old.c3 5 old.c4 5
before-update-t2, old.c3 2 new.c3 3
after-update-t2, old.c3 2 new.c3 3
before-update-t2, old.c3 4 new.c3 6
after-update-t2, old.c3 4 new.c3 6
before-delete-t2, old.c3 6 old.c4 6
after-delete-t2, old.c3 6 old.c4 6
----- matched above
before-insert-t2, new.c1 0
after-insert-t2, new.c1 6
before-insert-t2, new.c1 0
after-insert-t2, new.c1 7
before-insert-t2, new.c1 0
after-insert-t2, new.c1 8
before-insert-t2, new.c1 0
after-insert-t2, new.c1 9
----- not matched above
drop table trglog;
drop table if exists t1;
drop table if exists t2;
create table t1(c1 int auto_increment primary key, c2 int, c3 int, c4 int);
create table t2(c1 int auto_increment primary key, c2 int, c3 int, c4 int);
insert into t1 values (1,1,1,1),(2,2,2,2),(3,3,3,3),(4,4,4,4),(5,5,5,5);
insert into t2 values (1,1,1,1),(2,2,2,2);
merge into t2 using t1 on (t1.c1=t2.c1)
when matched then update set t2.c3=t1.c3+t2.c3, t2.c4=t1.c4+t2.c4
when not matched then insert values(t1.c1, t1.c2, t1.c3, t1.c4);
select * from t1;
c1	c2	c3	c4
1	1	1	1
2	2	2	2
3	3	3	3
4	4	4	4
5	5	5	5
select * from t2;
c1	c2	c3	c4
1	1	2	2
2	2	4	4
3	3	3	3
4	4	4	4
5	5	5	5
set sql_mode=oracle;
drop table if exists t1;
drop table if exists t2;
create table t1 (col number, col1 number, col2 number);
create table t2 (col number, col1 number, col2 number);
insert into t1 values (1, 2, 3), (2, 298, 3);
insert into t2 values (3, 2, 3), (4, 5, 6);
merge into t1 a using (select col, col2 from t2) a on (a.col='12')
when not matched then insert (a.col) values('123');
ERROR 23000: Column 'a.col' in on clause is ambiguous
select statement_digest_text('merge /*+ sql_mode=oracle */into t1 using t2 on (t2.id=t1.id) when matched then update set t1.name=concat(''up_name_'', t2.name);');
statement_digest_text('merge /*+ sql_mode=oracle */into t1 using t2 on (t2.id=t1.id) when matched then update set t1.name=concat(''up_name_'', t2.name);')
MERGE /*+ `sql_mode` = `oracle` */ INTO `t1` USING `t2` ON ( `t2` . `id` = `t1` . `id` ) WHEN MATCHED THEN UPDATE SET `t1` . `name` = `concat` ( ? , `t2` . `name` ) ;
select statement_digest_text('merge   /*+ sql_mode= oracle */into t1 using t2 on (t2.id=t1.id) when matched then update  set t1.name=concat(''up_name_'', t2.name );');
statement_digest_text('merge   /*+ sql_mode= oracle */into t1 using t2 on (t2.id=t1.id) when matched then update  set t1.name=concat(''up_name_'', t2.name );')
MERGE /*+ `sql_mode` = `oracle` */ INTO `t1` USING `t2` ON ( `t2` . `id` = `t1` . `id` ) WHEN MATCHED THEN UPDATE SET `t1` . `name` = `concat` ( ? , `t2` . `name` ) ;
drop table t1, t2, t3, t4;
create table t1 (id int, aval1 int, aval2 int);
create table t2 (id int, bval1 int, bval2 int, bval3 int);
insert into t1 values (1, 405, 45), (2, 401, 41), (3, 200, 20), (4, 400, 40);
insert into t2 (id, bval1, bval2) values (701, 405, 16), (704, 409, 14), (706, 403, 13), (709, 401, 12);
SELECT t2.id,t2.bval1,t2.bval2,
t1.id,t1.aval1
FROM t2
RIGHT JOIN t1
ON t2.bval1=t1.aval1;
id	bval1	bval2	id	aval1
701	405	16	1	405
709	401	12	2	401
NULL	NULL	NULL	3	200
NULL	NULL	NULL	4	400
explain analyze
merge into t2 using (select * from t1) b on (t2.bval1 = b.aval1)
when matched then update SET bval3 = b.aval2;
EXPLAIN
-> Update t2 (buffered)  (actual rows=0 loops=1)
    -> Nested loop left join  (rows=16) (actual rows=4 loops=1)
        -> Table scan on t1  (rows=4) (actual rows=4 loops=1)
        -> Filter: (t2.bval1 = t1.aval1)  (rows=4) (actual rows=0 loops=4)
            -> Table scan on t2  (rows=4) (actual rows=4 loops=4)

select * from t2;
id	bval1	bval2	bval3
701	405	16	NULL
704	409	14	NULL
706	403	13	NULL
709	401	12	NULL
merge into t2 using (select * from t1) b on (t2.bval1 = b.aval1)
when matched then update SET bval3 = b.aval2;
select * from t2;
id	bval1	bval2	bval3
701	405	16	45
704	409	14	NULL
706	403	13	NULL
709	401	12	41
drop table t1, t2;
# security check
create table t_merge_into_target(t_id int, t_name varchar2(16), t_sale int, t_operatime int);
insert into t_merge_into_target values(1, 'Cindy', 1000, 1000);
create table t_merge_into_driver(d_id int, d_name varchar2(16), d_sale int);
insert into t_merge_into_driver values(1, 'Cindy', 300);
insert into t_merge_into_driver values(20, 'James', 400);
insert into t_merge_into_driver values(30, 'John', 900);
insert into t_merge_into_driver values(40, 'Peter', 1200);
select * from t_merge_into_target;
t_id	t_name	t_sale	t_operatime
1	Cindy	1000	1000
select * from t_merge_into_driver;
d_id	d_name	d_sale
1	Cindy	300
20	James	400
30	John	900
40	Peter	1200
create user mergeinto@localhost identified by '';
grant select on test.* to 'mergeinto'@'localhost';
grant update on test.t_merge_into_target to 'mergeinto'@'localhost';
show grants for 'mergeinto'@'localhost';
Grants for mergeinto@localhost
GRANT USAGE ON *.* TO "mergeinto"@"localhost"
GRANT SELECT ON "test".* TO "mergeinto"@"localhost"
GRANT UPDATE ON "test"."t_merge_into_target" TO "mergeinto"@"localhost"
flush privileges;
merge into t_merge_into_target using t_merge_into_driver on (t_id = d_id)
when matched then
update set t_sale = t_sale + 1 delete where t_sale > 100
when not matched then
insert values (d_id, d_name, d_sale, 1020);
ERROR 42000: INSERT, DELETE command denied to user 'mergeinto'@'localhost' for table 't_merge_into_target'
merge into t_merge_into_target using t_merge_into_driver on (t_id = d_id)
when matched then
update set t_sale = t_sale + 1 delete where t_sale > 100;
ERROR 42000: DELETE command denied to user 'mergeinto'@'localhost' for table 't_merge_into_target'
merge into t_merge_into_target using t_merge_into_driver on (t_id = d_id)
when matched then
update set t_sale = t_sale + 1
when not matched then
insert values (d_id, d_name, d_sale, 1020);
ERROR 42000: INSERT command denied to user 'mergeinto'@'localhost' for table 't_merge_into_target'
merge into t_merge_into_target using t_merge_into_driver on (t_id = d_id)
when matched then
update set t_sale = t_sale + 1;
grant insert on test.t_merge_into_target to 'mergeinto'@'localhost';
show grants for 'mergeinto'@'localhost';
Grants for mergeinto@localhost
GRANT USAGE ON *.* TO "mergeinto"@"localhost"
GRANT SELECT ON "test".* TO "mergeinto"@"localhost"
GRANT INSERT, UPDATE ON "test"."t_merge_into_target" TO "mergeinto"@"localhost"
flush privileges;
merge into t_merge_into_target using t_merge_into_driver on (t_id = d_id)
when matched then
update set t_sale = t_sale + 1 delete where t_sale > 100
when not matched then
insert values (d_id, d_name, d_sale, 1020);
ERROR 42000: DELETE command denied to user 'mergeinto'@'localhost' for table 't_merge_into_target'
drop user mergeinto@localhost;
drop table t_merge_into_target;
drop table t_merge_into_driver;
