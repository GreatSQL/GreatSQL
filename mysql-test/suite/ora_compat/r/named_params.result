DROP SCHEMA IF EXISTS testsp;
CREATE SCHEMA testsp;
USE testsp;
SET sql_mode = oracle;
CREATE FUNCTION f1(a int, b int, c int) RETURN INTEGER
AS
BEGIN
RETURN a * b + c;
END|
CREATE FUNCTION f2(a bool, b int, c varchar(16)) RETURN VARCHAR(16)
AS
BEGIN
RETURN CONCAT(c , ':', a+b);
END|
CREATE PROCEDURE p1 (a int, b int, c int)
AS
BEGIN
SELECT a*b+c;
SELECT f1(a, b, c);
END|
CREATE PROCEDURE p2 (a bool, b int, c varchar(16))
AS
BEGIN
SELECT a*b+c;
SELECT f2(a, b, c);
END|
CALL p1(1, 2, 3);
a*b+c
5
f1(a, b, c)
5
SELECT f1(1, 2, 3);
f1(1, 2, 3)
5
SET sql_mode = oracle;
CALL p1(1, 2, 3);
a*b+c
5
f1(a, b, c)
5
CALL p1(1, 2, c=>3);
a*b+c
5
f1(a, b, c)
5
CALL p1(1, b=>2, c=>3);
a*b+c
5
f1(a, b, c)
5
CALL p1(a=>1, b=>3, c=>3);
a*b+c
6
f1(a, b, c)
6
CALL p1(b=>3, c=>3, a=>1);
a*b+c
6
f1(a, b, c)
6
CALL p2(true, 10, 'test');
a*b+c
10
f2(a, b, c)
test:11
CALL p2(true, b=>10, c=>'test');
a*b+c
10
f2(a, b, c)
test:11
CALL p2(true, c=>'test', b=>10);
a*b+c
10
f2(a, b, c)
test:11
CALL p2(a=>true, b=>10, c=>'test');
a*b+c
10
f2(a, b, c)
test:11
CALL p2(b=>10, c=> 'test', a=>true);
a*b+c
10
f2(a, b, c)
test:11
SELECT f1(1, 2, 3);
f1(1, 2, 3)
5
SELECT f1(1, 2, c=>3);
f1(1, 2, c=>3)
5
SELECT f1(1, b=>2, c=>3);
f1(1, b=>2, c=>3)
5
SELECT f1(a=>1, b=>3, c=>3);
f1(a=>1, b=>3, c=>3)
6
SELECT f1(b=>3, c=>3, a=>1);
f1(b=>3, c=>3, a=>1)
6
SELECT f2(true, 10, 'test');
f2(true, 10, 'test')
test:11
SELECT f2(true, b=>10, c=>'test');
f2(true, b=>10, c=>'test')
test:11
SELECT f2(true, c=>'test', b=>10);
f2(true, c=>'test', b=>10)
test:11
SELECT f2(a=>true, b=>10, c=>'test');
f2(a=>true, b=>10, c=>'test')
test:11
SELECT f2(b=>10, c=> 'test', a=>true);
f2(b=>10, c=> 'test', a=>true)
test:11
CALL p1(a=>f1(a=>1, b=>2, c=>3), b=>2, c=>f1(a=>3,b=>2, c=>1));
a*b+c
17
f1(a, b, c)
17
SET sql_mode = 'oracle';
CALL p1(1, 2, 3);
a*b+c
5
f1(a, b, c)
5
CALL p1(1, 2, c=>3);
a*b+c
5
f1(a, b, c)
5
CALL p1(1, b=>2, c=>3);
a*b+c
5
f1(a, b, c)
5
CALL p1(a=>1, b=>3, c=>3);
a*b+c
6
f1(a, b, c)
6
CALL p1(b=>3, c=>3, a=>1);
a*b+c
6
f1(a, b, c)
6
CALL p2(true, 10, 'test');
a*b+c
10
f2(a, b, c)
test:11
CALL p2(true, b=>10, c=>'test');
a*b+c
10
f2(a, b, c)
test:11
CALL p2(true, c=>'test', b=>10);
a*b+c
10
f2(a, b, c)
test:11
CALL p2(a=>true, b=>10, c=>'test');
a*b+c
10
f2(a, b, c)
test:11
CALL p2(b=>10, c=> 'test', a=>true);
a*b+c
10
f2(a, b, c)
test:11
SELECT f1(1, 2, 3);
f1(1, 2, 3)
5
SELECT f1(1, 2, c=>3);
f1(1, 2, c=>3)
5
SELECT f1(1, b=>2, c=>3);
f1(1, b=>2, c=>3)
5
SELECT f1(a=>1, b=>3, c=>3);
f1(a=>1, b=>3, c=>3)
6
SELECT f1(b=>3, c=>3, a=>1);
f1(b=>3, c=>3, a=>1)
6
SELECT f2(true, 10, 'test');
f2(true, 10, 'test')
test:11
SELECT f2(true, b=>10, c=>'test');
f2(true, b=>10, c=>'test')
test:11
SELECT f2(true, c=>'test', b=>10);
f2(true, c=>'test', b=>10)
test:11
SELECT f2(a=>true, b=>10, c=>'test');
f2(a=>true, b=>10, c=>'test')
test:11
SELECT f2(b=>10, c=> 'test', a=>true);
f2(b=>10, c=> 'test', a=>true)
test:11
CALL p1(a=>f1(a=>1, b=>2, c=>3), b=>2, c=>f1(a=>3,b=>2, c=>1));
a*b+c
17
f1(a, b, c)
17
EXPLAIN SELECT f1(1, 2, 3);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	No tables used
Warnings:
Note	1003	/* select#1 */ select "f1"(1,2,3) AS "f1(1, 2, 3)"
EXPLAIN SELECT f1(1, 2, c=>3);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	No tables used
Warnings:
Note	1003	/* select#1 */ select "f1"(1,2,3) AS "f1(1, 2, c=>3)"
EXPLAIN SELECT f1(1, b=>2, c=>3);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	No tables used
Warnings:
Note	1003	/* select#1 */ select "f1"(1,2,3) AS "f1(1, b=>2, c=>3)"
EXPLAIN SELECT f1(a=>1, b=>3, c=>3);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	No tables used
Warnings:
Note	1003	/* select#1 */ select "f1"(1,3,3) AS "f1(a=>1, b=>3, c=>3)"
EXPLAIN SELECT f1(b=>3, c=>3, a=>1);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	No tables used
Warnings:
Note	1003	/* select#1 */ select "f1"(1,3,3) AS "f1(b=>3, c=>3, a=>1)"
EXPLAIN SELECT f2(true, 10, 'test');
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	No tables used
Warnings:
Note	1003	/* select#1 */ select "f2"(true,10,'test') AS "f2(true, 10, 'test')"
EXPLAIN SELECT f2(true, b=>10, c=>'test');
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	No tables used
Warnings:
Note	1003	/* select#1 */ select "f2"(true,10,'test') AS "f2(true, b=>10, c=>'test')"
EXPLAIN SELECT f2(true, c=>'test', b=>10);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	No tables used
Warnings:
Note	1003	/* select#1 */ select "f2"(true,10,'test') AS "f2(true, c=>'test', b=>10)"
EXPLAIN SELECT f2(a=>true, b=>10, c=>'test');
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	No tables used
Warnings:
Note	1003	/* select#1 */ select "f2"(true,10,'test') AS "f2(a=>true, b=>10, c=>'test')"
EXPLAIN SELECT f2(b=>10, c=> 'test', a=>true);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	No tables used
Warnings:
Note	1003	/* select#1 */ select "f2"(true,10,'test') AS "f2(b=>10, c=> 'test', a=>true)"
SET sql_mode = oracle;
CALL p1();
ERROR HY000: Parameter 'a' is invalid for missing.
CALL p1(a=>1);
ERROR HY000: Parameter 'b' is invalid for missing.
CALL p1(a=>1, a=>1);
ERROR HY000: Parameter 'a' is invalid for duplicating.
CALL p1(a=>1, a=>1, a=>1, a=>1);
ERROR 42000: Incorrect number of arguments for PROCEDURE testsp.p1; expected 3, got 4
SELECT f1();
ERROR HY000: Parameter 'a' is invalid for missing.
SELECT f1(a=>1);
ERROR HY000: Parameter 'b' is invalid for missing.
SELECT f1(a=>1, a=>1);
ERROR HY000: Parameter 'a' is invalid for duplicating.
SELECT f1(a=>1, a=>1, a=>1, a=>1);
ERROR 42000: Incorrect number of arguments for FUNCTION testsp.f1; expected 3, got 4
CALL p1(a=>1, 2, 3);
ERROR HY000: In procedure p1, a named parameter was specified before a positional parameter.
CALL p1(1, b=>2, 3);
ERROR HY000: In procedure p1, a named parameter was specified before a positional parameter.
CALL p1(a=>1, b=>2, 3);
ERROR HY000: In procedure p1, a named parameter was specified before a positional parameter.
SELECT f1(a=>1, 2, 3);
ERROR HY000: In FUNCTION f1, a named parameter was specified before a positional parameter.
SELECT f1(1, b=>2, 3);
ERROR HY000: In FUNCTION f1, a named parameter was specified before a positional parameter.
SELECT f1(a=>1, b=>2, 3);
ERROR HY000: In FUNCTION f1, a named parameter was specified before a positional parameter.
CALL p1(a=>1, 2, 3);
ERROR HY000: In procedure p1, a named parameter was specified before a positional parameter.
CALL p1(1, 2, cc=>3);
ERROR HY000: In procedure p1, parameter 'cc' was invalid.
CALL p1(1, bb=>2, cc=>3);
ERROR HY000: In procedure p1, parameter 'bb' was invalid.
CALL p1(aa=>1, bb=>2, cc=>3);
ERROR HY000: In procedure p1, parameter 'aa' was invalid.
CALL p1(aa=>1, b=>2, cc=>3);
ERROR HY000: In procedure p1, parameter 'aa' was invalid.
CALL p1(a=>1, b=>2, cc=>3);
ERROR HY000: In procedure p1, parameter 'cc' was invalid.
SELECT f1(1, 2, cc=>3);
ERROR HY000: In FUNCTION f1, parameter 'cc' was invalid.
SELECT f1(1, bb=>2, cc=>3);
ERROR HY000: In FUNCTION f1, parameter 'bb' was invalid.
SELECT f1(aa=>1, bb=>2, cc=>3);
ERROR HY000: In FUNCTION f1, parameter 'aa' was invalid.
SELECT f1(aa=>1, b=>2, cc=>3);
ERROR HY000: In FUNCTION f1, parameter 'aa' was invalid.
SELECT f1(a=>1, b=>2, cc=>3);
ERROR HY000: In FUNCTION f1, parameter 'cc' was invalid.
CALL p1(b=>1, b=>2, c=>3);
ERROR HY000: In procedure p1, parameter 'a' was missed.
CALL p1(a=>1, a=>2, c=>3);
ERROR HY000: In procedure p1, parameter 'b' was missed.
CALL p1(a=>1, a=>2, a=>3);
ERROR HY000: In procedure p1, parameter 'b' was missed.
CALL p1(1, a=>2, a=>3);
ERROR HY000: In procedure p1, parameter 'b' was missed.
CALL p1(1, a=>2, c=>3);
ERROR HY000: In procedure p1, parameter 'b' was missed.
CALL p1(1, a=>2, b=>3);
ERROR HY000: In procedure p1, parameter 'c' was missed.
SELECT f1(b=>1, b=>2, c=>3);
ERROR HY000: In FUNCTION f1, parameter 'a' was missed.
SELECT f1(a=>1, a=>2, c=>3);
ERROR HY000: In FUNCTION f1, parameter 'b' was missed.
SELECT f1(a=>1, a=>2, a=>3);
ERROR HY000: In FUNCTION f1, parameter 'b' was missed.
SELECT f1(1, a=>2, a=>3);
ERROR HY000: In FUNCTION f1, parameter 'b' was missed.
SELECT f1(1, a=>2, c=>3);
ERROR HY000: In FUNCTION f1, parameter 'b' was missed.
SELECT f1(1, a=>2, b=>3);
ERROR HY000: In FUNCTION f1, parameter 'c' was missed.
SET sql_mode = oracle;
CREATE FUNCTION f3(a int, b int, c int) RETURN INTEGER
AS
BEGIN
RETURN a * b + c;
END|
CREATE FUNCTION f4(a bool, b int, c varchar(16)) RETURN VARCHAR(16)
AS
BEGIN
RETURN CONCAT(c , ':', a+b);
END|
CREATE PROCEDURE p3 (a int, b int, c int)
AS
BEGIN
SELECT a*b+c;
SELECT f3(a=>a, b=>b, c=>c);
END|
CREATE PROCEDURE p4 (a bool, b int, c varchar(16))
AS
BEGIN
SELECT a*b+c;
SELECT f4(a=>a, b=>b, c=>c);
END|
SET sql_mode = '';
SELECT f3(1,2,3);
f3(1,2,3)
5
SELECT f4(true, 2, 'testing');
f4(true, 2, 'testing')
testing:3
CALL p3(1,2,3);
a*b+c
5
f3(a=>a, b=>b, c=>c)
5
CALL p4(true, 2, 'testing');
a*b+c
2
f4(a=>a, b=>b, c=>c)
testing:3
SET sql_mode = oracle;
SELECT f3(a=>1, b=>2, c=>3);
f3(a=>1, b=>2, c=>3)
5
SELECT f4(a=>true, b=>2, c=>'testing');
f4(a=>true, b=>2, c=>'testing')
testing:3
CALL p3(a=>1, b=>2, c=>3);
a*b+c
5
f3(a=>a, b=>b, c=>c)
5
CALL p4(a=>true, b=>2, c=>'testing');
a*b+c
2
f4(a=>a, b=>b, c=>c)
testing:3
DROP FUNCTION f3;
DROP FUNCTION f4;
DROP PROCEDURE p3;
DROP PROCEDURE p4;
SET sql_mode = oracle;
CREATE FUNCTION mytest(a VARCHAR(128), b VARCHAR(128), c VARCHAR(128)) RETURN VARCHAR(128)
AS
BEGIN
RETURN b;
END|
create table tj(b varchar(128));
insert into tj values('TTT');
select mytest(b,c=>'CC',b=>'BB') from tj;
mytest(b,c=>'CC',b=>'BB')
BB
DROP FUNCTION mytest;
DROP TABLE tj;
DROP SCHEMA testsp;
