
--echo #
--echo # oracle Cursors with parameters
--echo #

CREATE TABLE t1 (a INT, b VARCHAR(10));
INSERT INTO t1 VALUES (1,'old'),(2,'old'),(3,'old'),(4,'old'),(5,'old');
set sql_mode="oracle";
DELIMITER $$;
CREATE PROCEDURE p1(min INT,max INT) as
  done INT DEFAULT FALSE;
  CURSOR cur(pmin INT, pmax INT) is SELECT a FROM t1 WHERE a BETWEEN pmin AND pmax;
  va INT;
BEGIN
  OPEN cur(min,max);
  LOOP
    FETCH cur INTO va;
    EXIT WHEN cur%NOTFOUND;
    INSERT INTO t1 VALUES (va,'new');
  END LOOP;
  CLOSE cur;
END;
$$
DELIMITER ;$$
CALL p1(2,4);
SELECT * FROM t1 ORDER BY b DESC,a;
DROP PROCEDURE p1;
DROP TABLE t1;

--echo #
--echo # OPEN with a wrong parameters
--echo #

CREATE TABLE t1 (a INT, b VARCHAR(10));
DELIMITER $$;
CREATE or replace PROCEDURE p1(a_a INT,a_b VARCHAR(32)) as
  v_a INT;
  v_b VARCHAR(10);
  CURSOR c(p_a INT) is SELECT * FROM t1 WHERE a=p_a;
BEGIN
  OPEN c(aa);
  CLOSE c;
END;
$$
DELIMITER ;$$
--error ER_BAD_FIELD_ERROR
CALL p1(2,4);
DROP TABLE t1;
DROP PROCEDURE p1;

--echo #
--echo # OPEN with a wrong parameters
--echo #

DELIMITER $$;
--error ER_WRONG_PARAMCOUNT_TO_CURSOR
CREATE or replace PROCEDURE p1(a_a INT,a_b VARCHAR(32)) as
  v_a INT;
  v_b VARCHAR(10);
  CURSOR c(p_a INT) is SELECT * FROM t1 WHERE a=p_a;
BEGIN
  OPEN c();
  CLOSE c;
END;
$$
DELIMITER ;$$

--echo #
--echo # OPEN with a wrong count of parameters
--echo #

CREATE TABLE t1 (a INT, b VARCHAR(10));
DELIMITER $$;
--error ER_WRONG_PARAMCOUNT_TO_CURSOR
CREATE or replace PROCEDURE p1(a_a INT,a_b VARCHAR(32)) as
  v_a INT;
  v_b VARCHAR(10);
  CURSOR c(p_a INT, p_b VARCHAR(32)) is SELECT * FROM t1 WHERE a=p_a;
BEGIN
  OPEN c(1);
  CLOSE c;
END;
$$
DELIMITER ;$$
DROP TABLE t1;

--echo #
--echo # Cursor parameters are not visible outside of the cursor
--echo #

DELIMITER $$;
--error ER_UNKNOWN_SYSTEM_VARIABLE
CREATE or replace PROCEDURE p1(a_a INT,a_b VARCHAR(32)) as
  v_a INT;
  v_b VARCHAR(10);
  CURSOR c(p_a INT, p_b VARCHAR(32)) is SELECT * FROM t1 WHERE a=p_a;
BEGIN
  OPEN c(1,"old");
  set p_a := 1;
END;
$$
DELIMITER ;$$

--echo #
--echo # Cursor parameter shadowing a local variable
--echo #

CREATE TABLE t1 (a INT);
INSERT INTO t1 VALUES (1);
DELIMITER $$;
CREATE or replace PROCEDURE p1(a INT) as
  v_a INT := NULL;
  p_a INT := NULL;
  CURSOR c(p_a VARCHAR(32)) is SELECT p_a FROM t1;
begin
  OPEN c(a);
  LOOP
    FETCH c INTO v_a;
    EXIT WHEN c%NOTFOUND;
    SELECT v_a;
  END LOOP;
  CLOSE c;
END;
$$
DELIMITER ;$$
CALL p1(1);
CALL p1(NULL);
DROP PROCEDURE p1;
DROP TABLE t1;


--echo #
--echo # Parameters in SELECT list
--echo #

DELIMITER $$;
CREATE or replace PROCEDURE p1(a_a INT, a_b VARCHAR(32)) as
  v_a INT;
  v_b VARCHAR(10);
  CURSOR c(p_a INT, p_b VARCHAR(32)) is SELECT p_a,p_b FROM DUAL;
begin
  OPEN c(a_a + 0,a_b);
  FETCH c INTO v_a, v_b;
  SELECT v_a, v_b;
  CLOSE c;
  OPEN c(a_a + 1,a_b);
  FETCH c INTO v_a, v_b;
  SELECT v_a, v_b;
  CLOSE c;
END;
$$
DELIMITER ;$$
CALL p1(1,'aa');
DROP PROCEDURE p1;


--echo #
--echo # Parameters in SELECT list + UNION
--echo #

DELIMITER $$;
CREATE PROCEDURE p1(a_a INT, a_b VARCHAR(32)) as
  v_a INT;
  v_b VARCHAR(10);
  CURSOR c(p_a INT, p_b VARCHAR(32)) is
    SELECT p_a,p_b FROM DUAL
    UNION ALL
    SELECT p_a+1,CONCAT(p_b,'b') FROM DUAL;
BEGIN
  OPEN c(a_a,a_b);
  FETCH c INTO v_a, v_b;
  SELECT v_a, v_b;
  FETCH c INTO v_a, v_b;
  SELECT v_a, v_b;
  CLOSE c;
END;
$$
DELIMITER ;$$
CALL p1(1,'aa');
DROP PROCEDURE p1;


--echo #
--echo # Parameters in SELECT list + type conversion + warnings
--echo #

DELIMITER $$;
CREATE PROCEDURE p1(a_a VARCHAR(32)) as
  v_a VARCHAR(32);
  CURSOR c(p_a VARCHAR(32)) is SELECT p_a FROM DUAL;
BEGIN
  OPEN c(a_a);
  FETCH c INTO v_a;
  SELECT v_a;
  CLOSE c;
END;
$$
DELIMITER ;$$
CALL p1('1b');
CALL p1('b1');
DROP PROCEDURE p1;

--echo #
--echo # Parameters in SELECT list + stored function
--echo #

DELIMITER $$;
CREATE FUNCTION f1 (a VARCHAR(32)) RETURN VARCHAR(32) no sql
is result VARCHAR(32);
BEGIN
  result := CONCAT(a,'y');
  RETURN(result);
END;
$$
CREATE PROCEDURE p1(a_a VARCHAR(32)) as
  done INT DEFAULT 0;
  v_a VARCHAR(10);
  v_b VARCHAR(10);
  CURSOR c(p_sel_a VARCHAR(32),p_sel_b VARCHAR(32)) is
    SELECT p_sel_a,p_sel_b FROM DUAL;
BEGIN
  OPEN c(f1(a_a),f1(a_a));
  LOOP
    FETCH c INTO v_a, v_b;
    EXIT WHEN c%NOTFOUND;
    SELECT v_a, v_b;
  END LOOP;
  CLOSE c;
END;
$$
DELIMITER ;$$
CALL p1('x');
# A complex expression
CALL p1(f1(COALESCE(NULL, f1('x'))));
DROP PROCEDURE p1;
DROP FUNCTION f1;


--echo #
--echo # One parameter in WHERE clause
--echo #

CREATE TABLE t1 (a INT, b VARCHAR(10));
CREATE TABLE t2 (a INT, b VARCHAR(10));
INSERT INTO t1 VALUES (1,'11');
INSERT INTO t1 VALUES (1,'12');
INSERT INTO t1 VALUES (2,'21');
INSERT INTO t1 VALUES (2,'22');
INSERT INTO t1 VALUES (3,'31');
INSERT INTO t1 VALUES (3,'32');
DELIMITER $$;
CREATE PROCEDURE p1(a_a INT) as
  done INT DEFAULT 0;
  v_a INT;
  v_b VARCHAR(10);
  CURSOR c(p_a INT) is SELECT a,b FROM t1 WHERE a=p_a;
BEGIN
  OPEN c(a_a);
  LOOP
    FETCH c INTO v_a, v_b;
    EXIT WHEN c%NOTFOUND;
    INSERT INTO t2 VALUES (v_a,v_b);
  END LOOP;
  CLOSE c;
END;
$$
DELIMITER ;$$
CALL p1(1);
SELECT * FROM t2;
DROP TABLE t1;
DROP TABLE t2;
DROP PROCEDURE p1;


--echo #
--echo # Two parameters in WHERE clause
--echo #

CREATE TABLE t1 (a INT, b VARCHAR(10));
CREATE TABLE t2 (a INT, b VARCHAR(10));
INSERT INTO t1 VALUES (1,'11');
INSERT INTO t1 VALUES (1,'12');
INSERT INTO t1 VALUES (2,'21');
INSERT INTO t1 VALUES (2,'22');
INSERT INTO t1 VALUES (3,'31');
INSERT INTO t1 VALUES (3,'32');
DELIMITER $$;
CREATE PROCEDURE p1(a_a INT, a_b VARCHAR(32)) as
  v_a INT;
  v_b VARCHAR(10);
  CURSOR c(p_a INT, p_b VARCHAR(32)) is SELECT a,b FROM t1 WHERE a=p_a AND b=p_b;
BEGIN
  OPEN c(a_a, a_b);
  LOOP
    FETCH c INTO v_a, v_b;
    EXIT WHEN c%NOTFOUND;
    INSERT INTO t2 VALUES (v_a,v_b);
  END LOOP;
  CLOSE c;
END;
$$
DELIMITER ;$$
CALL p1(1,'11');
SELECT * FROM t2;
DROP TABLE t1;
DROP TABLE t2;
DROP PROCEDURE p1;

--echo #
--echo # Parameters in WHERE and HAVING clauses
--echo #
CREATE TABLE t1 (name VARCHAR(10), value1 INT);
INSERT INTO t1 VALUES ('but',1);
INSERT INTO t1 VALUES ('but',1);
INSERT INTO t1 VALUES ('but',1);
INSERT INTO t1 VALUES ('bin',1);
INSERT INTO t1 VALUES ('bin',1);
INSERT INTO t1 VALUES ('bot',1);
DELIMITER $$;
CREATE PROCEDURE p1 (arg_name_limit VARCHAR(32), arg_total_limit INT) as
  i INT DEFAULT 0;
  v_name VARCHAR(10);
  v_total INT;
  CURSOR c(p_v INT) is
    SELECT name, SUM(value1 + p_v) + 0 AS total FROM t1
    WHERE name LIKE arg_name_limit
    GROUP BY name HAVING total>=arg_total_limit;
BEGIN
  WHILE i < 2 loop
    BEGIN
      OPEN c(i);
      LOOP
        FETCH c INTO v_name, v_total;
        EXIT WHEN c%NOTFOUND;
        SELECT v_name, v_total;
      END LOOP;
      CLOSE c;
      SET i= i + 1;
    END;
  END loop;
END;
$$
DELIMITER ;$$
CALL p1('%', 2);
CALL p1('b_t', 0);
DROP PROCEDURE p1;
DROP TABLE t1;


--echo #
--echo # One parameter in LIMIT clause
--echo #

CREATE TABLE t1 (a INT, b VARCHAR(10));
INSERT INTO t1 VALUES (1,'b1');
INSERT INTO t1 VALUES (2,'b2');
INSERT INTO t1 VALUES (3,'b3');
INSERT INTO t1 VALUES (4,'b4');
INSERT INTO t1 VALUES (5,'b5');
INSERT INTO t1 VALUES (6,'b6');
DELIMITER $$;
CREATE PROCEDURE p1(a_a INT) as
  v_a INT;
  v_b VARCHAR(10);
  CURSOR c(p_a INT) is SELECT a,b FROM t1 ORDER BY a LIMIT p_a;
BEGIN
  CREATE TABLE t2 (a INT, b VARCHAR(10));
  OPEN c(a_a);
  LOOP
    FETCH c INTO v_a, v_b;
    EXIT WHEN c%NOTFOUND;
    INSERT INTO t2 VALUES (v_a,v_b);
  END LOOP;
  CLOSE c;
  SELECT * FROM t2;
  DROP TABLE t2;
END;
$$
DELIMITER ;$$
CALL p1(1);
CALL p1(3);
CALL p1(6);
DROP TABLE t1;
DROP PROCEDURE p1;

--echo #
--echo # for loop
--echo #

CREATE TABLE t1 (id2 int, id int, en1 enum('aaa','a','b','c'));
INSERT INTO t1 VALUES(1,1,'aaa'),(2,1,'a'),(3,3,'b'),(4,1,'c');
DELIMITER $$;
CREATE PROCEDURE p1() as
  CURSOR c_country (id int) IS SELECT * FROM t1 WHERE id =id;
BEGIN
  FOR rec IN c_country(1)
  loop
    SELECT rec.en1;
  END loop;
END;
$$
DELIMITER ;$$
CALL p1();
DROP PROCEDURE p1;
DROP TABLE t1;

--echo #
--echo # for loop
--echo #

CREATE TABLE t1 (id2 int, id int, en1 enum('aaa','a','b','c'));
INSERT INTO t1 VALUES(1,1,'aaa'),(2,1,'a'),(3,3,'b'),(4,1,'c');
DELIMITER $$;
CREATE PROCEDURE p1() as
  CURSOR c_country (id int) IS SELECT * FROM t1 WHERE id =id;
  rec c_country%ROWTYPE;
BEGIN
  FOR rec IN c_country(1)
  loop
    SELECT rec.en1;
  END loop;
END;
$$
DELIMITER ;$$
CALL p1();
DROP PROCEDURE p1;
DROP TABLE t1;

--echo #
--echo # %TYPE
--echo #

CREATE TABLE t1 (id2 int, id int, en1 enum('aaa','a','b','c'));
INSERT INTO t1 VALUES(1,1,'aaa'),(2,1,'a'),(3,3,'b'),(4,1,'c');
DELIMITER $$;
CREATE PROCEDURE p1() as
  CURSOR c_country (id int) IS SELECT * FROM t1 WHERE id =id;
  rec c_country%ROWTYPE;
  rec2 rec%TYPE;
BEGIN
  FOR rec2 IN c_country(1)
  loop
    SELECT rec2.en1;
  END loop;
END;
$$
DELIMITER ;$$
CALL p1();
DROP PROCEDURE p1;
DROP TABLE t1;

--echo #
--echo # %TYPE
--echo #

CREATE TABLE t1 (id2 int, id int, en1 enum('aaa','a','b','c'));
INSERT INTO t1 VALUES(1,1,'aaa'),(2,1,'a'),(3,3,'b'),(4,1,'c');
DELIMITER $$;
CREATE PROCEDURE p1() as
  rec2 t1.id%TYPE;
  aa varchar(100) := 'aaa';
  rec3 aa%TYPE;
  rec4 rec3%TYPE;
BEGIN
  rec2 := 1;
  rec3 := 'bbb';
  rec4 := 'bbb4';
  SELECT rec2,rec3,rec4;
END;
$$
DELIMITER ;$$
CALL p1();
DROP PROCEDURE p1;
DROP TABLE t1;

--echo #
--echo # %TYPE ER_ROW_VARIABLE_DOES_NOT_HAVE_FIELD
--echo #

CREATE TABLE t1 (id2 int, id int, en1 enum('aaa','a','b','c'));
INSERT INTO t1 VALUES(1,1,'aaa'),(2,1,'a'),(3,3,'b'),(4,1,'c');
DELIMITER $$;
CREATE PROCEDURE p1() as
  rec2 t1%ROWTYPE;
BEGIN
  SELECT rec2.id1;
END;
$$
DELIMITER ;$$
--error ER_ROW_VARIABLE_DOES_NOT_HAVE_FIELD
call p1();
DROP PROCEDURE p1;
DROP TABLE t1;

--echo #
--echo # %TYPE
--echo #

CREATE TABLE t1 (id2 int, id int, en1 enum('aaa','a','b','c'));
INSERT INTO t1 VALUES(1,1,'aaa'),(2,1,'a'),(3,3,'b'),(4,1,'c');
DELIMITER $$;
CREATE PROCEDURE p1() as
  rec2 t1.id%TYPE;
  aa varchar(100) := 'aaa';
  rec3,rec4,rec5 aa%TYPE;
  rec6,rec7,rec8 rec3%TYPE;
BEGIN
  rec2 := 1;
  rec3 := 'bbb';
  rec4 := 'bbb4';
  rec5 := 'bbb5';
  rec6 := 'bbb6';
  rec7 := 'bbb7';
  rec8 := 'bbb8';
  SELECT rec2,rec3,rec4,rec5,rec6,rec7,rec8;
END;
$$
DELIMITER ;$$
CALL p1();
DROP PROCEDURE p1;
DROP TABLE t1;

--echo #
--echo # error ER_NOT_SUPPORTED_YET
--echo #
DELIMITER $$;
--error ER_NOT_SUPPORTED_YET
declare 
  x x%type;
begin
 select x;
END;
$$
DELIMITER ;$$

