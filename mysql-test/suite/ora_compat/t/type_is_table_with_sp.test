--source include/have_debug.inc
SET sql_mode=ORACLE;

show variables like '%udt_format_result%';
set @@udt_format_result='DBA';

--echo #
--echo # test of create type
--echo #
create or replace type t_air as object(id int,type varchar(20));
CREATE OR REPLACE TYPE t_air_table AS table OF t_air;
create table tt_air(id int,name1 t_air);
insert into tt_air values(1,t_air(10,'aabb'));
insert into tt_air values(2,t_air(20,'qwed'));

--echo #
--echo # test of type is table of type
--echo #
DELIMITER $$;
CREATE or replace PROCEDURE p1() as
type tklist is table of varchar(20);
stu_record_val tklist;
id int := 1;
begin
 stu_record_val(id) := 1;
 stu_record_val(3) := 1;
 select stu_record_val(id), stu_record_val(3);
 SELECT stu_record_val.count;
end;
$$
DELIMITER ;$$
--error ER_UDT_REF_UNINIT_COMPOSITE
call p1;
drop PROCEDURE p1;

--echo #
--echo # test of type is table of type
--echo #
DELIMITER $$;
CREATE or replace PROCEDURE p1() as
type tklist is table of varchar(20);
stu_record_val tklist := tklist();
id int := 1;
begin
 stu_record_val(id) := 1;
 stu_record_val(3) := 1;
 select stu_record_val(id), stu_record_val(3);
 SELECT stu_record_val.count;
end;
$$
DELIMITER ;$$
--error ER_RECORD_TABLE_OUTSIZE_LIMIT
call p1;
drop PROCEDURE p1;

--echo #
--echo # test of type is table of type
--echo #
DELIMITER $$;
--error ER_NOT_SUPPORTED_YET
CREATE or replace PROCEDURE p1() as
type tklist is table of varchar(20);
stu_record_val tklist := tklist(1=>'aa');
id int := 1;
begin
end;
$$
DELIMITER ;$$

--echo #
--echo # test of type is table of type
--echo #
DELIMITER $$;
CREATE or replace PROCEDURE p1() as
type tklist is table of varchar(20);
stu_record_val tklist := tklist('aa');
id int := 1;
begin
 select stu_record_val(id);
 stu_record_val(id) := 1;
 select stu_record_val(id);
 stu_record_val(3) := 1;
end;
$$
DELIMITER ;$$
--error ER_RECORD_TABLE_OUTSIZE_LIMIT
call p1;
drop PROCEDURE p1;

--echo #
--echo # test of type is table of type
--echo #
DELIMITER $$;
CREATE or replace PROCEDURE p1() as
type tklist is table of varchar(20);
stu_record_val tklist := tklist('aa','bb','cc');
id int := 1;
begin
 select stu_record_val(id);
 stu_record_val(id) := 1;
 select stu_record_val(id);
 stu_record_val(3) := 1;
 select stu_record_val(id), stu_record_val(3);
 SELECT stu_record_val.count;
end;
$$
DELIMITER ;$$
show procedure code p1;
call p1;
drop PROCEDURE p1;

--echo #
--echo # test of type is table of type without index and bulk into
--echo #
DELIMITER $$;
CREATE or replace PROCEDURE p1() as
type tklist is table of varchar(20);
stu_record_val tklist;
id int := 1;
begin
 select * bulk collect into stu_record_val from sequence_table(5) a;
 for i in stu_record_val.first .. stu_record_val.last loop
  select stu_record_val(i);
 end loop;
 stu_record_val(2) := 12;
 select stu_record_val(2);
end;
$$
DELIMITER ;$$
call p1;
drop PROCEDURE p1;

--echo #
--echo # test of type is table of type index by BINARY_INTEGER
--echo #
DELIMITER $$;
CREATE or replace PROCEDURE p1() as
type tklist is table of varchar(20) index by BINARY_INTEGER;
stu_record_val tklist;
id int := 1;
begin
 stu_record_val(id) := 1;
 stu_record_val(3) := 1;
 select stu_record_val(id), stu_record_val(3);
 SELECT stu_record_val.count;
end;
$$
DELIMITER ;$$
call p1;
drop PROCEDURE p1;

--echo #
--echo # test of type is table of type index by BINARY_INTEGER
--echo #
DELIMITER $$;
CREATE or replace PROCEDURE p1() as
type tklist is table of varchar(20) index by BINARY_INTEGER;
stu_record_val tklist;
id VARCHAR(3) := 'aaa';
begin
 stu_record_val(id) := 1;
 select stu_record_val(id);
end;
$$
DELIMITER ;$$
--error ER_WRONG_PARAMCOUNT_TO_TYPE_TABLE
call p1;
drop PROCEDURE p1;

--echo #
--echo # test of type is table of type index by VARCHAR_SYM
--echo #
DELIMITER $$;
--error ER_TOO_BIG_FIELDLENGTH
CREATE or replace PROCEDURE p1() as
type tklist is table of varchar(20) index by VARCHAR(32768);
stu_record_val tklist;
begin
 stu_record_val(34000) := 1;
 select stu_record_val(34000);
end;
$$
DELIMITER ;$$

--echo #
--echo # test of type is table of type index by VARCHAR_SYM
--echo #
DELIMITER $$;
CREATE or replace PROCEDURE p1() as
type tklist is table of varchar(20) index by VARCHAR(2);
stu_record_val tklist;
id VARCHAR(3) := 'aaa';
begin
 stu_record_val(id) := 1;
 select stu_record_val(id);
 SELECT stu_record_val.count;
end;
$$
DELIMITER ;$$
--error ER_WRONG_PARAMCOUNT_TO_TYPE_TABLE
call p1;
drop PROCEDURE p1;

--echo #
--echo # test of type is table of type index by VARCHAR_SYM
--echo #
DELIMITER $$;
CREATE or replace PROCEDURE p1() as
type tklist is table of varchar(20) index by VARCHAR(20);
stu_record_val tklist;
id VARCHAR(3) := 'aaa';
begin
 stu_record_val(id) := 10;
 stu_record_val(1) := 1;
 select stu_record_val(id), stu_record_val(1);
 SELECT stu_record_val.count,stu_record_val.count+1;
end;
$$
DELIMITER ;$$
call p1;
drop PROCEDURE p1;

--echo #
--echo # test of type is table of type index by VARCHAR_SYM
--echo #
DELIMITER $$;
CREATE or replace PROCEDURE p1() as
type tklist is table of varchar(20) index by VARCHAR(20);
stu_record_val tklist;
id VARCHAR(3) := 'aaa';
begin
 stu_record_val(id) := 10;
 select stu_record_val(id);
 stu_record_val(id) := 20;
 select stu_record_val(id);
end;
$$
DELIMITER ;$$
call p1;
drop PROCEDURE p1;

--echo #
--echo # test of error ER_ROW_VARIABLE_DOES_NOT_HAVE_FIELD
--echo #
DELIMITER $$;
CREATE or replace PROCEDURE p1() as
type tklist is table of varchar(20) index by VARCHAR(20);
stu_record_val tklist;
id VARCHAR(3) := 'aaa';
begin
 stu_record_val(id) := 10;
 select stu_record_val(id);
 select stu_record_val(id).col;
end;
$$
DELIMITER ;$$
--error ER_ROW_VARIABLE_DOES_NOT_HAVE_FIELD
call p1;
drop PROCEDURE p1;

--echo #
--echo # test of select into
--echo #
DELIMITER $$;
CREATE or replace PROCEDURE p1() as
type tklist is table of varchar(20) index by VARCHAR(20);
stu_record_val tklist;
id varchar(30);
begin
 stu_record_val(1) := 'aa';
 stu_record_val(3) := 'bb';
 select stu_record_val(3) into id;
 select id;
 stu_record_val(2) := stu_record_val(1);
 select stu_record_val(2);
end;
$$
DELIMITER ;$$
call p1;
drop PROCEDURE p1;

--echo #
--echo # test of table(i) := table(i)
--echo #
DELIMITER $$;
CREATE or replace PROCEDURE p1() as
type tklist is table of varchar(20) index by VARCHAR(20);
stu_record_val tklist;
begin
 stu_record_val(2) := stu_record_val(2);
 select stu_record_val(2);
end;
$$
DELIMITER ;$$
--error ER_SP_NOT_EXIST_OF_RECORD_TABLE
call p1;
drop PROCEDURE p1;

--echo #
--echo # test of table(i) || table(i)
--echo #
DELIMITER $$;
CREATE or replace PROCEDURE p1() as
type tklist is table of varchar(20) index by VARCHAR(20);
stu_record_val tklist;
id varchar(30);
begin
 stu_record_val(1) := 'aa';
 stu_record_val(2) := 'bb';
 id := stu_record_val(1) || stu_record_val(2) || stu_record_val(1);
 select id;
end;
$$
DELIMITER ;$$
call p1;
drop PROCEDURE p1;

--echo #
--echo # test of type is table of without index
--echo #
DELIMITER $$;
CREATE or replace PROCEDURE p1() as
type stu_record is record(
  id int := 1,
  name_d  varchar(20) := 'a',
  score float := 0
);
type tklist is table of stu_record;
stu_record_val tklist;
stu_record_val1 stu_record;
begin
 stu_record_val(1).id := 10;
 stu_record_val(2).id := 20;
end;
$$
DELIMITER ;$$
--error ER_UDT_REF_UNINIT_COMPOSITE
call p1;
drop PROCEDURE p1;

--echo #
--echo # test of type is table of without index
--echo #
DELIMITER $$;
CREATE or replace PROCEDURE p1() as
type stu_record is record(
  id int := 1,
  name_d  varchar(20) := 'a',
  score float := 0
);
type tklist is table of stu_record;
stu_record_val tklist := tklist(stu_record(11,'aa',1.1));
stu_record_val1 stu_record;
begin
 stu_record_val(1).id := 10;
 select stu_record_val(1);
 stu_record_val(2).id := 20;
end;
$$
DELIMITER ;$$
--error ER_RECORD_TABLE_OUTSIZE_LIMIT
call p1;
drop PROCEDURE p1;

--echo #
--echo # test of type is table of with index
--echo #
DELIMITER $$;
--error ER_NOT_SUPPORTED_YET
CREATE or replace PROCEDURE p1() as
type stu_record is record(
  id int := 1,
  name_d  varchar(20) := 'a',
  score float := 0
);
type tklist is table of stu_record index by PLS_INTEGER;
stu_record_val tklist := tklist(stu_record(11,'aa',1.1));
stu_record_val1 stu_record;
begin
 stu_record_val(1).id := 10;
 select stu_record_val(1);
 stu_record_val(2).id := 20;
 select stu_record_val(2);
end;
$$
DELIMITER ;$$

--echo #
--echo # test of type is table of with index
--echo #
DELIMITER $$;
CREATE or replace PROCEDURE p1() as
type stu_record is record(
  id int := 1,
  name_d  varchar(20) := 'a',
  score float := 0
);
type tklist is table of stu_record index by PLS_INTEGER;
stu_record_val tklist := tklist(2=>stu_record(11,'aa',1.1));
stu_record_val1 stu_record;
begin
 stu_record_val(1).id := 10;
 select stu_record_val(1),stu_record_val(2);
 stu_record_val(2).id := 20;
 select stu_record_val(2);
end;
$$
DELIMITER ;$$
call p1;
drop PROCEDURE p1;

--echo #
--echo # test of type is table of without index
--echo #
DELIMITER $$;
CREATE or replace PROCEDURE p1() as
type stu_record is record(
  id int := 1,
  name_d  varchar(20) := 'a',
  score float := 0
);
type tklist is table of stu_record;
stu_record_val tklist := tklist(stu_record(11,'aa',1.1),null);
stu_record_val1 stu_record;
begin
 stu_record_val(1).id := 10;
 stu_record_val(2).id := 20;
 stu_record_val1 := stu_record_val(2);
 select stu_record_val(1),stu_record_val1;
 SELECT stu_record_val.count ;
 stu_record_val(2).id := 30;
 select stu_record_val(2),stu_record_val(1);
end;
$$
DELIMITER ;$$
call p1;
drop PROCEDURE p1;

--echo #
--echo # test of type is table of without index ans bulk into
--echo #
create table stu_record_table (id int,name_d  varchar(20),score float);
insert into stu_record_table values(1,'aa',1.1),(2,'bb',2.2);
DELIMITER $$;
CREATE or replace PROCEDURE p1() as
type stu_record is record(
  id int := 1,
  name_d  varchar(20) := 'a',
  score float := 0
);
type tklist is table of stu_record;
stu_record_val tklist;
begin
 select * bulk collect into stu_record_val from stu_record_table;
 for i in stu_record_val.first .. stu_record_val.last loop
  select stu_record_val(i);
 end loop;
 stu_record_val(3).id := 1;
end;
$$
DELIMITER ;$$
--error ER_RECORD_TABLE_OUTSIZE_LIMIT
call p1;
drop PROCEDURE p1;

--echo #
--echo # test of type is table of table%rowtype without index
--echo #
DELIMITER $$;
CREATE or replace PROCEDURE p1() as
TYPE tklist IS TABLE OF tt_air%ROWTYPE; 
stu_record_val tklist := tklist();
begin
 stu_record_val(1).id := 10;
 stu_record_val(2).id := 20;
end;
$$
DELIMITER ;$$
--error ER_RECORD_TABLE_OUTSIZE_LIMIT
call p1;
drop PROCEDURE p1;

--echo #
--echo # test of type is table of table%rowtype without index
--echo #
DELIMITER $$;
CREATE or replace PROCEDURE p1() as
TYPE tklist IS TABLE OF tt_air%ROWTYPE; 
stu_record_val tklist := tklist(null);
begin
 stu_record_val(1).id := 10;
 select stu_record_val(1);
 stu_record_val(2).id := 20;
end;
$$
DELIMITER ;$$
--error ER_RECORD_TABLE_OUTSIZE_LIMIT
call p1;
drop PROCEDURE p1;

--echo #
--echo # test of type is table of table%rowtype without index
--echo #
DELIMITER $$;
CREATE or replace PROCEDURE p1() as
TYPE tklist IS TABLE OF tt_air%ROWTYPE; 
stu_record_val tklist;
begin
 stu_record_val(1).id := 10;
end;
$$
DELIMITER ;$$
--error ER_UDT_REF_UNINIT_COMPOSITE
call p1;
drop PROCEDURE p1;

--echo #
--echo # test of type is table of table%rowtype without index
--echo #
DELIMITER $$;
CREATE or replace PROCEDURE p1() as
TYPE tklist IS TABLE OF stu_record_table%ROWTYPE; 
stu_record_val tklist;
begin
 select * bulk collect into stu_record_val from stu_record_table;
 for i in stu_record_val.first .. stu_record_val.last loop
  select stu_record_val(i);
 end loop;
 stu_record_val(3).id := 1;
end;
$$
DELIMITER ;$$
--error ER_RECORD_TABLE_OUTSIZE_LIMIT
call p1;
drop PROCEDURE p1;
drop table stu_record_table;

--echo #
--echo # test of record := record_table(row)
--echo #
DELIMITER $$;
CREATE or replace PROCEDURE p1() as
type stu_record is record(
  id int := 1,
  name_d  varchar(20) := 'a',
  score float := 0
);
type tklist is table of stu_record INDEX BY pls_integer;
stu_record_val tklist;
stu_record_val1 stu_record;
begin
 stu_record_val(1).id := 10;
 stu_record_val(2).id := 20;
 stu_record_val1 := stu_record_val(2);
 select stu_record_val(1),stu_record_val1;
 SELECT stu_record_val.count ;
 stu_record_val(2).id := 30;
 select stu_record_val(2),stu_record_val(1);
end;
$$
DELIMITER ;$$
call p1;
drop PROCEDURE p1;

--echo #
--echo # test of record := record_table(row)
--echo #
DELIMITER $$;
CREATE or replace PROCEDURE p1() as
type stu_record is record(
  id int := 1,
  name_d  varchar(20) := 'a',
  score float := 0
);
type tklist is table of stu_record INDEX BY pls_integer;
stu_record_val tklist;
type stu_record1 is record(
  id int := 1,
  name_d  varchar(20) := 'a',
  score float := 0
);
stu_record_val1 stu_record1;
begin
 stu_record_val(1).id := 10;
 stu_record_val(2).id := 20;
 stu_record_val1 := stu_record_val(2);
end;
$$
DELIMITER ;$$
--error ER_WRONG_UDT_DATA_TYPE
call p1;
drop PROCEDURE p1;

--echo #
--echo # test of record_table(row) := record
--echo #
DELIMITER $$;
CREATE or replace PROCEDURE p1() as
type stu_record is record(
  id int := 1,
  name_d  varchar(20) := 'a',
  score float := 0
);
type tklist is table of stu_record INDEX BY pls_integer;
stu_record_val tklist;
stu_record_val1 stu_record;
begin
 stu_record_val1 := stu_record(10,'bb',0.2);
 stu_record_val(1) := stu_record_val1;
 select stu_record_val(1);
end;
$$
DELIMITER ;$$
show procedure code p1;
call p1;
drop PROCEDURE p1;

--echo #
--echo # test of record_table(row) := record
--echo #
DELIMITER $$;
CREATE or replace PROCEDURE p1() as
type stu_record is record(
  id int := 1,
  name_d  varchar(20) := 'a',
  score float := 0
);
type tklist is table of stu_record INDEX BY pls_integer;
stu_record_val tklist;
type stu_record1 is record(
  id int := 1,
  name_d  varchar(20) := 'a',
  score float := 0
);
stu_record_val1 stu_record1;
begin
 stu_record_val1 := stu_record1(10,'bb',0.2);
 stu_record_val(1) := stu_record_val1;
 select stu_record_val(1);
end;
$$
DELIMITER ;$$
--error ER_WRONG_UDT_DATA_TYPE
call p1;
drop PROCEDURE p1;

--echo #
--echo # test of record_table(row) := record()
--echo #
DELIMITER $$;
CREATE or replace PROCEDURE p1() as
type stu_record is record(
  id int := 1,
  name_d  varchar(20) := 'a',
  score float := 0
);
type tklist is table of stu_record INDEX BY pls_integer;
stu_record_val tklist;
stu_record_val1 stu_record;
begin
 stu_record_val1 := stu_record(10,'bb',0.2);
 stu_record_val(1) := stu_record_val1;
 select stu_record_val(1);
 stu_record_val(1) := stu_record(20,'bb20',0.32);
 select stu_record_val(1);
end;
$$
DELIMITER ;$$
call p1;
drop PROCEDURE p1;

--echo #
--echo # test of record_table(row) := record()
--echo #
DELIMITER $$;
CREATE or replace PROCEDURE p1() as
type stu_record is record(
  id int := 1,
  name_d  varchar(20) := 'a',
  score float := 0
);
type tklist is table of stu_record INDEX BY pls_integer;
stu_record_val tklist;
stu_record_val1 stu_record;
type stu_record1 is record(
  id int := 1,
  name_d  varchar(20) := 'a',
  score float := 0
);
begin
 stu_record_val(1) := stu_record1(20,'bb20',0.32);
 select stu_record_val(1);
end;
$$
DELIMITER ;$$
--error ER_WRONG_UDT_DATA_TYPE
call p1;
drop PROCEDURE p1;

--echo #
--echo # test of record_table(row) := record()
--echo #
DELIMITER $$;
CREATE or replace PROCEDURE p1() as
type tklist is table of varchar(20) INDEX BY VARCHAR2(30);
arg_array tklist;
type stu_record is record(
  param_name varchar(20) := 'id',
  param_value  varchar(20) := 'aa'
);
type tklist1 is table of stu_record INDEX BY pls_integer;
param_array tklist1;
name varchar(10) := 'a';
begin
 param_array(1) := stu_record(name,'aa10');
 param_array(2) := stu_record('b','bb20');
 FOR i IN 1 .. param_array.COUNT LOOP
   arg_array(param_array(i).param_name) := param_array(i).param_value;
   select arg_array(param_array(i).param_name);
 end loop;
end;
$$
DELIMITER ;$$
call p1;
drop PROCEDURE p1;

--echo #
--echo # test of record_table(row) := record_table(row)
--echo #
DELIMITER $$;
CREATE or replace PROCEDURE p1() as
type stu_record is record(
  id int := 1,
  name_d  varchar(20) := 'a',
  score float := 0
);
type tklist is table of stu_record INDEX BY pls_integer;
stu_record_val tklist;
stu_record_val1 tklist;
begin
 stu_record_val(1).id := 10;
 select stu_record_val;
 stu_record_val(2).id := 20;
 stu_record_val(3).name_d := 'b3';
 stu_record_val(4) := stu_record_val(2);
 select stu_record_val(1),stu_record_val(2),stu_record_val(3),stu_record_val(4),stu_record_val;
 SELECT stu_record_val.count ;
 stu_record_val1(2) := stu_record_val(2);
 select stu_record_val1(2);
select stu_record_val(1).id,stu_record_val(2).id,stu_record_val(3).id,stu_record_val(4).id,stu_record_val;
end;
$$
DELIMITER ;$$
call p1;
drop PROCEDURE p1;

--echo #
--echo # test of record_table(row) := record_table(row)
--echo #
DELIMITER $$;
CREATE or replace PROCEDURE p1() as
type stu_record is record(
  id int := 1,
  name_d  varchar(20) := 'a',
  score float := 0
);
type tklist is table of stu_record INDEX BY pls_integer;
stu_record_val tklist;
begin
 stu_record_val(2) := stu_record_val(2);
 select stu_record_val(2);
end;
$$
DELIMITER ;$$
--error ER_SP_NOT_EXIST_OF_RECORD_TABLE
call p1;
drop PROCEDURE p1;

--echo #
--echo # test of record_table(row) := record_table
--echo #
DELIMITER $$;
CREATE or replace PROCEDURE p1() as
type stu_record is record(
  id int := 1,
  name_d  varchar(20) := 'a',
  score float := 0
);
type tklist is table of stu_record INDEX BY pls_integer;
stu_record_val tklist;
begin
 stu_record_val(2) := stu_record_val;
 select stu_record_val(2);
end;
$$
DELIMITER ;$$
--error ER_NOT_SUPPORTED_YET
call p1;
drop PROCEDURE p1;

--echo #
--echo # test of record_table(row) := null
--echo #
DELIMITER $$;
CREATE or replace PROCEDURE p1() as
type stu_record is record(
  id int := 1,
  name_d  varchar(20) := 'a',
  score float := 0
);
type tklist is table of stu_record INDEX BY pls_integer;
stu_record_val tklist;
begin
 stu_record_val(1).id := 10;
 stu_record_val(2).id := 20;
 stu_record_val(3) := null;
 stu_record_val(4) := stu_record(40,'bb',3.1);
 select stu_record_val(1),stu_record_val(2),stu_record_val(3),stu_record_val(4);
 stu_record_val(3).id := 30;
 select stu_record_val(1),stu_record_val(2),stu_record_val(3),stu_record_val(4);
end;
$$
DELIMITER ;$$
call p1;
drop PROCEDURE p1;

--echo #
--echo # test of record_table(row) := null
--echo #
DELIMITER $$;
--error ER_NOT_SUPPORTED_YET
CREATE or replace PROCEDURE p1() as
stu_record_val t_air_table := t_air_table(1=>t_air(1,'bb'));
begin
 select stu_record_val(1),stu_record_val(1).id,stu_record_val(1).type;
 stu_record_val(1) := null;
 select stu_record_val(1),stu_record_val(1).id,stu_record_val(1).type;
end;
$$
DELIMITER ;$$

--echo #
--echo # test of record_table(row) := null
--echo #
DELIMITER $$;
CREATE or replace PROCEDURE p1() as
stu_record_val t_air_table := t_air_table(t_air(1,'bb'));
begin
 select stu_record_val(1),stu_record_val(1).id,stu_record_val(1).type;
 stu_record_val(1) := null;
 select stu_record_val(1),stu_record_val(1).id,stu_record_val(1).type;
end;
$$
DELIMITER ;$$
call p1;
drop PROCEDURE p1;

--echo #
--echo # test of record_table(row) := null
--echo #
DELIMITER $$;
CREATE or replace PROCEDURE p1() as
stu_record_val t_air_table := t_air_table(t_air(1,'bb'));
begin
 select stu_record_val(1),stu_record_val(1).id,stu_record_val(1).type;
 stu_record_val(1) := null;
 stu_record_val(2) := null;
end;
$$
DELIMITER ;$$
--error ER_UDT_REF_UNINIT_COMPOSITE
call p1;
drop PROCEDURE p1;

--echo #
--echo # test of select record_table(row) into record
--echo #
DELIMITER $$;
CREATE or replace PROCEDURE p1() as
type stu_record is record(
  id int := 1,
  name_d  varchar(20) := 'a',
  score float := 0
);
type tklist is table of stu_record INDEX BY pls_integer;
stu_record_val tklist;
stu_record_val1 stu_record;
begin
 stu_record_val(2) := stu_record(10,'bb',2.0);
 select stu_record_val(2) into stu_record_val1;
 select stu_record_val1;
end;
$$
DELIMITER ;$$
call p1;
drop PROCEDURE p1;

--echo #
--echo # test of BULK COLLECT into
--echo #
DELIMITER $$;
--error ER_NOT_SUPPORTED_YET
CREATE or replace PROCEDURE p1() as
  type dr_type is table of tt_air%ROWTYPE index by VARCHAR2(30);
  dr_table dr_type;
begin
  select * BULK COLLECT into dr_table from tt_air;
  for i IN 1 .. dr_table.count loop
    select dr_table(i).id,dr_table(i).name1;
  end loop;
end;
$$
DELIMITER ;$$

--echo #
--echo # test of BULK COLLECT into
--echo #
DELIMITER $$;
CREATE or replace PROCEDURE p1() as
  type dr_type is table of tt_air%ROWTYPE index by PLS_INTEGER;
  dr_table dr_type;
begin
  select * BULK COLLECT into dr_table from tt_air;
  for i IN 1 .. dr_table.count loop
    select dr_table(i).id,dr_table(i).name1;
  end loop;
end;
$$
DELIMITER ;$$
call p1;
drop PROCEDURE p1;

--echo #
--echo # test of type dr_type is table of table%rowtype
--echo #
DELIMITER $$;
CREATE or replace PROCEDURE p1() as
  type dr_type is table of tt_air%ROWTYPE index by VARCHAR2(30);
  dr_table dr_type;
begin
  dr_table('id').id := 1;
  dr_table('id').name1 := t_air(1,'aa');
  dr_table('id1').id := 2;
  dr_table('id2').name1 := t_air(2,'bb');
  select dr_table('id'),dr_table('id1'),dr_table('id2');
end;
$$
DELIMITER ;$$
call p1;
drop PROCEDURE p1;

--echo #
--echo # test of type dr_type is table of table%rowtype
--echo #
DELIMITER $$;
CREATE or replace PROCEDURE p1() as
  type dr_type is table of tt_air%ROWTYPE index by VARCHAR2(30);
  dr_table dr_type;
begin
  dr_table('id').id := 1;
  dr_table('id').name1 := t_air(1,'aa');
  dr_table('id1').id := 2;
  dr_table('id2').name1 := t_air(2,'bb');
  select dr_table.first , dr_table.last ;
  for i IN dr_table.first .. dr_table.last loop
    select dr_table(i).id,dr_table(i).name1;
  end loop;
end;
$$
DELIMITER ;$$
--error ER_TRUNCATED_WRONG_VALUE
call p1;
drop PROCEDURE p1;

--echo #
--echo # test of type dr_type is table of table%rowtype
--echo #
DELIMITER $$;
CREATE or replace PROCEDURE p1() as
  type dr_type is table of tt_air%ROWTYPE index by PLS_INTEGER;
  dr_table dr_type;
begin
  dr_table(1).id := 1;
  dr_table(1).name1 := t_air(1,'aa');
  dr_table(2).id := 2;
  dr_table(3).name1 := t_air(2,'bb');
  for i IN dr_table.first .. dr_table.last loop
    select dr_table(i).id,dr_table(i).name1;
  end loop;
end;
$$
DELIMITER ;$$
call p1;
drop PROCEDURE p1;

--echo #
--echo # test of type dr_type is table of table%rowtype with default value
--echo #
DELIMITER $$;
CREATE or replace PROCEDURE p1() as
  type dr_type is table of tt_air%ROWTYPE index by PLS_INTEGER;
  dr_table dr_type := dr_type();
begin
  dr_table(1).id := 1;
  dr_table(1).name1 := t_air(1,'aa');
  dr_table(2).id := 2;
  dr_table(3).name1 := t_air(2,'bb');
  for i IN dr_table.first .. dr_table.last loop
    select dr_table(i).id,dr_table(i).name1;
  end loop;
end;
$$
DELIMITER ;$$
call p1;
drop PROCEDURE p1;

--echo #
--echo # test of type dr_type is table of table%rowtype with default value
--echo #
DELIMITER $$;
CREATE or replace PROCEDURE p1() as
  type dr_type is table of tt_air%ROWTYPE index by PLS_INTEGER;
  dr_table dr_type := dr_type(-1=>null);
begin
  select dr_table(-1).id,dr_table(-1).name1;
  dr_table(0).id := 0;
  dr_table(1).id := 1;
  dr_table(1).name1 := t_air(1,'aa');
  dr_table(2).id := 2;
  dr_table(3).name1 := t_air(2,'bb');
  for i IN dr_table.first .. dr_table.last loop
    select i,dr_table(i).id,dr_table(i).name1;
  end loop;
end;
$$
DELIMITER ;$$
call p1;
drop PROCEDURE p1;

--echo #
--echo # test of type dr_type is table of record table
--echo #
DELIMITER $$;
CREATE or replace PROCEDURE p1() as
 type stu_record is record(
  id int := 1,
  name1  varchar(20) ,
  score float := 0
 );
  type dr_type is table of stu_record index by VARCHAR2(30);
  dr_table dr_type;
begin
  dr_table('%%').id := 10;
  dr_table('&&').name1 := 'aaa';
  select dr_table('%%'),dr_table('&&');
end;
$$
DELIMITER ;$$
call p1;
drop PROCEDURE p1;

--echo #
--echo # test of type dr_type is table of record table
--echo #
DELIMITER $$;
CREATE or replace PROCEDURE p1() as
 type stu_record is record(
  id int := 1,
  name1  varchar(20) ,
  score float := 0
 );
  type dr_type is table of stu_record index by VARCHAR2(30);
  dr_table dr_type := dr_type('aa'=>stu_record(10,'qwe',2.1));
begin
  select dr_table('aa');
  dr_table('%%').id := 10;
  dr_table('&&').name1 := 'aaa';
  select dr_table('%%'),dr_table('&&');
end;
$$
DELIMITER ;$$
call p1;
drop PROCEDURE p1;

--echo #
--echo # test of type dr_type is table of record table
--echo #
DELIMITER $$;
CREATE or replace PROCEDURE p1() as
  TYPE rec1 IS RECORD (
    col1  varchar(30) := 'col1',
    col2   varchar(30) := 'col2',
    col3   varchar(30) := 'col3'
  ); 
  TYPE rec2 IS RECORD (
    v_t_rec1  rec1,  
    col4 varchar(30) := 'col4'
  );
  type rec3 is table of rec2 index by VARCHAR2(30);
  rec rec3;
  type dr_type is table of rec1 index by VARCHAR2(30);
  dr_table dr_type;
begin
  rec(1).col4 := 'col5';
  select rec(1),rec(1).v_t_rec1;
  dr_table(1) := rec(1).v_t_rec1;
  select dr_table(1);
end;
$$
DELIMITER ;$$
call p1;
drop PROCEDURE p1;

--echo #
--echo # test of type dr_type is table of record table
--echo #
DELIMITER $$;
CREATE or replace PROCEDURE p1() as
 type stu_record is record(
  id int := 1,
  name1  varchar(20) ,
  score float := 0
 );
  type dr_type is table of stu_record index by VARCHAR2(3);
  dr_table dr_type := dr_type('aaaa'=>stu_record(10,'qwe',2.1));
begin
end;
$$
DELIMITER ;$$
--error ER_WRONG_PARAMCOUNT_TO_TYPE_TABLE
call p1;
drop PROCEDURE p1;

--echo #
--echo # test of type dr_type is table of record table
--echo #
DELIMITER $$;
CREATE or replace PROCEDURE p1() as
 type stu_record is record(
  id int := 1,
  name1  varchar(20) ,
  score float := 0
 );
  type dr_type is table of stu_record index by PLS_INTEGER;
  dr_table dr_type := dr_type('-10'=>stu_record(10,'qwe',2.1),'10'=>stu_record(20,'qwe12',20.1));
begin
  select dr_table('-10'),dr_table('10');
end;
$$
DELIMITER ;$$
call p1;
drop PROCEDURE p1;

--echo #
--echo # test of type dr_type is table of record table
--echo #
DELIMITER $$;
CREATE or replace PROCEDURE p1() as
  type dr_type is table of tt_air%ROWTYPE index by PLS_INTEGER;
  dr_table dr_type;
begin
  for i IN dr_table.first .. dr_table.last loop
    select i,dr_table(i).id,dr_table(i).name1;
  end loop;
end;
$$
DELIMITER ;$$
call p1;
drop PROCEDURE p1;

--echo #
--echo # test of type dr_type is table of record table
--echo #
DELIMITER $$;
CREATE or replace PROCEDURE p1() as
  type dr_type is table of tt_air%ROWTYPE index by varchar(20);
  dr_table dr_type;
begin
  dr_table('aa').id := 10;
  for i IN dr_table.first .. dr_table.last loop
    select i,dr_table(i).id,dr_table(i).name1;
  end loop;
end;
$$
DELIMITER ;$$
--error ER_TRUNCATED_WRONG_VALUE
call p1;
drop PROCEDURE p1;

--echo #
--echo # test of type dr_type is table of record table
--echo #
DELIMITER $$;
CREATE or replace PROCEDURE p1() as
  type dr_type is table of tt_air%ROWTYPE index by PLS_INTEGER;
  dr_table dr_type := dr_type(-1=>null);
begin
  dr_table(1).id := 1;
  dr_table(1).name1 := t_air(1,'aa');
  for i IN dr_table.first .. dr_table.last loop
    select i,dr_table(i).id,dr_table(i).name1;
  end loop;
end;
$$
DELIMITER ;$$
--error ER_SP_NOT_EXIST_OF_RECORD_TABLE
call p1;
drop PROCEDURE p1;

--echo #
--echo # test of type dr_type is table of record table with same index
--echo #
DELIMITER $$;
CREATE or replace PROCEDURE p1() as
  type dr_type is table of tt_air%ROWTYPE index by PLS_INTEGER;
  dr_table dr_type := dr_type(-1=>null,-1=>null);
begin
end;
$$
DELIMITER ;$$
--error ER_NOT_SUPPORTED_YET
call p1;
drop PROCEDURE p1;

--echo #
--echo # test of type dr_type is table of record table with same index
--echo #
DELIMITER $$;
--error ER_SP_UNDECLARED_VAR
CREATE or replace PROCEDURE p1() as
  type dr_type is table of tt_air%ROWTYPE index by PLS_INTEGER;
  dr_table dr_type := dr_type(-1=>null);
begin
  select 1dr_table(i).name1.id;
end;
$$
DELIMITER ;$$


--echo #
--echo # test of udt type in sp and table.first && table.last
--echo #
DELIMITER $$;
CREATE or replace PROCEDURE p1() as
  type dr_type is table of tt_air%ROWTYPE index by binary_integer;
  dr_table dr_type:=dr_type(-1=>null,2=>null);
begin
  select dr_table.first , dr_table.last;
end;
$$
DELIMITER ;$$
call p1();
drop PROCEDURE p1;

--echo #
--echo # test of udt type in sp and table.first && table.last
--echo #
DELIMITER $$;
CREATE or replace PROCEDURE p1() as
  type dr_type is table of tt_air%ROWTYPE index by binary_integer;
  dr_table dr_type:=dr_type(1=>null,-1=>null);
begin
  dr_table(0).id := 10;
  dr_table(1).id := 20;
  for i IN reverse dr_table.first .. 1 loop
    select i, dr_table.first , dr_table.last,dr_table(i);
  end loop;
end;
$$
DELIMITER ;$$
call p1();
drop PROCEDURE p1;

--echo #
--echo # test of udt type in sp and table.first && table.last
--echo #
DELIMITER $$;
CREATE or replace PROCEDURE p1() as
  type dr_type is table of tt_air%ROWTYPE index by binary_integer;
  dr_table dr_type:=dr_type(1=>null,-1=>null);
begin
  dr_table(0).id := 10;
  dr_table(1).id := 20;
  for i IN reverse dr_table.first .. dr_table.last loop
    select i, dr_table.first , dr_table.last,dr_table(i);
  end loop;
end;
$$
DELIMITER ;$$
call p1();
drop PROCEDURE p1;

--echo #
--echo # test of udt type in sp and FORALL
--echo #
create table tt_air1(id int,name t_air);
DELIMITER $$;
--error ER_NOT_SUPPORTED_YET
CREATE or replace PROCEDURE p1() as
  type dr_type is table of tt_air%ROWTYPE index by varchar(10);
  dr_table dr_type;
begin
  dr_table(100).id := 100;
  dr_table(100).name := t_air(2,'eert');
  FORALL i IN dr_table.first .. dr_table.last
    insert into tt_air1 values dr_table (i);
  select * from tt_air1;
end;
$$
DELIMITER ;$$

--echo #
--echo # test of udt type in sp and FORALL
--echo #
DELIMITER $$;
--error ER_NOT_SUPPORTED_YET
CREATE or replace PROCEDURE p1() as
  type dr_type is table of tt_air%ROWTYPE index by varchar(10);
  dr_table dr_type;
begin
  dr_table(100).id := 100;
  dr_table(100).name := t_air(2,'eert');
  FORALL i IN dr_table.first .. 101
    insert into tt_air1 values dr_table (i);
  select * from tt_air1;
end;
$$
DELIMITER ;$$
drop table tt_air1;

--echo #
--echo # test of udt type in sp and FORALL
--echo #
DELIMITER $$;
CREATE or replace PROCEDURE p1() as
  type tklist is table of varchar(20) index by VARCHAR(20);
  stu_record_val tklist;
begin
  stu_record_val('01') := 10;
  stu_record_val('-1') := 20;
  select stu_record_val.first,stu_record_val.last;
  stu_record_val('1') := 20;
  select stu_record_val.first,stu_record_val.last;
end;
$$
DELIMITER ;$$
call p1();
drop PROCEDURE p1;

--echo #
--echo # test of udt type table used in hybrid_type function
--echo #
DELIMITER $$;
CREATE or replace PROCEDURE p1() as
  type tklist is table of varchar(20);
  stu_record_val tklist := tklist();
  id int := 1;
begin
 select stu_record_val+1;
end;
$$
DELIMITER ;$$
--error ER_NOT_SUPPORTED_YET
call p1();
drop PROCEDURE p1;

--echo #
--echo # test of udt type table used in hybrid_type function
--echo #
DELIMITER $$;
CREATE or replace PROCEDURE p1() as
  type tklist is table of varchar(20);
  stu_record_val tklist := tklist();
  id int := 1;
begin
 id := stu_record_val+1;
end;
$$
DELIMITER ;$$
--error ER_NOT_SUPPORTED_YET
call p1();
drop PROCEDURE p1;

--echo #
--echo # test of udt type table used in hybrid_type function
--echo #
DELIMITER $$;
CREATE or replace PROCEDURE p1() as
type stu_record is record(
  id int := 1,
  name_d  varchar(20) := 'a',
  score float := 0
);
type tklist is table of stu_record INDEX BY pls_integer;
stu_record_val tklist;
begin
 stu_record_val(2) := stu_record(1,'a',1);
 select stu_record_val+1;
end;
$$
DELIMITER ;$$
--error ER_NOT_SUPPORTED_YET
call p1();
drop PROCEDURE p1;

--echo #
--echo # test of udt type table set by same table
--echo #
DELIMITER $$;
CREATE or replace PROCEDURE p1() as
type stu_record is record(
  id int := 1,
  name_d  varchar(20) := 'a',
  score float := 0
);
type tklist is table of stu_record INDEX BY pls_integer;
stu_record_val tklist;
begin
 stu_record_val(1) := stu_record(1,'a',1);
 stu_record_val(2) := stu_record_val(1);
 select stu_record_val(2);
end;
$$
DELIMITER ;$$
call p1();
drop PROCEDURE p1;

--echo #
--echo # test of udt type table set by same table
--echo #
DELIMITER $$;
CREATE or replace PROCEDURE p1() as
  TYPE rec1 IS RECORD (
    col1  varchar(30) := 'col1',
    col2   varchar(30) := 'col2',
    col3   varchar(30) := 'col3'
  );
  TYPE rec2 IS RECORD (
    v_t_rec1  rec1,  
    col4 varchar(30) := 'col4'
  );
  type rec3 is table of rec2 index by VARCHAR2(30);
  rec rec3;
  rec4 rec3;
begin
  rec(1).v_t_rec1.col1 := 'col10';
  select rec(1).v_t_rec1;
  rec4 := rec;
  select rec4(1).v_t_rec1;
  rec(1).v_t_rec1.col1 := 'col110';
  select rec(1).v_t_rec1,rec4(1).v_t_rec1;
  rec4(1).v_t_rec1.col1 := 'col1110';
  select rec(1).v_t_rec1,rec4(1).v_t_rec1;
end;
$$
DELIMITER ;$$
call p1();
drop PROCEDURE p1;

--echo #
--echo # test of udt type table set by same table
--echo #
DELIMITER $$;
CREATE or replace PROCEDURE p1() as
  TYPE rec1 IS RECORD (
    col1  varchar(30) := 'col1',
    col2   varchar(30) := 'col2',
    col3   varchar(30) := 'col3'
  );
  type rec11 is table of rec1 index by VARCHAR2(30);
  TYPE rec2 IS RECORD (
    v_t_rec1  rec11,  
    col4 varchar(30) := 'col4'
  );
  type rec3 is table of rec2 index by VARCHAR2(30);
  rec rec3;
  rec4 rec3;
begin
  rec(1).v_t_rec1(0).col1 := 'col10';
  select rec(1).v_t_rec1(0).col1;
  rec4 := rec;
  select rec4(1).v_t_rec1(0).col1;
  rec(1).v_t_rec1(0).col1 := 'col110';
  select rec(1).v_t_rec1(0).col1,rec4(1).v_t_rec1(0).col1;
  rec4(1).v_t_rec1(0).col1 := 'col1110';
  select rec(1).v_t_rec1(0).col1,rec4(1).v_t_rec1(0).col1;
end;
$$
DELIMITER ;$$
call p1();
drop PROCEDURE p1;

--echo #
--echo # test of create table as select udt()
--echo #
create table zgh1 as SELECT t_air(1,'aa') FROM dual;
drop table zgh1;
create table zgh1 as SELECT t_air(1,'aa') a FROM dual;
show create table zgh1;
select * from zgh1;
drop table zgh1;
--error ER_NOT_SUPPORTED_YET
create table zgh1 as SELECT t_air_table(t_air(1,'aa'),t_air(1,'aa')) FROM dual;
create or replace type my_integer is varray(10) of integer;
--error ER_NOT_SUPPORTED_YET
create table zgh1 as select my_integer(1, 2) from dual;
drop type my_integer;
create table zgh1 as SELECT t_air(1,'aa') a,t_air(10,'aa1') b FROM dual;
select * from zgh1;
drop table zgh1;

--echo #
--echo # bugfix7335
--echo #
create table t1(f_type1 t_air,f_type2 t_air,i int);
--error ER_NOT_SUPPORTED_YET
alter table t1 modify f_type1 int,modify f_type2 int;
--error ER_NOT_SUPPORTED_YET
ALTER TABLE t1 CHANGE COLUMN f_type1 mobile char(11),CHANGE COLUMN i j varchar(20);
drop table t1;

--echo #
--echo # bugfix7367
--echo #
create or replace type type1 as object(id int,type varchar(20));
create or replace type type2 is object(id2 int,name2 varchar(20));
create table t1(id int AUTO_INCREMENT,f1 type1 default null,primary key (id));
ALTER TABLE  t1 ADD f2 type2;
insert into t1 select 6,type1(NULL,'NULL'),type2(null,'fffff');
insert into t1 select 7,type1(1,'NULL'),type2(22,'fffff');
--error ER_WRONG_ARGUMENTS
SELECT id,f1,f2 FROM t1 WHERE f1 < f2;
select * from t1 where (select f1 from t1 limit 1)=f1;
select * from t1 where (select f1 from t1 where id=7)=f1;
--error ER_UDT_INCONS_DATATYPES
select * from t1 where (select f1 from t1 where id=7)=id;
select * from t1 where (select f1 from t1 where id=7)=type1(1,'NULL');
--error ER_NOT_SUPPORTED_YET
select * from t1 where (select f1 from t1 where id=7)=t_air_table(t_air(1,'NULL'));
select * from t1 where (select f1 from t1 where id=7)=(select f1 from t1 where id=7);
--error ER_UDT_INCONS_DATATYPES
select * from t1 where (select f1 from t1 where id=7)=(select id from t1 where id=7);
select * from t1 where (select f1 from t1 where id=7)=(select a.f1 from t1 a join t1 b on a.id=7 limit 1);
select * from t1 where (select id from t1 where id=7)=(select id from t1 where id=7); 
select * from t1 where (select id from t1 where id=7 limit 1)=(select id from t1 where id=7 limit 1);
select (select * from t1 limit 1)=(select 1,2,3);
select (select * from t1 limit 1)=(select 6,type1(NULL,'NULL'),type2(null,'fffff'));
drop table t1;
drop type type1;
drop type type2;

drop table tt_air;
drop TYPE t_air_table;
drop type t_air;


--echo #
--echo # bugfix7591
--echo #
CREATE TABLE t1 (
  id int NOT NULL,
  c1 varchar(200) DEFAULT NULL,
  c2 varchar(200) DEFAULT NULL,
  PRIMARY KEY (id)
);

DELIMITER $$;
CREATE OR REPLACE PROCEDURE p1() as
 TYPE table_type IS TABLE OF t1%ROWTYPE index by VARCHAR(3070); 
 v_table_type table_type;
BEGIN
  v_table_type('abc').c1:= 'John';
  select v_table_type('abc').c1;
END;
$$
DELIMITER ;$$
--error ER_TOO_LONG_KEY
call p1();
drop PROCEDURE p1;

DELIMITER $$;
CREATE OR REPLACE PROCEDURE p1() as
 TYPE table_type IS TABLE OF t1%ROWTYPE index by VARCHAR(500); 
 v_table_type table_type;
BEGIN
  v_table_type('abc').c1:= 'John';
  select v_table_type('abc').c1;
END;
$$
DELIMITER ;$$
call p1();
drop PROCEDURE p1;
drop table t1;





