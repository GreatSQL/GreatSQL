create sequence seq1;
create sequence seq2;
create table t1(ida int, age int);
select seq1.nextval, seq1.currval from dual;
insert into t1 values(1, 2), (2, 3);
select seq1.nextval from t1;
select seq1.currval, t1.ida from t1 where t1.ida in (select age from t1);
select seq1.nextval+1 from t1;
select seq1.nextval+1, seq1.nextval "a", concat(seq1.nextval+age, 3), ida from t1;
select seq1.currval from t1;
select seq1.currval, floor(seq1.nextval) from t1;

insert into t1 select seq1.nextval, seq1.currval from t1;
select * from t1;
insert into t1 values(seq1.nextval, 11);
insert into t1 values(seq1.nextval, seq1.currval);
insert into t1 values(seq1.currval, 110);
select * from t1;
update t1 set ida = seq1.nextval, age = seq1.currval where ida = 1;
update t1 set ida = seq1.nextval, age = seq1.nextval+2 where ida is not null;
select * from t1;
create table t2(ida int, age int);
insert into t2 values(1, 4), (2, 5);
insert into t2 select seq1.nextval, floor(seq2.nextval) from t1;
select * from t2;
select seq1.currval, seq2.nextval, seq1.nextval from t1 where t1.ida in (select age from t1);

select * from t1;
select case when seq1.currval = 14 then 14 else seq1.nextval end from t1;
select case when seq1.nextval is null then true else false end from t1;

--error ER_GDB_SEQUENCE_POSITION
select * from t1 where seq1.nextval > 5;
--error ER_GDB_SEQUENCE_POSITION
select count(*) from t1 group by seq1.nextval, ida;
--error ER_GDB_SEQUENCE_POSITION
select distinct ida, seq1.currval from t1;
--error ER_GDB_SEQUENCE_POSITION
select * from t1 where t1.ida in (select seq1.nextval from t1);
--error ER_GDB_SEQUENCE_POSITION
select * from t1 join t1 t2 on t1.ida = seq1.nextval;
--error ER_GDB_SEQUENCE_POSITION
select seq1.nextval, ida from t1 union select ida, age from t1; 
--error ER_GDB_SEQUENCE_POSITION
select 1, ida from t1 union select ida, seq1.currval from t1;
--error ER_GDB_SEQUENCE_POSITION
select seq1.currval from t1 order by ida;
explain format=tree update t1 join t2 on t1.ida > t2.ida set t1.ida = seq1.nextval, t2.ida = seq2.nextval;
explain format=tree update t1, t2 set t1.ida = seq1.nextval, t2.ida = seq1.nextval where t1.ida < 5;
--error ER_GDB_SEQUENCE_POSITION
update t1 set ida = seq1.nextval, age = (select seq2.nextval from dual) where ida = 15;

insert into t1 values(seq1.currval,seq1.currval),(seq1.currval,seq1.currval);
insert into t1 values(seq1.nextval,seq1.currval),(seq1.nextval,seq1.currval);

drop table t1, t2;
drop sequence seq1;
drop sequence seq2;

--echo [#### test bug8528 start ####]
create table t1(c1 varchar(20), c2 varchar(20));
insert into t1 values('11', 'aa'),('22', 'bb');
create sequence seq2 start with 2 increment by 2 minvalue 1 maxvalue 1000000 cycle cache 10 order;
--error ER_GDB_SEQUENCE_POSITION
select c1, row_number() over (partition by seq2.nextval order by t1.c2) from t1;
--error ER_GDB_SEQUENCE_POSITION
select c1, row_number() over (order by seq2.nextval) from t1;
--error ER_GDB_SEQUENCE_POSITION
select * from t1 order by seq2.nextval;
--error ER_GDB_SEQUENCE_POSITION
select sum(seq2.nextval) from t1;
--error ER_GDB_SEQUENCE_POSITION
select max(seq2.nextval) from t1;
--error ER_GDB_SEQUENCE_POSITION
select FIRST_VALUE(seq2.nextval) OVER (order by t1.c2) from t1;
--error ER_GDB_SEQUENCE_POSITION
select FIRST_VALUE(max(seq2.nextval)) OVER (order by t1.c2) from t1;
select c1, seq2.nextval, row_number() over (order by t1.c2) from t1;

drop table t1;
drop sequence seq2;
--echo [#### test bug8528 end ####]

--echo [#### test bug8742 start ####]
create table t1(c1 varchar(20), c2 varchar(20));
insert into t1 values('11', 'aa'),('22', 'bb'), ('33', 'aa'), ('44', 'bb');
create table t2(c1 varchar(20), c2 varchar(20));
insert into t2 select * from t1;
create sequence seq2 start with 2 increment by 2 minvalue 1 maxvalue 1000000 cycle cache 10 order;

select t1.c1, t2.c2, seq2.nextval, row_number() over (partition by t1.c1 order by t1.c2) from t1, t2 where t1.c1 = t2.c1 and t1.c2 = t2.c2;
select t1.c1, t2.c2, seq2.nextval, row_number() over (partition by t1.c2 order by t1.c1) from t1, t2 where t1.c1 = t2.c1 and t1.c2 = t2.c2;
select t1.c1, t2.c2, seq2.nextval, row_number() over (order by t1.c1) from t1, t2 where t1.c1 = t2.c1 and t1.c2 = t2.c2;
select t1.c1, t2.c2, seq2.nextval, row_number() over (partition by t1.c2) from t1, t2 where t1.c1 = t2.c1 and t1.c2 = t2.c2;
select seq2.nextval, FIRST_VALUE(t1.c1) OVER (partition by t1.c1 order by t1.c2) from t1, t2 where t1.c1 = t2.c1 and t1.c2 = t2.c2;
select seq2.nextval, FIRST_VALUE(t1.c1) OVER (partition by t1.c2 order by t1.c1) from t1, t2 where t1.c1 = t2.c1 and t1.c2 = t2.c2;

drop table t1;
drop table t2;
drop sequence seq2;
--echo [#### test bug8742 end ####]

--echo
--echo [######### test dml in sp #########]
create table t1(c1 int primary key, c2 int);
create sequence seq;
--echo
--echo [# test prepared statement(similar in sp)]
prepare sql1 from 'insert into t1 values (seq.nextval,seq.currval)';
execute sql1;
execute sql1;
execute sql1;
select * from t1;
prepare sql2 from 'update t1 set c1=seq.currval, c2 = seq.nextval';
execute sql2;
select * from t1;
execute sql2;
select * from t1;
execute sql2;
select * from t1;
truncate table t1;
deallocate prepare sql1;
deallocate prepare sql2;

--echo
--echo [# test in sp(procedure,function,trigger)]
delimiter $$;
create procedure sp1()
begin
insert into t1 values(seq.nextval, seq.currval);
end;$$
create procedure sp2()
begin
update t1 set c1=seq.currval, c2=seq.nextval;
end;$$
delimiter ;$$
call sp1();
call sp1();
call sp1();
select * from t1;
call sp2();
select * from t1;
call sp2();
select * from t1;
call sp2();
select * from t1;
drop procedure sp1;
drop procedure sp2;

--echo
--echo [# bugfix 6679: http://zbox.greatdb.com/zentao/bug-view-6679.html]
select lpad(seq.nextval, 18, 0);

drop table t1;
drop sequence seq;

--echo
--echo [# bugfix 7472:http://zbox.greatdb.com/zentao/bug-view-7472.html]
drop procedure if exists p1;
drop table if exists t1;
create table t1(i int);
delimiter $$;
create procedure p1()
begin
declare max int;
drop sequence if exists myseq;
create sequence myseq start with 1 increment by 1;
set @max=(select myseq.nextval from dual);
end$$
delimiter ;$$
--error ER_GDB_SEQUENCE_POSITION
call p1();
drop sequence myseq;
drop procedure p1;
drop table t1;

--echo
--echo [# bugfix 7453: http://zbox.greatdb.com/zentao/bug-view-7453.html]
delete from mysql.greatdb_sequences_persist;
drop sequence if exists myseq;
create sequence myseq minvalue 1000 start with 1000 maxvalue 10000 increment by 1000;
select myseq.nextval from dual;
select myseq.currval from dual;
--error ER_GDB_ALTER_SEQUENCE
alter sequence myseq maxvalue 6000;
drop sequence if exists myseq;
create sequence myseq minvalue 1000 start with 1000 maxvalue 10000 increment by 1000;
drop sequence myseq;

--echo
--echo [# bugfix 7617:http://zbox.greatdb.com/zentao/bug-view-7617.html]
drop sequence if exists myseq;
create sequence myseq start with 1;
drop view if exists v1;
--error ER_VIEW_SELECT_SEQUENCE
create view v1 as select myseq.nextval from dual;
drop sequence myseq;

--echo
--echo [# bugfix 8144:http://zbox.greatdb.com/zentao/bug-view-8144.html]
--echo [sequence in cursor]
create table t1(id int);
insert into t1 values (1);
create sequence myseq;
select @@sql_mode into @sql_mode_saved;
set sql_mode=oracle; 
delimiter $$;
CREATE or replace PROCEDURE p1() as
a int;
cursor c2 is select myseq.nextval from t1;
begin 
open c2;
loop
fetch c2 into a; 
exit when c2%notfound; 
select a; 
end loop;
end;$$
delimiter ;$$
call p1();
call p1();
drop sequence myseq;
drop procedure p1;
drop table t1;
set @@sql_mode = @sql_mode_saved;

--echo
--echo [# bugfix 7455:http://zbox.greatdb.com/zentao/bug-view-7455.html]
drop sequence if exists seq_cycle;
--error ER_GDB_CREATE_SEQUENCE
create sequence seq_cycle increment by 1 start with 10 minvalue 5 cycle;

--echo
--echo [# bugfix 7448:http://zbox.greatdb.com/zentao/bug-view-7448.html]
CREATE SEQUENCE MYSEQ MINVALUE 1 START WITH 10000 MAXVALUE 15000 INCREMENT BY 6000 CYCLE CACHE 2;
drop sequence MYSEQ;
--error ER_GDB_CREATE_SEQUENCE
CREATE SEQUENCE MYSEQ MINVALUE 1 START WITH 10000 MAXVALUE 15000 INCREMENT BY 6000 CYCLE CACHE 10;


--echo [# bugfix 8822:http://zbox.greatdb.com/zentao/bug-view-8822.html]
CREATE SEQUENCE seq1;
select (seq1.nextval%(seq1.nextval+1))*rownum from dual connect by level<2; 

drop sequence seq1;

--echo [# bugfix 7431:http://zbox.greatdb.com/zentao/bug-view-7431.html]
CREATE SEQUENCE myseq MINVALUE 1 START WITH 1 NOMAXVALUE INCREMENT BY 1 NOCYCLE CACHE 30;
select myseq.nextval from dual connect by level<10;

drop sequence myseq;

CREATE SEQUENCE myseq ;

select myseq.nextval,sys_connect_by_path(myseq.nextval,'->') from dual connect by level<10;
drop sequence myseq;

create sequence seq minvalue -10 maxvalue 10 increment by 1 start with -9;

select seq.nextval;

drop sequence seq;

create sequence xx;

select xx.nextval;

--error ER_GDB_ALTER_SEQUENCE
alter sequence xx  Minvalue 15;

drop sequence xx;


--echo [# bugfix 9419: enable using sequence for multi table update]
create table t1(c1 int primary key, c2 varchar(64));
create table t2(c1 int primary key, c2 varchar(64));
create sequence seq;
insert into t1 values (1,1),(2,2),(3,3),(4,4),(5,5);
insert into t2 values (1,1),(2,2),(3,3),(4,4),(5,5);
explain
 update t1,t2
    set t1.c2=concat(seq.currval,'_',seq.nextval), t2.c2=concat(seq.currval,'_',seq.nextval)
  where t1.c1=t2.c1;
explain format=tree
 update t1,t2
    set t1.c2=concat(seq.currval,'_',seq.nextval), t2.c2=concat(seq.currval,'_',seq.nextval)
  where t1.c1=t2.c1;
update t1,t2
   set t1.c2=concat(seq.currval,'_',seq.nextval), t2.c2=concat(seq.currval,'_',seq.nextval)
 where t1.c1=t2.c1;
select * from t1;
select * from t2;
drop table t1,t2;
drop sequence seq;

--echo [# bugfix 7431:http://zbox.greatdb.com/zentao/bug-view-7431.html]

create sequence q1;
select q1.nextval;

set @v=q1.currval;
select @v;

drop sequence q1;

create sequence q1;
select q1.nextval;

set sql_mode=oracle;
delimiter $$;

declare
v int;
begin
 v:= q1.currval;
 select v;
end;
$$
delimiter ;$$

drop sequence q1;

create sequence q1;

set @n=q1.nextval;
select @n;

set @a=q1.nextval,@b=q1.nextval;
select @a,@b;
set @a=q1.nextval,@b=q1.currval;
select @a,@b;
drop sequence q1;


CREATE TABLE seq_windows (
    name VARCHAR2(20) PRIMARY KEY,
    score INT NOT NULL,
    team varchar2(2)
);

INSERT INTO
 seq_windows(name, score,team)
VALUES
 ('Smith',81,'2');
INSERT INTO
 seq_windows(name, score,team)
VALUES
 ('Jones',55,'2');
INSERT INTO
 seq_windows(name, score,team)
VALUES
 ('Williams',55,'1');
INSERT INTO
 seq_windows(name, score,team)
VALUES
 ('Taylor',62,'3');
INSERT INTO
 seq_windows(name, score,team)
VALUES
 ('Brown',62,'2');
INSERT INTO
 seq_windows(name, score,team)
VALUES
 ('Davies',84,'1');
INSERT INTO
 seq_windows(name, score,team)
VALUES
 ('Evans',87,'2');
INSERT INTO
 seq_windows(name, score,team)
VALUES
 ('Wilson',72,'2');
INSERT INTO
 seq_windows(name, score,team)
VALUES
 ('Thomas',72,'1');
INSERT INTO
 seq_windows(name, score,team)
VALUES
 ('小张',100,'3');


CREATE SEQUENCE seq_table_windows
    START WITH 1
    INCREMENT BY 1
    NOCACHE
    NOCYCLE;

select
    seq_table_windows.nextval, rownum,
    ROW_NUMBER() OVER (ORDER BY score) row_num,
    RANK() OVER (PARTITION BY team ORDER BY score) rank_val,name,score,team
from seq_windows where rownum < 11.5425;


select
    seq_table_windows.nextval + 1,
    ROW_NUMBER() OVER (ORDER BY score) row_num
from seq_windows ;

select
    seq_table_windows.nextval + score,score,
    ROW_NUMBER() OVER (ORDER BY score) row_num
from seq_windows ;

select
    seq_table_windows.nextval + score,
    ROW_NUMBER() OVER (ORDER BY score) row_num
from seq_windows ;

drop sequence seq_table_windows;
drop table seq_windows;


CREATE SEQUENCE id_seq;
delimiter //;
create procedure sp2()
AS
  id int;
BEGIN
   id := id_seq.NEXTVAL;
   select id ;
END;
//
create procedure sp3()
AS
  id int;
BEGIN
   id := id_seq.currval;
   select id ;
END;

//
delimiter ;//

--error ER_GDB_READ_SEQUENCE
call sp3;

call sp2;
call sp3;

call sp2;
call sp2;

select id_seq.nextval;

call sp2;
call sp3;

drop procedure sp2;
drop procedure sp3;
delimiter //;
create function f2 RETURN INT
AS
BEGIN
   return id_seq.NEXTVAL; 
END;
//

create function f3  RETURN INT
AS
BEGIN
   return id_seq.currval; 
END;
//
delimiter ;//

 
select f2() from dual;
select f2() from dual;
select f3() from dual;
select f2() from dual;

select f3() from dual;

drop function f2;
drop function f3;

drop sequence id_seq;


CREATE TABLE ta1 (
    id NUMBER,
    name VARCHAR2(50)
);
CREATE SEQUENCE id_seq START WITH 1 INCREMENT BY 1 NOCACHE;
delimiter //;
CREATE TRIGGER id_trigger
BEFORE INSERT ON ta1
FOR EACH ROW
BEGIN
    :NEW.id := id_seq.NEXTVAL;
END;
//
delimiter ;//
INSERT INTO ta1 (name) VALUES ('Alice');
INSERT INTO ta1 (name) VALUES ('Alice');
INSERT INTO ta1 (name) VALUES ('Alice');

select * from ta1;

drop TRIGGER id_trigger;
drop table ta1;
drop sequence id_seq;


--echo [# bugfix 10096: sequence memory leak, caused by length of "test.seq_backend" > 15]
create sequence seq_backend;
select seq_backend.nextval;
select seq_backend.nextval;
drop sequence seq_backend;
