create table t1(c1 int, c2 varchar(10));
create table t2(c1 int, c2 varchar(10));
create table t3(c1 int, c2 varchar(10));

insert into t1 values(1, 'abc');
insert into t1 values(2, 'cde');

insert into t2 values(1, 'fgh');
insert into t2 values(2, 'ijk');
insert into t2 values(3, 'lmn');

insert into t3 values(3, 'zzz');

select * from t1 full join t2 on t1.c1=t2.c1;
select * from t1 full join t2 on t1.c1=t2.c1 and t1.c1=1;
select * from t1 full join t2 on t1.c1=t2.c1 and t2.c1=1;
select * from t1 full join t2 on t1.c1=t2.c1 where t1.c1=1;
select * from t2 full join t3 on t2.c1=t3.c1 where t2.c1=1;
select * from t2 full join t3 on t2.c1=t3.c1 where t3.c1=1;
select * from t1 full join (t2 full join t3 on t2.c1=t3.c1) on t1.c1=t2.c1;


select * from t1 full join (t2 full join t3 on t2.c1=t3.c1) on t1.c1=t3.c1;
select * from t1 full join (t2 full join t3 on t2.c1=t3.c1) on t1.c1=t2.c1 where t2.c1 = 1;

--echo explain json test
--replace_regex /(_cost": )"[0-9.]+"/\1"#"/ /(per_join": )"[0-9]+"/\1"#"/ /(per_scan": )[0-9]+/\1"#"/ /(per_join": )[0-9]+/\1"#"/
explain format=json select * from t1 full join t2 on t1.c1=t2.c1;

--echo
--echo >>>>>>> full join with derived table(s)
select * from t1 full join (select t2.c1, t2.c2 from t2 full join t3 on t2.c1=t3.c1 where t3.c1=1) ta on t1.c1=ta.c1;
select * from t1 full join (select t2.c1, t2.c2 from t2 full join t3 on t2.c1=t3.c1 where t2.c1=1) ta on t1.c1=ta.c1;

select * from t1 left join (select t2.c1, t2.c2 from t2 full join t3 on t2.c1=t3.c1 where t3.c1=1) ta on t1.c1=ta.c1;
select * from t1 left join (select t2.c1, t2.c2 from t2 full join t3 on t2.c1=t3.c1 where t2.c1=1) ta on t1.c1=ta.c1;
select * from t1 full join (select t2.c1, t2.c2 from t2 left join t3 on t2.c1=t3.c1 where t2.c1=1) ta on t1.c1=ta.c1;

select * from t1 right join (select t2.c1, t2.c2 from t2 full join t3 on t2.c1=t3.c1 where t2.c1=1) ta on t1.c1=ta.c1;
select * from t1 full join (select t2.c1, t2.c2 from t2 right join t3 on t2.c1=t3.c1 where t2.c1=1) ta on t1.c1=ta.c1;

--replace_regex /cost=\d+\.\d+\ rows=\d+/cost=* rows=*/
explain format=tree select * from (select 1 from dual) ta full join t1 on ta.1=t1.c1;
select * from (select 1 from dual) ta full join t1 on ta.1=t1.c1;
drop table t1;
drop table t2;
drop table t3;

--echo >>>>>>> Following testcases are dervied from main suite testcases
--echo >>>>>>> such as main.join
#
# Initialization
--disable_warnings
drop table if exists t1,t2,t3;
--enable_warnings

# set to oracle mode for oracle-style sorting results
set sql_mode=oracle;

#
# Test basic syntaxes
#

CREATE TABLE t1 (S1 INT);
CREATE TABLE t2 (S1 INT);
INSERT INTO t1 VALUES (1);
INSERT INTO t2 VALUES (2);

SELECT * from t1 FULL JOIN t2 ON (t2.S1=2);
SELECT * from t2 FULL JOIN t1 ON(t1.S1=1);

# Note: full join with 'USING' is not support now
--error ER_NOT_SUPPORTED_YET
SELECT * from t2 FULL JOIN t1 USING(S1);
--error ER_NOT_SUPPORTED_YET
SELECT * from t1 FULL JOIN t2 USING(S1);

drop table t1,t2;

create table t1 (id int primary key);
create table t2 (id int);
insert into t1 values (75);
insert into t1 values (79);
insert into t1 values (78);
insert into t1 values (77);
replace into t1 values (76);
replace into t1 values (76);
insert into t1 values (104);
insert into t1 values (103);
insert into t1 values (102);
insert into t1 values (101);
insert into t1 values (105);
insert into t1 values (106);
insert into t1 values (107);

insert into t2 values (107);
insert into t2 values (75);
insert into t2 values (1000);

#
# Test problems with impossible ON or WHERE
# TODO: FOR NOW THE OUTPUT IS NOT EXPECTED
#
# --sorted_result
# select t1.id,t2.id from t2 full join t1 on t1.id>=74 and t1.id<=0 where t2.id=75 and t1.id is null;
# explain select t1.id,t2.id from t2 full join t1 on t1.id>=74 and t1.id<=0 where t2.id=75 and t1.id is null;
# explain select t1.id, t2.id from t1 full join t2 on true where t2.id = t1.id and t1.id <0 and t1.id > 0;
drop table t1,t2;

# Test full join with multiple tables
create table t1 (a int primary key);
insert into t1 values(1),(2);

# TODO: when table number in a query increases, the query becomes incredibly slow.
--error ER_NOT_SUPPORTED_YET
select t1.a from t1 as t1 full join t1 as t2 using (a) full join t1 as t3 using (a) full join t1 as t4 using (a) full join t1 as t5 using (a) full join t1 as t6 using (a) full join t1 as t7 using (a) full join t1 as t8 using (a);
--error ER_NOT_SUPPORTED_YET
select t1.a from t1 as t1 full join t1 as t2 using (a) full join t1 as t3 using (a) full join t1 as t4 using (a) full join t1 as t5 using (a) full join t1 as t6 using (a) full join t1 as t7 using (a) full join t1 as t8 using (a) full join t1 as t9 using (a) full join t1 as t10 using (a) full join t1 as t11 using (a) full join t1 as t12 using (a) full join t1 as t13 using (a) full join t1 as t14 using (a) full join t1 as t15 using (a) full join t1 as t16 using (a) full join t1 as t17 using (a) full join t1 as t18 using (a) full join t1 as t19 using (a) full join t1 as t20 using (a) full join t1 as t21 using (a) full join t1 as t22 using (a) full join t1 as t23 using (a) full join t1 as t24 using (a) full join t1 as t25 using (a) full join t1 as t26 using (a) full join t1 as t27 using (a) full join t1 as t28 using (a) full join t1 as t29 using (a) full join t1 as t30 using (a) full join t1 as t31 using (a) full join t1 as t32 using (a) full join t1 as t33 using (a) full join t1 as t34 using (a) full join t1 as t35 using (a) full join t1 as t36 using (a) full join t1 as t37 using (a) full join t1 as t38 using (a) full join t1 as t39 using (a) full join t1 as t40 using (a) full join t1 as t41 using (a) full join t1 as t42 using (a) full join t1 as t43 using (a) full join t1 as t44 using (a) full join t1 as t45 using (a) full join t1 as t46 using (a) full join t1 as t47 using (a) full join t1 as t48 using (a) full join t1 as t49 using (a) full join t1 as t50 using (a) full join t1 as t51 using (a) full join t1 as t52 using (a) full join t1 as t53 using (a) full join t1 as t54 using (a) full join t1 as t55 using (a) full join t1 as t56 using (a) full join t1 as t57 using (a) full join t1 as t58 using (a) full join t1 as t59 using (a) full join t1 as t60 using (a) full join t1 as t61 using (a) full join t1 as t62 using (a) full join t1 as t63 using (a) full join t1 as t64 using (a) full join t1 as t65 using (a);
drop table t1;

#
# Simple join test.
#
CREATE TABLE t1 (
  a int NOT NULL,
  b int NOT NULL,
  PRIMARY KEY  (a,b)
);

INSERT INTO t1 VALUES (1,1),(1,2),(1,3),(1,4),(1,5),(1,6),(1,7),(2,3);

CREATE TABLE t2 (
  a int default NULL
);
INSERT INTO t2 VALUES (2),(3);
SELECT t1.a,t2.a,b FROM t1 full join t2 on true WHERE t1.a=t2.a AND (t1.a=1 OR t1.a=2) AND b>=1 AND b<=3;
DROP TABLE t1, t2;

#
# TEST FULL JOIN with DATE columns
#

CREATE TABLE t1 (d DATE NOT NULL);
CREATE TABLE t2 (d DATE NOT NULL);
INSERT INTO t1 (d) VALUES ('2001-08-01'),('1000-01-01');
INSERT INTO t2 (d) VALUES ('2002-08-01');
SELECT * FROM t1 FULL JOIN t2 ON t1.d = t2.d WHERE t2.d IS NULL;
SELECT * FROM t1 FULL JOIN t2 ON t1.d = t2.d WHERE t2.d IS NOT NULL;
SELECT * FROM t1 FULL JOIN t2 ON t1.d = t2.d WHERE t1.d IS NULL;
SELECT * FROM t1 FULL JOIN t2 ON t1.d = t2.d WHERE t1.d IS NOT NULL;
--error ER_NOT_SUPPORTED_YET
SELECT * FROM t1 FULL JOIN t2 USING (d) WHERE t2.d IS NULL;
--error ER_NOT_SUPPORTED_YET
SELECT * FROM t1 FULL JOIN t2 USING (d) WHERE t2.d IS NOT NULL;
--error ER_NOT_SUPPORTED_YET
SELECT * FROM t1 FULL JOIN t2 USING (d) WHERE d IS NULL;
--error ER_NOT_SUPPORTED_YET
SELECT * FROM t1 FULL JOIN t2 USING (d) WHERE d IS NOT NULL;
DROP TABLE t1,t2;

#
# Bug when doing full join and NULL fields.
#
CREATE TABLE t1 (
  t1_id int default NULL,
  t2_id int default NULL,
  type enum('Cost','Percent') default NULL,
  cost_unit enum('Cost','Unit') default NULL,
  min_value double default NULL,
  max_value double default NULL,
  t3_id int default NULL,
  item_id int default NULL
);
INSERT INTO t1 VALUES (12,5,'Percent','Cost',-1,0,-1,-1),(14,4,'Percent','Cost',-1,0,-1,-1),(18,5,'Percent','Cost',-1,0,-1,-1),(19,4,'Percent','Cost',-1,0,-1,-1),(20,5,'Percent','Cost',100,-1,22,291),(21,5,'Percent','Cost',100,-1,18,291),(22,1,'Percent','Cost',100,-1,6,291),(23,1,'Percent','Cost',100,-1,21,291),(24,1,'Percent','Cost',100,-1,9,291),(25,1,'Percent','Cost',100,-1,4,291),(26,1,'Percent','Cost',100,-1,20,291),(27,4,'Percent','Cost',100,-1,7,202),(28,1,'Percent','Cost',50,-1,-1,137),(29,2,'Percent','Cost',100,-1,4,354),(30,2,'Percent','Cost',100,-1,9,137),(93,2,'Cost','Cost',-1,10000000,-1,-1);
CREATE TABLE t2 (
  id int unsigned NOT NULL auto_increment,
  name varchar(255) default NULL,
  PRIMARY KEY  (id)
);
INSERT INTO t2 VALUES (1,'s1'),(2,'s2'),(3,'s3'),(4,'s4'),(5,'s5');
--skip_if_hypergraph  # No ORDER BY, so depends on the query plan.
select t1.*, t2.*  from t1 full join t2 on t2.id=t1.t2_id where t2.id=t1.t2_id limit 2;
drop table t1, t2;

#
CREATE TABLE t1 (
  siteid varchar(25) NOT NULL default '',
  emp_id varchar(30) NOT NULL default '',
  rate_code varchar(10) default NULL,
  UNIQUE KEY site_emp (siteid,emp_id),
  KEY siteid (siteid)
);
INSERT INTO t1 VALUES ('rivercats','psmith','cust'), ('rivercats','KWalker','cust');
CREATE TABLE t2 (
  siteid varchar(25) NOT NULL default '',
  rate_code varchar(10) NOT NULL default '',
  base_rate float NOT NULL default '0',
  PRIMARY KEY  (siteid,rate_code),
  FULLTEXT KEY rate_code (rate_code)
);
INSERT INTO t2 VALUES ('rivercats','cust',20);
INSERT INTO t2 VALUES ('nonsense', 'cust',30);

SELECT emp.rate_code, lr.base_rate FROM t1 AS emp FULL JOIN t2 AS lr ON emp.siteid = lr.siteid AND emp.rate_code = lr.rate_code WHERE emp.emp_id = 'psmith' AND lr.siteid = 'rivercats';
SELECT emp.rate_code, lr.base_rate FROM t1 AS emp FULL JOIN t2 AS lr ON emp.siteid = lr.siteid AND emp.rate_code = lr.rate_code WHERE lr.siteid = 'rivercats' AND emp.emp_id = 'psmith';
SELECT emp.rate_code, lr.base_rate FROM t1 AS emp FULL JOIN t2 AS lr ON emp.siteid = lr.siteid AND emp.rate_code = lr.rate_code WHERE emp.emp_id = 'psmith';
SELECT emp.rate_code, lr.base_rate FROM t1 AS emp FULL JOIN t2 AS lr ON emp.siteid = lr.siteid AND emp.rate_code = lr.rate_code WHERE emp.siteid = 'rivercats';
drop table t1,t2;

#
# Test combination of join methods
#
create table t1 (i int);
create table t2 (i int);
create table t3 (i int);
insert into t1 values(1),(2);
insert into t2 values(2),(3);
insert into t3 values (2),(4);

--sorted_result
select * from t1 natural left join t2 full join t3 on 1=1;
--sorted_result
select * from t1 full join t2 on (t1.i=t2.i);
--sorted_result
select * from t1 full join t2 on (t1.i=t2.i) left join t3 on (t2.i=t3.i);
--sorted_result
select * from t1 left join t2 on (t1.i=t2.i) full join t3 on (t2.i=t3.i);
--sorted_result
select * from t1 right join t2 on (t1.i=t2.i) full join t3 on (t2.i=t3.i);
--sorted_result
select * from t1 full join t2 on (t1.i=t2.i) right join t3 on (t2.i=t3.i);
--sorted_result
select * from t3 full join t2 on (t3.i=t2.i) full join t1 on (t2.i=t1.i);

# TODO: NOT CONSISTENT WITH oracle
# Note:
# For a join relation such as `t1, t2 full join t3`,
# Under MySQL it turns into `(t1 inner join t2) full join t3`,
# while in Oracle it turns into `t1 inner join (t2 full join t3)`
select t1.i,t2.i,t3.i from t1,t2 full join t3 on (t2.i=t3.i) order by t1.i,t2.i,t3.i;
select t1.i,t2.i,t3.i from t2 full join t3 on (t2.i=t3.i),t1 order by t1.i,t2.i,t3.i;
select t1.i,t2.i,t3.i from t1,t3 full join t2 on (t2.i=t3.i) order by t1.i,t2.i,t3.i;
select t1.i,t2.i,t3.i from t3 full join t2 on (t2.i=t3.i),t1 order by t1.i,t2.i,t3.i;
drop table t1,t2,t3;

#  NOTICE:
#  - The tests are designed so that all statements, except MySQL

create table t1 (c int, b int);
create table t2 (a int, b int);
create table t3 (b int, c int);
create table t4 (y int, c int);
create table t5 (y int, z int);
create table t6 (a int, c int);

insert into t1 values (10,1);
insert into t1 values (3 ,1);
insert into t1 values (3 ,2);
insert into t2 values (2, 1);
insert into t3 values (1, 3);
insert into t3 values (1,10);
insert into t4 values (11,3);
insert into t4 values (2, 3);
insert into t5 values (11,4);
insert into t6 values (2, 3);

# Views with JOIN ... ON
create algorithm=merge view v2a as
select t1.c, t1.b, t2.a from t1 full join (t2 full join t4 on b + 1 = y) on t1.c = t4.c;
create algorithm=merge view v2b as
select t1.c as b, t1.b as a, t2.a as c
from t1 join (t2 full join t4 on b + 1 = y) on t1.c = t4.c;

--sorted_result
select * from v2a;
--sorted_result
select * from v2b;

# bugfix9170: result set should be same as 'select * from v2a;'
--sorted_result
select t1.c, t1.b, t2.a from t1 full join (t2 full join t4 on b + 1 = y) on t1.c = t4.c;

# bugfix9170: result set should be same as 'select * from v2b;'
--sorted_result
select t1.c as b, t1.b as a, t2.a as c from t1 join (t2 full join t4 on b + 1 = y) on t1.c = t4.c;


drop view v2a;
drop view v2b;

--sorted_result
select * from t1 natural join (t2 full join t4 on b + 1 = y);

# Note: oracle doesn't support the following testcase
--sorted_result
select * from (t1, t2) full join (t3, t4) on (a < y and t2.b < t3.c);

--sorted_result
select * from ((t3 join (t1 join t2 on c > a) on t3.b < t2.a) join t4 on y > t1.c) join t5 on z = t1.b + 3;

--sorted_result
select * from t2 full join (t3 natural join t4) on t2.a = y;

--sorted_result
select * from t2 full join (t3 natural join t4) on t2.a = y;
drop table t1, t2, t3, t4, t5, t6;

# table with indexes
CREATE TABLE t1 (a INT PRIMARY KEY, b INT);
CREATE TABLE t2 (c INT PRIMARY KEY, d INT);

INSERT INTO t1 VALUES(1,NULL),(2,NULL),(3,NULL),(4,NULL);
INSERT INTO t1 SELECT a + 4, b FROM t1;
INSERT INTO t1 SELECT a + 8, b FROM t1;
INSERT INTO t1 SELECT a + 16, b FROM t1;
INSERT INTO t1 SELECT a + 32, b FROM t1;
INSERT INTO t1 SELECT a + 64, b FROM t1;
INSERT INTO t2 SELECT a, b FROM t1;
ANALYZE TABLE t1, t2;
#expected table other than index scan for full join
explain SELECT * FROM t1 FULL JOIN t2 ON b=c ORDER BY a LIMIT 2;
explain SELECT * FROM t1 FULL JOIN t2 ON b=c ORDER BY a LIMIT 2;
SELECT * FROM t1 FULL JOIN t2 ON b=c ORDER BY a LIMIT 2;
SELECT * FROM t1 FULL JOIN t2 ON a=c ORDER BY a LIMIT 2;

DROP TABLE t1, t2;


--echo #
--echo # nested query
--echo #
CREATE TABLE t1 (a INT);
CREATE TABLE t2 (a INT);
CREATE TABLE t3 (a INT, INDEX (a));
CREATE TABLE t4 (a INT);
CREATE TABLE t5 (a INT);
CREATE TABLE t6 (a INT);

INSERT INTO t1 VALUES (1), (1), (1);

INSERT INTO t2 VALUES
(2), (2), (2), (2), (2), (2), (2), (2), (2), (2);

INSERT INTO t3 VALUES
(3), (3), (3), (3), (3), (3), (3), (3), (3), (3);
ANALYZE TABLE t1, t2, t3, t4, t5, t6;
EXPLAIN
SELECT *
FROM
  t1 JOIN t2 ON t1.a = t2.a
  FULL JOIN
  (
   (
    t3 FULL JOIN t4 ON t3.a = t4.a
   )
   FULL JOIN
   (
     t5 FULL JOIN t6 ON t5.a = t6.a
   )
   ON t4.a = t5.a
  )
  ON t1.a = t3.a;

SELECT *
FROM
  t1 JOIN t2 ON t1.a = t2.a
  FULL JOIN
  (
   (
    t3 FULL JOIN t4 ON t3.a = t4.a
   )
   FULL JOIN
   (
     t5 FULL JOIN t6 ON t5.a = t6.a
   )
   ON t4.a = t5.a
  )
  ON t1.a = t3.a;
drop table t1, t2, t3, t4, t5, t6;

--echo #
--echo # Bug #59696 Optimizer fails to move WHERE condition on JOIN column
--echo #            when joining with a view
--echo #

CREATE TABLE t1 (
  c1 INTEGER NOT NULL
);

INSERT INTO t1 VALUES (1),(2),(3);

CREATE TABLE t2 (
  pk INTEGER NOT NULL,
  c1 INTEGER NOT NULL,
  PRIMARY KEY (pk)
);

INSERT INTO t2 VALUES (1,4),(3,5),(2,6);
ANALYZE  TABLE t1, t2;

# Create a view on one of the tables. The same query plan should
# be used when joining with this view as with the underlying table.
CREATE VIEW v_foj AS SELECT t2.* FROM t1 full join t2 on t1.c1=t2.pk;
--replace_regex /cost=\d+\.\d+\ rows=\d+/cost=* rows=*/
EXPLAIN FORMAT=TREE SELECT * FROM v_foj;
let $query= SELECT * FROM v_foj join t1 on v_foj.pk = t1.c1 WHERE v_foj.pk = t1.c1 AND v_foj.pk >= 2;

eval EXPLAIN $query;
--sorted_result
eval $query;

DROP VIEW v_foj;
DROP TABLE t1, t2;

--echo # SELECT 1 FROM t
CREATE TABLE t1(a INTEGER);
SELECT 1 FROM (SELECT 1 FROM t1 WHERE a) AS q NATURAL LEFT JOIN t1 FULL JOIN t1 AS t2 ON 1=1;
SELECT 1 FROM t1 FULL JOIN t1 AS t2 on 1=1 NATURAL RIGHT JOIN (SELECT 1 FROM t1 WHERE a) AS q;

DROP TABLE t1;

--echo # group by, limit clause
CREATE TABLE t1 (t1_id INT PRIMARY KEY AUTO_INCREMENT, t2_id INT DEFAULT NULL);
CREATE TABLE t2 (t2_id INT PRIMARY KEY AUTO_INCREMENT, is_active TINYINT NOT NULL DEFAULT '1');
INSERT INTO t2 VALUES (2,1),(3,0),(1000,1);
INSERT INTO t1 VALUES (1,1000),(2,5);
SELECT t1.t1_id,t1.t2_id,t2.t2_id FROM t1 FULL JOIN t2 ON (t1.t2_id = t2.t2_id AND t2.is_active=1) GROUP BY t1_id,t1.t2_id,t2.t2_id ORDER BY t1_id LIMIT 2;
DROP TABLE t1,t2;

# subqueries
# TODO: full join in subquery (semi-join)
# TODO: need to check validate results under different cases.
create table t(a int);
insert into t values(1),(2);
# Try to use materialization:
let query=
 select * from t t1
 where t1.a in (select dt.a
                from t t2
                full join (select * from t t3 where t3.a>t1.a) dt
                on true);
--skip_if_hypergraph  # Depends on the query plan.
--replace_regex /cost=\d+\.\d+\ rows=\d+/cost=* rows=*/
eval explain format=tree $query;
eval $query;
drop table t;

CREATE TABLE t1 (
  id int DEFAULT NULL,
  name varchar(2048) DEFAULT NULL
);
CREATE TABLE t2 (
  id int DEFAULT NULL,
  name varchar(2048) DEFAULT NULL
) ;
INSERT INTO t1 VALUES (1, 'a');
INSERT INTO t1 VALUES (2, 'b');
INSERT INTO t1 VALUES (3, 'c');
INSERT INTO t2 VALUES (1, 'a');
INSERT INTO t2 VALUES (2, 'b');
INSERT INTO t2 VALUES (3, NULL);
INSERT INTO t2 VALUES (4, 'e');
select b.name from t1 a full  join  t2 b on  1=1 where b.name in (select t1.name from t1 full join t2 on 1=1 where t1.id=1 and t2.name is null);
select c.name from t1 d left join (select b.name from t1 a full join  t2 b on a.name!=b.name  ) c on 1=1 where c.name is null;
select b.name from t1 a full  join  t2 on  1=1 full join  t1 b on 1=1 where a.name is null;
-- echo const table test
select * from (select 4 id from dual) ta full join t1 on ta.id=t1.id;

-- echo a testcase for a partition table
create table t3(c1 int primary key,c2 int)PARTITION BY HASH (c1) PARTITIONS 4;
insert into t3 VALUES(3,3);
insert into t3 VALUES(4,4);
insert into t3 VALUES(5,5);
insert into t3 VALUES(6,6);
insert into t3 VALUES(7,7);
insert into t3 VALUES(8,8);
select t3.c1 from t3 full join t1 on 1=2 where t3.c1=7;
DROP TABLE t1, t2, t3;

create table t1(c1 int, c2 varchar(10));
create table t2(c1 int, c2 varchar(10));
insert into t1 values(1, 'abc');
insert into t1 values(2, 'cde');
insert into t1 values(2, 'fgh');
insert into t1 values(4, 'ijk');
insert into t2 values(1, 'abc');
insert into t2 values(2, 'cde');
insert into t2 values(2, 'fgh');
insert into t2 values(6, 'ijk');

select * from t1 full join t2 on t1.c1=t2.c1 and t1.c1=2;
create index it1c1 on t1(c1);
create index it1c1 on t2(c1);
select * from t1 full join t2 on t1.c1=t2.c1 and t1.c1=2;

# bug#7820 full join with '(+)' returns different results comparing to oracle
# just forbid this pattern for now.
--error ER_NOT_SUPPORTED_YET
select * from t1 full join t2 on t1.c1=t2.c1(+);
--error ER_NOT_SUPPORTED_YET
select * from t1 full join t2 on t1.c1(+)=t2.c1;
--error ER_NOT_SUPPORTED_YET
select * from (select 1 c1 from dual) ta left join (select t1.c1 from t1 full join t2 on t1.c1=t2.c1(+)) t3 on true;
--error ER_NOT_SUPPORTED_YET
select * from (select 1 c1 from dual) ta left join (select t1.c1 from t1 full join t2 on true) t3 on ta.c1=t3.c1(+);

drop table t1, t2;

# bug#8702 full join issues in derived table
create table t1(c1 int);
create table t2(c1 int);
insert into t1 values (146),(150),(151);
insert into t2 values (145);
--replace_regex /cost=\d+\.\d+\ rows=\d+/cost=* rows=*/
explain format=tree SELECT * FROM (SELECT * FROM t1 WHERE c1 IN (146,150,151)) t1
FULL JOIN t2
ON t1.c1=t2.c1
WHERE t1.c1 IS NOT NULL;

SELECT * FROM (SELECT * FROM t1 WHERE c1 IN (146,150,151)) t1
FULL JOIN t2
ON t1.c1=t2.c1
WHERE t1.c1 IS NOT NULL;

alter table t1 add primary key(c1);

--replace_regex /cost=\d+\.\d+\ rows=\d+/cost=* rows=*/
explain format=tree SELECT * FROM (SELECT * FROM t1 WHERE c1 IN (146,150,151)) t1
FULL JOIN t2
ON t1.c1=t2.c1
WHERE t1.c1 IS NOT NULL;

SELECT * FROM (SELECT * FROM t1 WHERE c1 IN (146,150,151)) t1
FULL JOIN t2
ON t1.c1=t2.c1
WHERE t1.c1 IS NOT NULL;

SELECT * FROM (SELECT * FROM t1 WHERE c1 IN (146,150,151)) t1
FULL JOIN t2
ON t1.c1=t2.c1
WHERE t1.c1 IS NULL;
drop table t1, t2;

# cte test
CREATE TABLE employees (EMPLOYEE_ID int, FIRST_NAME VARCHAR2(20), LAST_NAME VARCHAR2(25), EMAIL VARCHAR2(25), PHONE_NUMBER VARCHAR2(20), HIRE_DATE DATE, JOB_ID VARCHAR2(10), SALARY NUMBER(8,2), COMMISSION_PCT NUMBER(2,2), MANAGER_ID NUMBER(6,0), DEPARTMENT_ID NUMBER(4,0),PRIMARY KEY(EMPLOYEE_ID))  partition by hash(EMPLOYEE_ID) partitions 3;
Insert into employees values (145,'John','russell','JRUSSEL','011.44.1344.429268',to_date('2013-1-21 5:23:01','yyyy-mm-dd hh24:mi:ss'),'SA_MAN',14000,0.4,100,80);
Insert into employees values (146,'Karen','Partners','KPARTNER','011.44.1344.467268',to_date('2013-10-21 18:20:01','yyyy-mm-dd hh24:mi:ss'),'SA_MAN',13500,0.3,100,80);
Insert into employees values (147,'Alberto','errazuriz','AERRAZUR','011.44.1344.429278',to_date('2014-9-1 8:30:01','yyyy-mm-dd hh24:mi:ss'),'SA_MAN',12000,0.3,100,80);
Insert into employees values (148,'Gerald','Cambrault','GCAMBRAU','011.44.1344.619268',to_date('2015-9-21 8:30:01','yyyy-mm-dd hh24:mi:ss'),'SA_MAN',11000,0.3,100,80);
Insert into employees values (149,'Eleni','zlotkey','EZLOTKEY','011.44.1344.429018',to_date('2016-9-1 8:30:01','yyyy-mm-dd hh24:mi:ss'),'SA_MAN',10500,0.2,100,90);
Insert into employees values (150,'Peter','Tucker','PTUCKER','011.44.1344.129268',to_date('2017-9-1 8:30:01','yyyy-mm-dd hh24:mi:ss'),'SA_REP',10000,0.3,145,90);
Insert into employees values (151,'David','Bernstein','DBERNSTE','011.44.1344.345268',to_date('2018-9-1 8:30:01','yyyy-mm-dd hh24:mi:ss'),'SA_REP',9500,0.25,145,90);

WITH  cte1 AS (SELECT EMPLOYEE_ID,FIRST_NAME FROM employees t   WHERE  first_name IN  ('Peter', 'Tucker','David', 'Bernstein','Karen') ORDER BY EMPLOYEE_ID ),
cte2 AS (SELECT b.EMPLOYEE_ID, to_char(b.HIRE_DATE,'yyyymmdd')  HIRE_DATE  FROM employees b
WHERE b.job_id <> 'SA_REP'  AND b.EMPLOYEE_ID  IN ( SELECT a.EMPLOYEE_ID FROM  employees a WHERE a.job_id = 'SA_MAN' ))
SELECT cte1.EMPLOYEE_ID,cte1.FIRST_NAME,cte2.HIRE_DATE FROM cte1  FULL JOIN cte2 ON cte1.EMPLOYEE_ID=cte2.EMPLOYEE_ID WHERE cte1.EMPLOYEE_ID IS NOT NULL ;

WITH  cte1 AS (SELECT EMPLOYEE_ID,FIRST_NAME FROM employees t   WHERE  first_name IN  ('Peter', 'Tucker','David', 'Bernstein','Karen') ORDER BY EMPLOYEE_ID ),
cte2 AS (SELECT b.EMPLOYEE_ID, to_char(b.HIRE_DATE,'yyyymmdd')  HIRE_DATE  FROM employees b
WHERE b.job_id <> 'SA_REP'  AND b.EMPLOYEE_ID  IN ( SELECT a.EMPLOYEE_ID FROM  employees a WHERE a.job_id = 'SA_MAN' ))
SELECT cte1.EMPLOYEE_ID,cte1.FIRST_NAME,cte2.HIRE_DATE FROM cte1  FULL JOIN cte2 ON cte1.EMPLOYEE_ID=cte2.EMPLOYEE_ID WHERE cte1.EMPLOYEE_ID IS NULL ;

DROP TABLE employees;

# bugfix9560
select STATEMENT_DIGEST_TEXT('SELECT * FROM t1 full join t2 on true');
select STATEMENT_DIGEST_TEXT('SELECT * FROM t1 full outer join t2 on true');