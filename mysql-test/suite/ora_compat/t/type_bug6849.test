--source include/have_debug.inc
SET sql_mode=ORACLE;

show variables like '%udt_format_result%';
set @@udt_format_result='DBA';

--echo #
--echo # test of function in type is table of
--echo #
DELIMITER $$;
CREATE or replace  FUNCTION f1 (a VARCHAR(32)) RETURN VARCHAR(32) no sql
is result VARCHAR(32);
BEGIN
  result := CONCAT(a,'y');
  RETURN(result);
END;$$

CREATE or replace PROCEDURE p1() as
type tklist is table of varchar(20);
stu_record_val tklist := tklist(f1(1),f1(2),'cc');
id1 int := 1;
begin
 select stu_record_val(1),stu_record_val(2);
 stu_record_val(1) := 1;
 select stu_record_val(1);
 stu_record_val(3) := 1;
 select stu_record_val(1), stu_record_val(3);
 select stu_record_val.count;
end;
$$
DELIMITER ;$$
call p1;
drop PROCEDURE p1;

--echo #
--echo # test of function in type is record of
--echo #
DELIMITER $$;
CREATE or replace PROCEDURE p1() as
type stu_record is record(
  id int := 1,
  name_d  varchar(20) := f1(1),
  score varchar(20) := f1(2)
);
type tklist is table of stu_record INDEX BY pls_integer;
stu_record_val tklist := tklist(1=>stu_record(10,f1(10),f1(20)));
BEGIN
  stu_record_val(2).id := 20;
  select stu_record_val(1),stu_record_val(2);
END;
$$
DELIMITER ;$$
call p1();
drop PROCEDURE p1;


--echo #
--echo # test of for in inner layer of sp
--echo #
DELIMITER $$;
CREATE or replace PROCEDURE p1() as
type stu_record is record(
  id int := 1,
  name_d  varchar(20) := f1(1),
  score varchar(20) := f1(2)
);
stu_record_val stu_record;
BEGIN
  stu_record_val.id := 10;
  select stu_record_val;
END;
$$
DELIMITER ;$$
call p1();
drop PROCEDURE p1;

--echo #
--echo # test of for in inner layer of sp
--echo #
create database db1;
use db1;
DELIMITER $$;
CREATE or replace PROCEDURE p1() as
type stu_record is record(
  id int := 1,
  name_d  varchar(20) := test.f1(1),
  score varchar(20) := test.f1(2)
);
stu_record_val stu_record;
BEGIN
  stu_record_val.id := 10;
  select stu_record_val;
END;
$$

DELIMITER ;$$

use test;
DELIMITER $$;
CREATE or replace PROCEDURE p2() as
type tklist1 is table of varchar(20);
stu_record_val1 tklist1 := tklist1();
begin
  show procedure code db1.p1;
  call db1.p1;
end;
$$
DELIMITER ;$$

call p2();
drop PROCEDURE p2;

drop database db1;
drop function f1;

--echo #
--echo # test of bug9509
--echo #
create or replace type t_air as object(id int,type varchar(20));
create table tt_air(id int,name1 t_air);
insert into tt_air values(1,t_air(10,'aabb'));
insert into tt_air values(2,t_air(20,'qwed'));
select * from (select t_air(null,null)=t_air(null,null));
--error ER_UDT_INCONS_DATATYPES
insert into tt_air values (1,t_air(1,1)=t_air(1,1));
--error ER_UDT_INCONS_DATATYPES
insert into tt_air(name1) values (t_air(1,1)=t_air(1,1));
--error ER_UDT_INCONS_DATATYPES
insert into tt_air(name1) select t_air(1,1)=t_air(1,1);
--error ER_UDT_INCONS_DATATYPES
insert into tt_air(id) select t_air(1,1);
insert into tt_air(id) select t_air(1,1)=t_air(1,1);
table tt_air;
SELECT * from tt_air where lnnvl(name1)+lnnvl(name1);

create table aas as select t_air(1,1)=t_air(1,1);
table aas;
drop table aas;

create table table_of of t_air ENGINE=innodb DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
insert into table_of select t_air(10,'05');
insert into table_of select t_air(100,'asdf');
--error ER_WRONG_VALUE_COUNT_ON_ROW
insert into table_of select t_air(100,'asdf')=t_air(1,1);
drop table table_of;

--echo #
--echo # test of bug9503
--echo #
DELIMITER $$;
CREATE or replace PROCEDURE p1() as
type tklist is table of varchar(20);
stu_record_val tklist:=tklist(1,2,3,4);
begin
 select stu_record_val(1) bulk collect into stu_record_val from sequence_table(2) a;
 for i in stu_record_val.first .. stu_record_val.last loop
  select stu_record_val(i);
 end loop;
end;
$$
DELIMITER ;$$
call p1;
call p1;
drop PROCEDURE p1;

DELIMITER $$;
CREATE or replace PROCEDURE p1() as
type tklist is table of varchar(20);
stu_record_val tklist:=tklist(1,2,3,4);
begin
 stu_record_val := tklist(stu_record_val(1),stu_record_val(2),30,40);
 for i in stu_record_val.first .. stu_record_val.last loop
  select stu_record_val(i);
 end loop;
end;
$$
DELIMITER ;$$
call p1;
call p1;
drop PROCEDURE p1;

drop table tt_air;
drop type t_air;



