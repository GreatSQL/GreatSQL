--source include/have_rocksdb.inc
--source include/have_debug.inc

--echo #
--echo # PS-7167: "slice1.compare.slice2" debug assertion
--echo #

CREATE TABLE t0(c1 INT UNSIGNED, PRIMARY KEY(c1)) ENGINE=RocksDB;
SELECT * FROM t0 WHERE c1<>4294967295;

DROP TABLE t0;


--echo #
--echo # PS-7290: Using RocksDB as a temp table can lead to an assertion on the debug build
--echo #

CREATE TEMPORARY TABLE t0(ID INT);
--error ER_ILLEGAL_HA_CREATE_OPTION
ALTER TABLE t0 ENGINE=RocksDB;

DROP TABLE t0;


--echo #
--echo # PS-7882: Assertion `m_output_buf->m_curr_offset <= m_output_buf->m_total_size' failed
--echo #

# Test if smallest possible merge buffer size ("rocksdb_merge_buf_size") is
# handled correctly. Actual value for the merge buffer size is set in ".opt"
# file.

# When key-pair value are too big to fit into a merge buffer, RocksDB mentions
# that in error logs.
call mtr.add_suppression("Current value of rocksdb_merge_buf_size=\\d+ is too small. At least \\d+ bytes required.");

SET @@session.rocksdb_merge_buf_size = 100;

CREATE TABLE t (
  id INT,
  a VARCHAR(100)
) ENGINE=RocksDB;

INSERT INTO t (id, a) VALUES (1, '1');
INSERT INTO t (id, a) VALUES (2, '123456789012345678901234567890');

--let $assert_text="Expected @@rocksdb_merge_buf_size to be set to 100"
--let $assert_cond="[SELECT @@rocksdb_merge_buf_size]" = 100
--source include/assert.inc

--echo # Current merge buffer size is too small to fit all key-value pairs.
--error ER_SK_POPULATE_DURING_ALTER
ALTER TABLE t ADD INDEX k1 (a, id);

DROP TABLE t;



--echo #
--echo # PS-8158: Null pointer dereference in myrocks::Rdb_key_def::get_keyno()
--echo # https://jira.percona.com/browse/PS-8158
--echo #

CREATE TABLE t (
  id INT,
  a VARCHAR(100)
) ENGINE=RocksDB;

INSERT INTO t (id, a) VALUES (1, '1');
INSERT INTO t (id, a) VALUES (2, 'a');

--error ER_SK_POPULATE_DURING_ALTER
ALTER TABLE t ADD INDEX k1 (a, id);

DROP TABLE t;

SET @@session.rocksdb_merge_buf_size = DEFAULT;
