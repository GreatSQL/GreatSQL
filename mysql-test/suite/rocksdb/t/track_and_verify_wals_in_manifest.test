-- source include/have_rocksdb.inc
-- source include/not_valgrind.inc

--source include/restart_mysqld.inc

--source include/parse_rocksdb_fs_uri.inc

call mtr.add_suppression("Taking backup from");

create table t1 (id int primary key) engine=rocksdb;
create table t2 (id int, primary key (id) comment 'cfname=cf2') engine=rocksdb;

#flushing dictionary
set global rocksdb_force_flush_memtable_now=1;

insert into t2 values (1);
insert into t2 values (2);
insert into t2 values (3);
insert into t1 values (1);
insert into t1 values (2);
insert into t1 values (3);

# rotate wal file, flush cf2
set global rocksdb_compact_cf='cf2';

insert into t1 values (101);
insert into t2 values (101);
insert into t1 values (102);
insert into t2 values (102);

--let $write_policy = `SELECT @@rocksdb_write_policy`
--let $most_recent_log_include_file = $MYSQL_TMP_DIR/most_recent_log.inc

if ($rocksdb_zenfs_disabled)
{
  --let $datadir = `SELECT @@datadir`
  --let $gen_cmd = find $datadir.rocksdb/*.log -type f -printf "%f\n"
}
if (!$rocksdb_zenfs_disabled)
{
  --file_exists $MYSQL_ZENFS
  --let $gen_cmd = $MYSQL_ZENFS list --zbd=$extracted_zenfs_device --path=/.rocksdb | awk '{ print \$6 }' | grep \.log
}

--source include/kill_mysqld.inc

--let $gen_cmd = $gen_cmd | sort -t. -k 2 -n -r | head -n 2 | tail -n 1 | xargs echo --let \\\$most_recent_log = > $most_recent_log_include_file
--exec $gen_cmd

--source $most_recent_log_include_file
--remove_file $most_recent_log_include_file

if ($rocksdb_zenfs_disabled)
{
  --let $log_file_to_modify = $datadir.rocksdb/$most_recent_log
}
if (!$rocksdb_zenfs_disabled)
{
  --let $zenfs_backup_dir = $MYSQL_TMP_DIR/zenfs_backup
  --mkdir $zenfs_backup_dir
  --exec $MYSQL_ZENFS backup --zbd=$extracted_zenfs_device --path=$zenfs_backup_dir --backup_path=/.rocksdb/$most_recent_log > /dev/null 2>&1
  --let $log_file_to_modify = $zenfs_backup_dir/$most_recent_log
}


--let $truncate_script = $MYSQL_TMP_DIR/truncate_tail_wal.sh
--write_file $truncate_script
#!/bin/bash

SIZE=`stat -c %s $1`

case $2 in
  write_committed)
    NEW_SIZE=`expr $SIZE - 30`
    ;;
  write_prepared)
    NEW_SIZE=`expr $SIZE - 30`
    ;;
  write_unprepared)
    NEW_SIZE=`expr $SIZE - 50`
    ;;
esac

truncate -s $NEW_SIZE $1
rc=$?
if [[ $rc != 0 ]]; then
  exit 1
fi

exit 0
EOF

--chmod 0755 $truncate_script
--exec $truncate_script $log_file_to_modify $write_policy
--remove_file $truncate_script

if (!$rocksdb_zenfs_disabled)
{
  --exec $MYSQL_ZENFS restore --zbd=$extracted_zenfs_device --path=$zenfs_backup_dir --restore_path=/.rocksdb> /dev/null 2>&1
  --force-rmdir $zenfs_backup_dir
}


--let $_custom_err= $MYSQLTEST_VARDIR/tmp/mysqld.$_server_id.err

# The restart has to fail with rocksdb_track_and_verify_wals_in_manifest=1 (default)
--error 1
--exec $MYSQLD_CMD --rocksdb=FORCE $ROCKSDB_OPT '$ROCKSDB_LOAD' --rocksdb_wal_recovery_mode=0 --rocksdb_write_policy=$write_policy > $_custom_err 2>&1
--exec grep "Size mismatch: WAL" $_custom_err | wc -l

--error 1
--exec $MYSQLD_CMD --rocksdb=FORCE $ROCKSDB_OPT '$ROCKSDB_LOAD' --rocksdb_wal_recovery_mode=2 --rocksdb_write_policy=$write_policy > $_custom_err 2>&1
--exec grep "Size mismatch: WAL" $_custom_err | wc -l

--error 1
--exec $MYSQLD_CMD --rocksdb=FORCE $ROCKSDB_OPT '$ROCKSDB_LOAD' --rocksdb_wal_recovery_mode=1 --rocksdb_write_policy=$write_policy > $_custom_err 2>&1
--exec grep "Size mismatch: WAL" $_custom_err | wc -l

# The restart has to fail with rocksdb_wal_recovery_mode=1
--error 1
--exec $MYSQLD_CMD --rocksdb=FORCE $ROCKSDB_OPT '$ROCKSDB_LOAD' --rocksdb_wal_recovery_mode=1 --rocksdb_track_and_verify_wals_in_manifest=0 --rocksdb_write_policy=$write_policy > $_custom_err 2>&1

#--echo forcing to restart with kPointInTimeRecovery will also fail with RocksDB PR#7701
--error 1
--exec $MYSQLD_CMD --rocksdb=FORCE $ROCKSDB_OPT '$ROCKSDB_LOAD' --rocksdb_wal_recovery_mode=2 --rocksdb_track_and_verify_wals_in_manifest=0 --rocksdb_write_policy=$write_policy > $_custom_err 2>&1
--exec grep "Corruption: SST file is ahead of WALs" $_custom_err | wc -l

--exec echo "restart:--rocksdb_wal_recovery_mode=3 --rocksdb_track_and_verify_wals_in_manifest=0" --rocksdb_write_policy=$write_policy > $_expect_file_name
--enable_reconnect
--source include/wait_until_connected_again.inc

select * from t1;
# the last row may be lost with server side binlog truncation, which is fine.
select * from t2 where id <= 101;

drop table t1, t2;
