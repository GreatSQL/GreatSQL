--source include/have_ndb.inc
--source include/have_ndb_debug.inc

create table t0 (c int primary key) engine=ndbcluster;

CREATE TABLE t1 (
  a int NOT NULL,
  b int NOT NULL,
  c int NOT NULL,
  d int NOT NULL,
  PRIMARY KEY (`b`,`a`),
  unique key(d),
  key (c),
  foreign key (c) references t0(c) on delete cascade
) ENGINE=ndbcluster;

# A helper table for generating inserts into t1.
create table num (n int);
insert into num value (0),(1),(2),(3),(4),(5),(6),(7),(8),(9);

# Transient transaction memory pools from Dbacc.hpp:
# DBACC_SCAN_RECORD_TRANSIENT_POOL_INDEX = 0
# DBACC_OPERATION_RECORD_TRANSIENT_POOL_INDEX = 1
set @pool = 2;
while (`select @pool > 0`)
{
  set @pool = @pool - 1;

  insert into t0 (c) values (1),(2),(3),(4);
  let $pool=`select @pool`;
  echo === Make DBACC pool $pool out of memory ===;

  # Send DUMP to all data nodes to set new max size of pool for fired triggers.
  #   AccSetTransientPoolMaxSize(2407)
  #   MAX_SIZE(0)
  exec $NDB_MGM --execute "ALL DUMP 2407 $pool 0";
  source ndb_transaction_memory_shortage.inc;
  # Send DUMP to all data nodes to reset max size of pool for fired triggers.
  #   AccResetTransientPoolMaxSize(2408)
  exec $NDB_MGM --execute "ALL DUMP 2408 $pool";
  sleep 0.1;
  delete from t0;
}

drop table num;
drop table t1;
drop table t0;
