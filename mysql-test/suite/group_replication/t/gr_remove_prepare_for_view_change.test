################################################################################
# Validate group_replication_consistency= 'AFTER' behaviour against member leaves,
# on the case on which the member that executes the transaction leaves the group.
#
################################################################################

--source include/have_debug.inc
--source include/big_test.inc
--source include/force_restart.inc
--source include/have_debug_sync.inc
--source include/have_group_replication_plugin.inc
--let $rpl_server_count= 3
--source include/group_replication.inc

--let $rpl_connection_name= server3
--source include/rpl_connection.inc
SET sql_log_bin = 0;
call mtr.add_suppression("Member was expelled from the group due to network failures, changing member status to ERROR.");
call mtr.add_suppression("The server was automatically set into read only mode after an error was detected.");
SET sql_log_bin = 1;


connect (conn10,127.0.0.1,root,,test,$SERVER_MYPORT_1,);
connect (conn11,127.0.0.1,root,,test,$SERVER_MYPORT_1,);
connect (conn12,127.0.0.1,root,,test,$SERVER_MYPORT_1,);
connect (conn13,127.0.0.1,root,,test,$SERVER_MYPORT_1,);

--echo
--echo ############################################################
--echo # 01. Create a table on the group.
--let $rpl_connection_name= server1
--source include/rpl_connection.inc

CREATE TABLE t1 (c1 INT NOT NULL PRIMARY KEY);

--echo
--echo ############################################################
--echo # 02. remove server3 from the group.
--let $rpl_connection_name= server3
--source include/rpl_connection.inc

--echo # Get server 3 pid.
SET SESSION sql_log_bin= 0;
CREATE TABLE pid_table(pid_no INT);
--let $pid_file= `SELECT @@GLOBAL.pid_file`
--replace_result $pid_file pid_file
--eval LOAD DATA LOCAL INFILE '$pid_file' INTO TABLE pid_table
--let $server_pid=`SELECT pid_no FROM pid_table`
DROP TABLE pid_table;
SET SESSION sql_log_bin= 1;

--echo # Suspending server 3...
--exec kill -19 $server_pid

--echo
--echo ############################################################
--echo # 03. Check that all members are still in the group on
--echo #     servers 1 and 2, which should both be ONLINE.
--echo #     Server 3 should leave the group
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
let $wait_condition=SELECT COUNT(*)=2 FROM performance_schema.replication_group_members where MEMBER_STATE="ONLINE";
--source include/wait_condition.inc
let $wait_condition=SELECT COUNT(*)=2 FROM performance_schema.replication_group_members;
--source include/wait_condition.inc

--echo
--echo ############################################################
--echo # 04. Make server2 block before send its prepare message. This
--echo #     will allow us to deterministically to remove server1 from
--echo #     the group while others are waiting for server3 acknowledge.
--let $rpl_connection_name= server2
--source include/rpl_connection.inc
SET @@GLOBAL.DEBUG= '+d,group_replication_wait_before_message_send_after_applier_prepare';
SELECT @@GLOBAL.DEBUG;

--echo
--echo ############################################################
--echo # 05. Execute T1 on server1, blocked by server2 prepared message wait.
--connection conn10

--send INSERT INTO t1 VALUES (1)

--sleep 2
--echo
--echo ############################################################
--echo # 05. Execute T2 on server1, blocked by server2 prepared message wait.
--connection conn11

--send INSERT INTO t1 VALUES (2)


--echo
--echo ############################################################
--echo # 06. Execute T3 on server1, wait after before_transactin_begin.
--connection conn12

SET @@SESSION.DEBUG= '+d,group_replication_wait_after_before_transaction_begin';
--send INSERT INTO t1 VALUES (3)

--echo
--echo ############################################################
--echo # 07. Enable group_replication_wait_schedule_view_change_event
--echo #     on server1.
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
SET @@GLOBAL.DEBUG= '+d,group_replication_wait_schedule_view_change_event';

--echo
--echo ############################################################
--echo # 08. Resume server 3 by sending a signal SIGCONT to it.
--echo #     Server should change to ONLINE state.
--let $rpl_connection_name= server3
--source include/rpl_connection.inc
--echo # Send signal SIGCONT to server 3.
--exec kill -18 $server_pid

--echo
--echo ############################################################
--echo # 09. Wait for a Delaying view change on server1.
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
SET DEBUG_SYNC= "now WAIT_FOR signal.after_schedule_view_change_event_waiting";
SET DEBUG_SYNC= 'now SIGNAL signal.after_schedule_view_change_event_continue';
SET @@GLOBAL.DEBUG= '-d,group_replication_wait_schedule_view_change_event';

--echo
--echo ############################################################
--echo # 
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
SET DEBUG_SYNC= "now WAIT_FOR signal.after_before_transaction_begin_waiting";
SET DEBUG_SYNC= 'now SIGNAL signal.after_before_transaction_begin_continue';
SET @@GLOBAL.DEBUG= '+d,consistency_after_conditional_trap';
SET @@GLOBAL.DEBUG= '+d,consistency_after_set_trap';
SET @@GLOBAL.DEBUG= '+d,group_replication_wait_after_commit';
--sleep 1

--echo
--echo ############################################################
--echo # 11. Wait until T1 & T2 & T3 is prepared on server2.
--let $rpl_connection_name= server2
--source include/rpl_connection.inc
# Wait for the debug sync to be reached.
SET DEBUG_SYNC= "now WAIT_FOR signal.after_before_message_send_after_applier_prepare_waiting";
SET DEBUG_SYNC= 'now SIGNAL signal.after_before_message_send_after_applier_prepare_continue';
SET @@GLOBAL.DEBUG= '-d,group_replication_wait_before_message_send_after_applier_prepare';

--sleep 1


--echo
--echo ############################################################
--echo # 
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
SET @@GLOBAL.DEBUG= '+d,group_replication_wait_on_after_certification';


--echo
--echo ############################################################
--echo # 
--connection conn13

--send INSERT INTO t1 VALUES (4)


--echo
--echo ############################################################
--echo # 
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
SET DEBUG_SYNC= "now WAIT_FOR signal.after_commit_transaction_waiting";
SET DEBUG_SYNC= 'now SIGNAL signal.after_commit_transaction_continue';
SET @@GLOBAL.DEBUG= '-d,group_replication_wait_after_commit';

--sleep 1

--echo
--echo ############################################################
--echo # 
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
SET DEBUG_SYNC= "now WAIT_FOR signal.consistency_after_conditional_trap_waiting";
SET DEBUG_SYNC= 'now SIGNAL signal.consistency_after_conditional_trap_continue';
SET @@GLOBAL.DEBUG= '-d,consistency_after_conditional_trap';
SET @@GLOBAL.DEBUG= '-d,consistency_after_set_trap';

--sleep 1

--echo
--echo ############################################################
--echo # 
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
SET DEBUG_SYNC= "now WAIT_FOR signal.after_certification_waiting";
SET DEBUG_SYNC= 'now SIGNAL signal.after_certification_continue';
--sleep 1
SET @@GLOBAL.DEBUG= '-d,group_replication_wait_on_after_certification';
--sleep 1
SET DEBUG_SYNC= "reset";
--sleep 1

--echo
--echo ############################################################
--echo # 12. Wait T1 & T2 & T3 response
--connection conn10
--reap
--connection conn11
--reap
--connection conn12
--reap
--connection conn13
--reap

--echo
--echo ############################################################
--echo # 13. Check that all members in the group should be ONLINE.
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
let $wait_condition=SELECT COUNT(*)=3 FROM performance_schema.replication_group_members where MEMBER_STATE="ONLINE";
--source include/wait_condition.inc

--echo
--echo ############################################################
--echo # 14. Check that all members in the group should be ONLINE.
--disconnect conn10
--disconnect conn11
--disconnect conn12
--disconnect conn13

--let $rpl_connection_name= server1
--source include/rpl_connection.inc
drop table t1;

--source include/group_replication_end.inc
