--source include/big_test.inc
--source include/not_valgrind.inc
--let $group_replication_group_name= 8a94f357-aab4-11df-86ab-c80aa9429573
--source include/have_group_replication_plugin.inc
--let $rpl_skip_group_replication_start= 1
--let $rpl_server_count= 3
--source include/group_replication.inc

# Validate plugins
--let plugins = CLONE_PLUGIN,GROUP_REPLICATION
--source include/check_plugin_dir.inc

--connection server1
--replace_result $CLONE_PLUGIN CLONE_PLUGIN
--eval INSTALL PLUGIN clone SONAME '$CLONE_PLUGIN'
--connection server2
--replace_result $CLONE_PLUGIN CLONE_PLUGIN
--eval INSTALL PLUGIN clone SONAME '$CLONE_PLUGIN'
--connection server3
--replace_result $CLONE_PLUGIN CLONE_PLUGIN
--eval INSTALL PLUGIN clone SONAME '$CLONE_PLUGIN'

--connection server3
--let $_group_replication_local_address= `SELECT @@GLOBAL.group_replication_local_address`
--let $_group_replication_group_seeds= `SELECT @@GLOBAL.group_replication_group_seeds`
--let $_group_replication_start_on_boot= `SELECT @@GLOBAL.group_replication_start_on_boot`
--let $_group_replication_comm_stack= `SELECT @@GLOBAL.group_replication_communication_stack`
--let $_group_replication_start_on_boot_save= `SELECT @@GLOBAL.group_replication_start_on_boot`
SET PERSIST group_replication_start_on_boot = OFF;
--let $plugin_list= $GROUP_REPLICATION
--source include/spawn_monitoring_process.inc
--connection server3
--let $start_test_time=`select logged from performance_schema.error_log order by logged desc limit 1`

--disable_query_log
--eval SET PERSIST group_replication_group_name= "$group_replication_group_name"
--eval SET PERSIST group_replication_local_address= "$_group_replication_local_address"
--eval SET PERSIST group_replication_group_seeds= "$_group_replication_group_seeds"
--eval SET PERSIST  group_replication_communication_stack= "$_group_replication_comm_stack"
eval SET PERSIST group_replication_start_on_boot= ON;
--enable_query_log


--connection server1
--source include/start_and_bootstrap_group_replication.inc
--connection server2
--source include/start_group_replication.inc

--let $group_replication_number_of_members= 2
--source include/gr_wait_for_number_of_members.inc

--connection server1
CREATE TABLE t1 (c1 INT PRIMARY KEY, c2 INT);
INSERT INTO t1 VALUES (1,1);
--connection server2
--source include/rpl_sync.inc

--echo ## test chose donor without clone
--connection server2
LOCK TABLES t1 READ;
--connection server1
--let $s_cnt=20
while ($s_cnt)
{
  UPDATE t1 SET c2=c2+1;
  dec $s_cnt;
}

--connection server3
SET GLOBAL group_replication_donor_threshold=10;
--source include/start_group_replication.inc
--let $suitable_log=host:127.0.0.1, port:$SERVER_MYPORT_1 is suitable for donor
--let $not_suitable_log=host:127.0.0.1, port:$SERVER_MYPORT_2 is not suitable for donor
--replace_result $SERVER_MYPORT_1 port_1 $start_test_time 0
eval SELECT COUNT(*) FROM performance_schema.error_log WHERE data LIKE '%$suitable_log%' AND logged > '$start_test_time';
--replace_result $SERVER_MYPORT_2 port_2 $start_test_time 0
eval SELECT COUNT(*) FROM performance_schema.error_log WHERE data LIKE '%$not_suitable_log%' AND logged > '$start_test_time';
--source include/stop_group_replication.inc

--connection server2
UNLOCK TABLES;
--source include/rpl_sync.inc

--echo ## test chose donor with clone
--connection server2
LOCK TABLES t1 READ;
--connection server1
--let $s_cnt=20
while ($s_cnt)
{
  UPDATE t1 SET c2=c2+1;
  dec $s_cnt;
}

--connection server3
SET GLOBAL group_replication_donor_threshold=10;
SET GLOBAL group_replication_clone_threshold=1;
START GROUP_REPLICATION;
--source include/wait_until_disconnected.inc

--connection server2
UNLOCK TABLES;

--connection server3
--let $rpl_server_number= 3
--source include/rpl_reconnect.inc
--let $group_replication_member_state=ONLINE
--source include/gr_wait_for_member_state.inc
--let $suitable_log=host:127.0.0.1, port:$SERVER_MYPORT_1 is suitable for clone donor
--let $not_suitable_log=host:127.0.0.1, port:$SERVER_MYPORT_2 is not suitable for clone donor
--replace_result $SERVER_MYPORT_1 port_1 $start_test_time 0
eval SELECT COUNT(*) FROM performance_schema.error_log WHERE data LIKE '%$suitable_log%' AND logged>'$start_test_time';
--replace_result $SERVER_MYPORT_2 port_2 $start_test_time 0
eval SELECT COUNT(*) FROM performance_schema.error_log WHERE data LIKE '%$not_suitable_log%' AND logged>'$start_test_time';

## do clean
--connection server1
DROP TABLE t1;
--connection server2
--source include/rpl_sync.inc
--connection server3
--source include/rpl_sync.inc

--connection server1
UNINSTALL PLUGIN clone;
--connection server2
UNINSTALL PLUGIN clone;
--connection server3
UNINSTALL PLUGIN clone;

--connection server3
set session sql_log_bin=0;
call mtr.add_suppression("This member will start distributed recovery using clone. It is due to the number of missing transactions being higher than the configured threshold of*");
call mtr.add_suppression("Clone removing all user data for provisioning: Started");
call mtr.add_suppression("Clone removing all user data for provisioning: Finished");
set session sql_log_bin=1;
RESET PERSIST;
--source include/clean_monitoring_process.inc
--source include/group_replication_end.inc
