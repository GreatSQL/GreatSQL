################################################################################
# Validate that list of senders is updated when the sources are (fake) 5.7
# servers.
#
# Test:
#  0. The test requires 3 servers:
#       server1: group primary
#       server2: group secondary
#       server3: group secondary
#  1. Deploy one group which have 3 members in single primary mode. and check vip tope
#  2. test MGR status change then check vip_tope status
#  3. check greatdb_ha variables change then check vip_tope status
#  4. Clean up.
################################################################################

--disable_query_log
CALL mtr.add_suppression("Sending passwords in plain text without SSL/TLS is extremely insecure");
--enable_query_log

--source include/big_test.inc
--source include/have_debug.inc
--source include/have_group_replication_plugin.inc
--let $group_replication_group_name= aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa
--let $rpl_skip_group_replication_start= 1
--let $rpl_server_count= 3
--source include/group_replication.inc

--echo
--echo ############################################################
--echo # 1. Deploy one group which have 3 members in single primary mode.
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--eval INSTALL PLUGIN greatdb_ha SONAME 'greatdb_ha.so'
set global debug = 'd,test_vip';
--let $server1_uuid= `SELECT @@server_uuid`
--source include/start_and_bootstrap_group_replication.inc
--replace_result $server1_uuid MEMBER1_UUID
select @@greatdb_ha_vip_tope;

--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--eval INSTALL PLUGIN greatdb_ha SONAME 'greatdb_ha.so'
set global debug = 'd,test_vip';
--source include/start_group_replication.inc
--let $server2_uuid= `SELECT @@server_uuid`
--replace_result $server1_uuid MEMBER1_UUID $server2_uuid MEMBER2_UUID
select @@greatdb_ha_vip_tope;
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--replace_result $server1_uuid MEMBER1_UUID $server2_uuid MEMBER2_UUID
select @@greatdb_ha_vip_tope;

--let $rpl_connection_name= server3
--source include/rpl_connection.inc
--eval INSTALL PLUGIN greatdb_ha SONAME 'greatdb_ha.so'
set global debug = 'd,test_vip';
--source include/start_group_replication.inc
--let $server3_uuid= `SELECT @@server_uuid`
--replace_result $server1_uuid MEMBER1_UUID $server2_uuid MEMBER2_UUID $server3_uuid MEMBER3_UUID
select @@greatdb_ha_vip_tope;
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--replace_result $server1_uuid MEMBER1_UUID $server2_uuid MEMBER2_UUID $server3_uuid MEMBER3_UUID
select @@greatdb_ha_vip_tope;
--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--replace_result $server1_uuid MEMBER1_UUID $server2_uuid MEMBER2_UUID $server3_uuid MEMBER3_UUID
select @@greatdb_ha_vip_tope;

--echo
--echo ############################################################
--echo # 2. test MGR status change then check vip_tope status
--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--echo # test change master to server2
--replace_result $server2_uuid MEMBER2_UUID
--eval SELECT group_replication_set_as_primary("$server2_uuid")
--sleep 3
--replace_result $server1_uuid MEMBER1_UUID $server2_uuid MEMBER2_UUID $server3_uuid MEMBER3_UUID
select @@greatdb_ha_vip_tope;
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--replace_result $server1_uuid MEMBER1_UUID $server2_uuid MEMBER2_UUID $server3_uuid MEMBER3_UUID
select @@greatdb_ha_vip_tope;
--let $rpl_connection_name= server3
--source include/rpl_connection.inc
--replace_result $server1_uuid MEMBER1_UUID $server2_uuid MEMBER2_UUID $server3_uuid MEMBER3_UUID
select @@greatdb_ha_vip_tope;

--echo # primary server2 stop group_replication, then check vip_tope
--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--source include/stop_group_replication.inc

--let $rpl_connection_name= server1
--source include/rpl_connection.inc
sleep 5;
--replace_result $server1_uuid MEMBER1_UUID $server2_uuid MEMBER2_UUID $server3_uuid MEMBER3_UUID
select @@greatdb_ha_vip_tope;
--let $rpl_connection_name= server3
--source include/rpl_connection.inc
--replace_result $server1_uuid MEMBER1_UUID $server2_uuid MEMBER2_UUID $server3_uuid MEMBER3_UUID
select @@greatdb_ha_vip_tope;


--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--source include/start_group_replication.inc
--sleep 5

--echo # secondary server3, server2 stop group_replication, then check vip_tope
--let $rpl_connection_name= server3
--source include/rpl_connection.inc
--source include/stop_group_replication.inc

--let $rpl_connection_name= server1
--source include/rpl_connection.inc
sleep 5;
--replace_result $server1_uuid MEMBER1_UUID $server2_uuid MEMBER2_UUID $server3_uuid MEMBER3_UUID
select @@greatdb_ha_vip_tope;
--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--replace_result $server1_uuid MEMBER1_UUID $server2_uuid MEMBER2_UUID $server3_uuid MEMBER3_UUID
select @@greatdb_ha_vip_tope;

--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--source include/stop_group_replication.inc

--let $rpl_connection_name= server1
--source include/rpl_connection.inc
sleep 20;
--replace_result $server1_uuid MEMBER1_UUID $server2_uuid MEMBER2_UUID $server3_uuid MEMBER3_UUID
select @@greatdb_ha_vip_tope;

--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--source include/start_group_replication.inc
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
sleep 10;
--replace_result $server1_uuid MEMBER1_UUID $server2_uuid MEMBER2_UUID $server3_uuid MEMBER3_UUID
select @@greatdb_ha_vip_tope;
--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--replace_result $server1_uuid MEMBER1_UUID $server2_uuid MEMBER2_UUID $server3_uuid MEMBER3_UUID
select @@greatdb_ha_vip_tope;

--let $rpl_connection_name= server3
--source include/rpl_connection.inc
--source include/start_group_replication.inc
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
sleep 10;
--replace_result $server1_uuid MEMBER1_UUID $server2_uuid MEMBER2_UUID $server3_uuid MEMBER3_UUID
select @@greatdb_ha_vip_tope;
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--replace_result $server1_uuid MEMBER1_UUID $server2_uuid MEMBER2_UUID $server3_uuid MEMBER3_UUID
select @@greatdb_ha_vip_tope;
--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--replace_result $server1_uuid MEMBER1_UUID $server2_uuid MEMBER2_UUID $server3_uuid MEMBER3_UUID
select @@greatdb_ha_vip_tope;


--echo
--echo ############################################################
--echo # 3. check greatdb_ha variables change then check vip_tope status
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--error 1231
set global greatdb_ha_mgr_vip_ip = "192.168.2.";

--echo # test set write vip, and check vip_tope changed
set global greatdb_ha_mgr_vip_ip = "192.168.2.126";
--let $rpl_connection_name= server2
--source include/rpl_connection.inc
set global greatdb_ha_mgr_vip_ip = "192.168.2.126";
--let $rpl_connection_name= server3
--source include/rpl_connection.inc
set global greatdb_ha_mgr_vip_ip = "192.168.2.126";
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
sleep 5;
--replace_result $server1_uuid MEMBER1_UUID $server2_uuid MEMBER2_UUID $server3_uuid MEMBER3_UUID
select @@greatdb_ha_vip_tope;
--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--replace_result $server1_uuid MEMBER1_UUID $server2_uuid MEMBER2_UUID $server3_uuid MEMBER3_UUID
select @@greatdb_ha_vip_tope;
--let $rpl_connection_name= server3
--source include/rpl_connection.inc
--replace_result $server1_uuid MEMBER1_UUID $server2_uuid MEMBER2_UUID $server3_uuid MEMBER3_UUID
select @@greatdb_ha_vip_tope;

--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--error 1231
set global greatdb_ha_mgr_read_vip_ips = "192.168.2.128,192.168.2.129,192.168.2.";

--echo # test set read vip, and read vip nums larger than secondary_members nums
set global greatdb_ha_mgr_read_vip_ips = "192.168.2.128,192.168.2.129,192.168.2.130";

--let $rpl_connection_name= server2
--source include/rpl_connection.inc
set global greatdb_ha_mgr_read_vip_ips = "192.168.2.128,192.168.2.129,192.168.2.130";
--let $rpl_connection_name= server3
--source include/rpl_connection.inc
set global greatdb_ha_mgr_read_vip_ips = "192.168.2.128,192.168.2.129,192.168.2.130";
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
sleep 5;
--replace_result $server1_uuid MEMBER1_UUID $server2_uuid MEMBER2_UUID $server3_uuid MEMBER3_UUID
select @@greatdb_ha_vip_tope;
--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--replace_result $server1_uuid MEMBER1_UUID $server2_uuid MEMBER2_UUID $server3_uuid MEMBER3_UUID
select @@greatdb_ha_vip_tope;
--let $rpl_connection_name= server3
--source include/rpl_connection.inc
--replace_result $server1_uuid MEMBER1_UUID $server2_uuid MEMBER2_UUID $server3_uuid MEMBER3_UUID
select @@greatdb_ha_vip_tope;

--echo # test set read vip, and read vip nums less than secondary_members nums
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
set global greatdb_ha_mgr_read_vip_ips = "192.168.2.128";
--let $rpl_connection_name= server2
--source include/rpl_connection.inc
set global greatdb_ha_mgr_read_vip_ips = "192.168.2.128";
--let $rpl_connection_name= server3
--source include/rpl_connection.inc
set global greatdb_ha_mgr_read_vip_ips = "192.168.2.128";
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
sleep 5;
--replace_result $server1_uuid MEMBER1_UUID $server2_uuid MEMBER2_UUID $server3_uuid MEMBER3_UUID
select @@greatdb_ha_vip_tope;
--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--replace_result $server1_uuid MEMBER1_UUID $server2_uuid MEMBER2_UUID $server3_uuid MEMBER3_UUID
select @@greatdb_ha_vip_tope;
--let $rpl_connection_name= server3
--source include/rpl_connection.inc
--replace_result $server1_uuid MEMBER1_UUID $server2_uuid MEMBER2_UUID $server3_uuid MEMBER3_UUID
select @@greatdb_ha_vip_tope;

--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--echo # test set read vip, and read vip nums larger than secondary_members nums when greatdb_ha_mgr_read_vip_floating_type is TO_PRIMARY
set global greatdb_ha_mgr_read_vip_floating_type=TO_PRIMARY;
set global greatdb_ha_mgr_read_vip_ips = "192.168.2.128,192.168.2.129,192.168.2.130";
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
set global greatdb_ha_mgr_read_vip_floating_type=TO_PRIMARY;
set global greatdb_ha_mgr_read_vip_ips = "192.168.2.128,192.168.2.129,192.168.2.130";
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
set global greatdb_ha_mgr_read_vip_floating_type=TO_PRIMARY;
set global greatdb_ha_mgr_read_vip_ips = "192.168.2.128,192.168.2.129,192.168.2.130";
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
sleep 5;
--replace_result $server1_uuid MEMBER1_UUID $server2_uuid MEMBER2_UUID $server3_uuid MEMBER3_UUID
select @@greatdb_ha_vip_tope;
--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--replace_result $server1_uuid MEMBER1_UUID $server2_uuid MEMBER2_UUID $server3_uuid MEMBER3_UUID
select @@greatdb_ha_vip_tope;
--let $rpl_connection_name= server3
--source include/rpl_connection.inc
--replace_result $server1_uuid MEMBER1_UUID $server2_uuid MEMBER2_UUID $server3_uuid MEMBER3_UUID
select @@greatdb_ha_vip_tope;

--echo
--echo ############################################################
--echo # 4. clean up
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--eval UNINSTALL PLUGIN greatdb_ha
set global debug = '';

--let $rpl_connection_name= server3
--source include/rpl_connection.inc
--source include/stop_group_replication.inc
--eval UNINSTALL PLUGIN greatdb_ha
set global debug = '';

--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--source include/stop_group_replication.inc
--eval UNINSTALL PLUGIN greatdb_ha
set global debug = '';

--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--source include/stop_group_replication.inc

--let $rpl_group_replication_reset_persistent_vars=1
--source include/group_replication_end.inc

