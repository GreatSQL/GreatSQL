-- source include/have_binlog_format_row.inc
# Skip on group replication runs
--source include/not_group_replication_plugin.inc
# Test requires master-info-repository=TABLE, relay-log-info-repository=TABLE
--source include/have_slave_repository_type_table.inc

--echo #
--echo # 1. Set up masters server_1 and server_3 with server_2 being a slave.
--echo #.
--let $rpl_topology= 1->2,3->2
--let $rpl_multi_source= 1
--source include/rpl_init.inc

--echo #
--echo # 2. Stop slave (on server_2).
--echo #
#sync the slave with server_1
--let $rpl_connection_name= server_1
--source include/rpl_connection.inc

--let $rpl_channel_name= 'channel_1'
--let $sync_slave_connection= server_2
--source include/sync_slave_sql_with_master.inc

# sync the slave with server_3
--let $rpl_connection_name= server_3
--source include/rpl_connection.inc

--let $rpl_channel_name= 'channel_3'
--let $sync_slave_connection=server_2
--source include/sync_slave_sql_with_master.inc
SELECT CHANNEL_NAME FROM performance_schema.replication_connection_status;
--source include/rpl_stop_slaves.inc

--echo #
--echo # 3. Create a table test.t1 on server_1 and insert values in the table.
--let $rpl_connection_name= server_1
--source include/rpl_connection.inc
RESET MASTER;
SHOW MASTER STATUS;
--let $server_1_log_file= query_get_value(SHOW MASTER STATUS, File, 1)
--let $server_1_log_pos= query_get_value(SHOW MASTER STATUS, Position, 1)
DELIMITER |;
CREATE PROCEDURE dml_insert_t1()
BEGIN
  DECLARE i INT DEFAULT 0;
  WHILE i < 1000 DO
    INSERT INTO t1 SET NAME='greatdb', ADDRESS='beijing', SEX='xxx', OTHER='nothing';
    SET i = i + 1;
  END WHILE;
END;|
delimiter ;|
CREATE TABLE t1(
  id int NOT NULL AUTO_INCREMENT,
  name varchar(36) NOT NULL,
  address varchar(36) NOT NULL DEFAULT '',
  sex varchar(12) NOT NULL DEFAULT 'Man',
  other varchar(256) NOT NULL,
  PRIMARY KEY (id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
CALL dml_insert_t1();
DROP TABLE t1;
DROP PROCEDURE dml_insert_t1;
SHOW MASTER STATUS;
--let $last_server_1_log_pos= query_get_value(SHOW MASTER STATUS, Position, 1)

--echo #
--echo # 4. Create a table test.t3 on server_3 and insert values in the table.
--let $rpl_connection_name= server_3
--source include/rpl_connection.inc
RESET MASTER;
SHOW MASTER STATUS;
--let $server_3_log_file= query_get_value(SHOW MASTER STATUS, File, 1)
--let $server_3_log_pos= query_get_value(SHOW MASTER STATUS, Position, 1)
DELIMITER |;
CREATE PROCEDURE dml_insert_t3()
BEGIN
  DECLARE i INT DEFAULT 0;
  WHILE i < 2000 DO
    INSERT INTO t3 SET NAME='greatdb', ADDRESS='beijing', SEX='xxx', OTHER='nothing';
    SET i = i + 1;
  END WHILE;
END;|
delimiter ;|
CREATE TABLE t3(
  id int NOT NULL AUTO_INCREMENT,
  name varchar(36) NOT NULL,
  address varchar(36) NOT NULL DEFAULT '',
  sex varchar(12) NOT NULL DEFAULT 'Man',
  other varchar(256) NOT NULL,
  PRIMARY KEY (id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
CALL dml_insert_t3();
DROP TABLE t3;
DROP PROCEDURE dml_insert_t3;
SHOW MASTER STATUS;
--let $last_server_3_log_pos= query_get_value(SHOW MASTER STATUS, Position, 1)

--echo #
--echo # 5. Sync the slave (server_2) with both masters (server_1 and server_3)
--echo #
--let $rpl_connection_name= server_2
--source include/rpl_connection.inc

DELIMITER |;
CREATE FUNCTION split_str(x VARCHAR(255), delim VARCHAR(12), pos INT)
RETURNS VARCHAR(255)
BEGIN
   RETURN REPLACE(SUBSTRING(SUBSTRING_INDEX(x, delim, pos),
           LENGTH(SUBSTRING_INDEX(x, delim, pos -1)) + 1),
           delim, '');
END|
CREATE PROCEDURE test_speed()
BEGIN
  DECLARE i INT DEFAULT 0;
  DECLARE channel_count INT DEFAULT 0;
  DECLARE data_speed INT DEFAULT 0;
  DECLARE channel_name VARCHAR(255);
  DECLARE str_channel_speed VARCHAR(255);
  DECLARE str_data_speed VARCHAR(1024);
  DECLARE str_res VARCHAR(2048) DEFAULT '';
  SELECT VARIABLE_VALUE INTO str_data_speed from performance_schema.global_status where VARIABLE_NAME='Rpl_data_speed';
  IF @@rpl_read_binlog_speed_limit > 0 THEN 
    IF LENGTH(str_data_speed) > 0 THEN
      SET channel_count = CHAR_LENGTH(str_data_speed) - CHAR_LENGTH(REPLACE(str_data_speed, ',', '')) + 1;
      WHILE i < channel_count DO
        SET str_channel_speed = split_str(str_data_speed, ',', i+1);
        SET channel_name = split_str(str_channel_speed, '=', 1);
        SET data_speed = split_str(str_channel_speed, '=', 2);
        IF data_speed <= @@rpl_read_binlog_speed_limit THEN
          SET str_res = CONCAT(str_res, IF (i <> 0, ',', ''), channel_name, ': [PASS] ');
        ELSE
          SET str_res = CONCAT(str_res, IF (i <> 0, ',', ''), channel_name, ': [FAILED] ');
        END IF;
        SET i = i + 1;
      END WHILE;
      SELECT
        substring_index(substring_index(str_res,',',help_topic_id + 1),',' ,- 1) AS RESULT
      FROM
        mysql.help_topic
      WHERE
        help_topic_id < (length(str_res) - length(REPLACE (str_res, ',', '')) + 1) ORDER BY RESULT;
    ELSE
      SELECT "No speed data";
    END IF;
  END IF;
END;|
delimiter ;|

--echo #
--echo # 5.1 Set the speed limit.
--echo #
SET GLOBAL rpl_read_binlog_speed_limit = 64;

--echo #
--echo # 5.2 Reset and start slave.
--echo #
--replace_result $SERVER_MYPORT_1 SERVER_PORT_1
--eval CHANGE REPLICATION SOURCE TO SOURCE_HOST='127.0.0.1', SOURCE_PORT=$SERVER_MYPORT_1, SOURCE_LOG_FILE='$server_1_log_file', SOURCE_LOG_POS=$server_1_log_pos FOR CHANNEL 'channel_1'
--replace_result $SERVER_MYPORT_3 SERVER_PORT_3
--eval CHANGE REPLICATION SOURCE TO SOURCE_HOST='127.0.0.1', SOURCE_PORT=$SERVER_MYPORT_3, SOURCE_LOG_FILE='$server_3_log_file', SOURCE_LOG_POS=$server_3_log_pos FOR CHANNEL 'channel_3'
RESET REPLICA FOR CHANNEL 'channel_1';
RESET REPLICA FOR CHANNEL 'channel_3';
--source include/rpl_start_slaves.inc
--let $rpl_channel_name= 'channel_1'
--source include/wait_for_slave_to_start.inc
--let $rpl_channel_name= 'channel_3'
--source include/wait_for_slave_to_start.inc

--echo #
--echo # 5.3 Determine whether the data speed is within the speed limit.
--echo #
SET @start = unix_timestamp(now());
--eval SET @least_expect_time_channel_1 = FLOOR(($last_server_1_log_pos - $server_1_log_pos) / 1024 / @@rpl_read_binlog_speed_limit)
--eval SET @least_expect_time_channel_3 = FLOOR(($last_server_3_log_pos - $server_3_log_pos) / 1024 / @@rpl_read_binlog_speed_limit)
SELECT @least_expect_time_channel_1, @least_expect_time_channel_3, 
  SLEEP(FLOOR(1 + RAND() * IF(@least_expect_time_channel_1 > @least_expect_time_channel_3, @least_expect_time_channel_3, @least_expect_time_channel_1)));
--eval CALL test_speed()

--echo #
--echo # 5.4 Waits until both the IO and SQL threads of the current connection have started
--echo #
# sync the slave with server_1
--let $rpl_connection_name= server_1
--source include/rpl_connection.inc

--let $rpl_channel_name= 'channel_1'
--let $sync_slave_connection= server_2
--source include/sync_slave_io_with_master.inc

# sync the slave with server_3
--let $rpl_connection_name= server_3
--source include/rpl_connection.inc

--let $rpl_channel_name= 'channel_3'
--let $sync_slave_connection= server_2
--source include/sync_slave_io_with_master.inc

--echo #
--echo # 5.5 Determine whether the total transmission time is greater than or equal to the expected time.
--echo #
SET @end = unix_timestamp(now());
SELECT @least_expect_time_channel_1, @least_expect_time_channel_3, 
  (@end - @start) >= IF(@least_expect_time_channel_1 > @least_expect_time_channel_3, @least_expect_time_channel_1, @least_expect_time_channel_3) as result;
SET GLOBAL rpl_read_binlog_speed_limit = 0;
DROP FUNCTION split_str;
DROP PROCEDURE test_speed;

--echo #
--echo #  5.6 sync the slave with both masters
--echo #
#sync the slave with server_1
--let $rpl_connection_name= server_1
--source include/rpl_connection.inc

--let $rpl_channel_name= 'channel_1'
--let $sync_slave_connection=server_2
--source include/sync_slave_sql_with_master.inc

# sync the slave with server_3
--let $rpl_connection_name= server_3
--source include/rpl_connection.inc

--let $rpl_channel_name= 'channel_3'
--let $sync_slave_connection= server_2
--source include/sync_slave_sql_with_master.inc

--let $rpl_skip_sync= 1
--source include/rpl_end.inc
