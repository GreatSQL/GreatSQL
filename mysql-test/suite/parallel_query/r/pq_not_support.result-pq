CREATE TABLE t0 ( col1 INT NOT NULL, col2 INT ) ENGINE=InnoDB;
insert into t0 values(0,1),(1,2),(2,3);
CREATE TABLE t1 (col3 DECIMAL(35,0) DEFAULT NULL, col1 INT NOT NULL, col2 INT NOT NULL DEFAULT '0', PRIMARY KEY (col1)) ENGINE=MyISAM;
REPLACE INTO t1 ( col1,col2) SELECT col1,col2 FROM t0;
select * from t1;
col3	col1	col2
NULL	0	1
NULL	1	2
NULL	2	3
drop table t0, t1;
drop database if exists pq_bit_database;
create database pq_bit_database;
use pq_bit_database;
CREATE TABLE t1 (a char(1), b VARBINARY(1)) ENGINE=InnoDB;
INSERT INTO t1 VALUES ('a', null);
INSERT INTO t1 VALUES ('a', null);
INSERT INTO t1 VALUES ('b', null);
INSERT INTO t1 VALUES ('b', 0x12);
INSERT INTO t1 VALUES ('c', 0x12);
INSERT INTO t1 VALUES ('b', 0x02);
INSERT INTO t1 VALUES ('c', 0x40);
ANALYZE TABLE t1;
Table	Op	Msg_type	Msg_text
pq_bit_database.t1	analyze	status	OK
SET @orig_sql_mode = @@sql_mode;
set sql_mode = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';
EXPLAIN SELECT a, BIT_AND(b) FROM t1;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	NULL	ALL	NULL	NULL	NULL	NULL	7	100.00	NULL
Warnings:
Note	1003	/* select#1 */ select `pq_bit_database`.`t1`.`a` AS `a`,bit_and(`pq_bit_database`.`t1`.`b`) AS `BIT_AND(b)` from `pq_bit_database`.`t1`
EXPLAIN SELECT a, BIT_OR(b) FROM t1;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	NULL	ALL	NULL	NULL	NULL	NULL	7	100.00	NULL
Warnings:
Note	1003	/* select#1 */ select `pq_bit_database`.`t1`.`a` AS `a`,bit_or(`pq_bit_database`.`t1`.`b`) AS `BIT_OR(b)` from `pq_bit_database`.`t1`
EXPLAIN SELECT a, BIT_XOR(b) FROM t1;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	NULL	ALL	NULL	NULL	NULL	NULL	7	100.00	NULL
Warnings:
Note	1003	/* select#1 */ select `pq_bit_database`.`t1`.`a` AS `a`,bit_xor(`pq_bit_database`.`t1`.`b`) AS `BIT_XOR(b)` from `pq_bit_database`.`t1`
EXPLAIN SELECT a, 1 + BIT_AND(b) FROM t1;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	NULL	ALL	NULL	NULL	NULL	NULL	7	100.00	NULL
Warnings:
Note	1003	/* select#1 */ select `pq_bit_database`.`t1`.`a` AS `a`,(1 + bit_and(`pq_bit_database`.`t1`.`b`)) AS `1 + BIT_AND(b)` from `pq_bit_database`.`t1`
EXPLAIN SELECT a, 1 + BIT_OR(b) FROM t1;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	NULL	ALL	NULL	NULL	NULL	NULL	7	100.00	NULL
Warnings:
Note	1003	/* select#1 */ select `pq_bit_database`.`t1`.`a` AS `a`,(1 + bit_or(`pq_bit_database`.`t1`.`b`)) AS `1 + BIT_OR(b)` from `pq_bit_database`.`t1`
EXPLAIN SELECT a, 1 + BIT_XOR(b) FROM t1;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	NULL	ALL	NULL	NULL	NULL	NULL	7	100.00	NULL
Warnings:
Note	1003	/* select#1 */ select `pq_bit_database`.`t1`.`a` AS `a`,(1 + bit_xor(`pq_bit_database`.`t1`.`b`)) AS `1 + BIT_XOR(b)` from `pq_bit_database`.`t1`
EXPLAIN SELECT a, SUM(b) + BIT_AND(b) FROM t1;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	NULL	ALL	NULL	NULL	NULL	NULL	7	100.00	NULL
Warnings:
Note	1003	/* select#1 */ select `pq_bit_database`.`t1`.`a` AS `a`,(sum(`pq_bit_database`.`t1`.`b`) + bit_and(`pq_bit_database`.`t1`.`b`)) AS `SUM(b) + BIT_AND(b)` from `pq_bit_database`.`t1`
EXPLAIN SELECT a, SUM(b) + BIT_OR(b) FROM t1;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	NULL	ALL	NULL	NULL	NULL	NULL	7	100.00	NULL
Warnings:
Note	1003	/* select#1 */ select `pq_bit_database`.`t1`.`a` AS `a`,(sum(`pq_bit_database`.`t1`.`b`) + bit_or(`pq_bit_database`.`t1`.`b`)) AS `SUM(b) + BIT_OR(b)` from `pq_bit_database`.`t1`
EXPLAIN SELECT a, SUM(b) + BIT_XOR(b) FROM t1;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	NULL	ALL	NULL	NULL	NULL	NULL	7	100.00	NULL
Warnings:
Note	1003	/* select#1 */ select `pq_bit_database`.`t1`.`a` AS `a`,(sum(`pq_bit_database`.`t1`.`b`) + bit_xor(`pq_bit_database`.`t1`.`b`)) AS `SUM(b) + BIT_XOR(b)` from `pq_bit_database`.`t1`
EXPLAIN SELECT a, 1 + BIT_AND(b) FROM t1 GROUP BY a;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	NULL	ALL	NULL	NULL	NULL	NULL	7	100.00	Using temporary
Warnings:
Note	1003	/* select#1 */ select `pq_bit_database`.`t1`.`a` AS `a`,(1 + bit_and(`pq_bit_database`.`t1`.`b`)) AS `1 + BIT_AND(b)` from `pq_bit_database`.`t1` group by `pq_bit_database`.`t1`.`a`
EXPLAIN SELECT a, 1 + BIT_OR(b) FROM t1 GROUP BY a;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	NULL	ALL	NULL	NULL	NULL	NULL	7	100.00	Using temporary
Warnings:
Note	1003	/* select#1 */ select `pq_bit_database`.`t1`.`a` AS `a`,(1 + bit_or(`pq_bit_database`.`t1`.`b`)) AS `1 + BIT_OR(b)` from `pq_bit_database`.`t1` group by `pq_bit_database`.`t1`.`a`
EXPLAIN SELECT a, 1 + BIT_XOR(b) FROM t1 GROUP BY a;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	NULL	ALL	NULL	NULL	NULL	NULL	7	100.00	Using temporary
Warnings:
Note	1003	/* select#1 */ select `pq_bit_database`.`t1`.`a` AS `a`,(1 + bit_xor(`pq_bit_database`.`t1`.`b`)) AS `1 + BIT_XOR(b)` from `pq_bit_database`.`t1` group by `pq_bit_database`.`t1`.`a`
EXPLAIN SELECT a, b FROM t1 having BIT_AND(b) > 0;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	NULL	ALL	NULL	NULL	NULL	NULL	7	100.00	NULL
Warnings:
Note	1003	/* select#1 */ select `pq_bit_database`.`t1`.`a` AS `a`,`pq_bit_database`.`t1`.`b` AS `b` from `pq_bit_database`.`t1` having (bit_and(`pq_bit_database`.`t1`.`b`) > 0)
EXPLAIN SELECT a, b FROM t1 having BIT_OR(b) > 0;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	NULL	ALL	NULL	NULL	NULL	NULL	7	100.00	NULL
Warnings:
Note	1003	/* select#1 */ select `pq_bit_database`.`t1`.`a` AS `a`,`pq_bit_database`.`t1`.`b` AS `b` from `pq_bit_database`.`t1` having (bit_or(`pq_bit_database`.`t1`.`b`) > 0)
EXPLAIN SELECT a, b FROM t1 having BIT_XOR(b) > 0;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	NULL	ALL	NULL	NULL	NULL	NULL	7	100.00	NULL
Warnings:
Note	1003	/* select#1 */ select `pq_bit_database`.`t1`.`a` AS `a`,`pq_bit_database`.`t1`.`b` AS `b` from `pq_bit_database`.`t1` having (bit_xor(`pq_bit_database`.`t1`.`b`) > 0)
EXPLAIN SELECT a, BIT_AND(b) FROM t1 GROUP BY a ORDER BY BIT_AND(b);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	NULL	ALL	NULL	NULL	NULL	NULL	7	100.00	Using temporary; Using filesort
Warnings:
Note	1003	/* select#1 */ select `pq_bit_database`.`t1`.`a` AS `a`,bit_and(`pq_bit_database`.`t1`.`b`) AS `BIT_AND(b)` from `pq_bit_database`.`t1` group by `pq_bit_database`.`t1`.`a` order by bit_and(`pq_bit_database`.`t1`.`b`)
EXPLAIN SELECT a, BIT_AND(b) FROM t1 GROUP BY a ORDER BY BIT_OR(b);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	NULL	ALL	NULL	NULL	NULL	NULL	7	100.00	Using temporary; Using filesort
Warnings:
Note	1003	/* select#1 */ select `pq_bit_database`.`t1`.`a` AS `a`,bit_and(`pq_bit_database`.`t1`.`b`) AS `BIT_AND(b)` from `pq_bit_database`.`t1` group by `pq_bit_database`.`t1`.`a` order by bit_or(`pq_bit_database`.`t1`.`b`)
EXPLAIN SELECT a, BIT_AND(b) FROM t1 GROUP BY a ORDER BY BIT_XOR(b);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	NULL	ALL	NULL	NULL	NULL	NULL	7	100.00	Using temporary; Using filesort
Warnings:
Note	1003	/* select#1 */ select `pq_bit_database`.`t1`.`a` AS `a`,bit_and(`pq_bit_database`.`t1`.`b`) AS `BIT_AND(b)` from `pq_bit_database`.`t1` group by `pq_bit_database`.`t1`.`a` order by bit_xor(`pq_bit_database`.`t1`.`b`)
SELECT a, BIT_AND(b) FROM t1;
a	BIT_AND(b)
a	 
SELECT a, BIT_OR(b) FROM t1;
a	BIT_OR(b)
a	R
SELECT a, BIT_XOR(b) FROM t1;
a	BIT_XOR(b)
a	B
DROP TABLE t1;
SET sql_mode = @orig_sql_mode;
drop database pq_bit_database;
