/*****************************************************************************

Copyright (c) 1996, 2022, Oracle and/or its affiliates.
Copyright (c) 2024, GreatDB Software Co., Ltd.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License, version 2.0, as published by the
Free Software Foundation.

This program is also distributed with certain software (including but not
limited to OpenSSL) that is licensed under separate terms, as designated in a
particular file or component or in included license documentation. The authors
of MySQL hereby grant you an additional permission to link the program and
your derivative works with the separately licensed software that they have
included with MySQL.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU General Public License, version 2.0,
for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc.,
51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA

*****************************************************************************/

/** @file include/dict0boot.ic
 Data dictionary creation and booting

 Created 4/18/1996 Heikki Tuuri
 *******************************************************/

/** Returns a new row id.
 @return the new id */
static inline row_id_t dict_sys_get_new_row_id(void) {
  row_id_t id;

  dict_sys_mutex_enter();

  id = dict_sys->row_id;

  if (0 == (id % DICT_HDR_ROW_ID_WRITE_MARGIN)) {
    dict_hdr_flush_row_id();
  }

  dict_sys->row_id++;

  dict_sys_mutex_exit();

  return (id);
}

/** Allocate a new interval of row ids and return a new row id.
When size of current interval is zero, allocate a new interval of row ids and
return min row id in the new interval;
When size of current interval is greater than zero, return min row id in current
interval.
Calling this function in parallel loading case, can isolate row ids of different
threads to decrease cost of modifying BTree.
The format of interval is [left, right).
@param[in, out]     size      size of interval
@param[in, out]     left      min of interval
@param[in, out]     right     max of interval
@return the new id */
static inline row_id_t dict_sys_get_new_row_id_with_interval(uint64 &size,
                                                             uint64 &left,
                                                             uint64 &right) {
  ut_a(size > 0);
  ut_a(size <= INTERVAL_OF_ROW_ID_MAX_SIZE);

  if (left >= right) {
    dict_sys_mutex_enter();

    left = dict_sys->row_id;
    right = left + size;

    /*
     * Check if need to write row_id.
     * If the number of wrote points is more than zero, need to write the max
     * point. Such as [100, 600), there are 2 wrote points '256' and '512' in
     * this interval, need to write '512'.
     */
    uint64 multi_write_margin_left = left / DICT_HDR_ROW_ID_WRITE_MARGIN;
    uint64 multi_write_margin_right = right / DICT_HDR_ROW_ID_WRITE_MARGIN;
    if (multi_write_margin_right > multi_write_margin_left) {
      /* Set wrote point. */
      dict_sys->row_id =
          multi_write_margin_right * DICT_HDR_ROW_ID_WRITE_MARGIN;
      dict_hdr_flush_row_id();
    }

    /* Set row id. */
    dict_sys->row_id = right;

    dict_sys_mutex_exit();

    /* Get size of next interval. */
    size =
        std::min((size << 1), static_cast<uint64>(INTERVAL_OF_ROW_ID_MAX_SIZE));
  }

  return (row_id_t)left++;
}


/** Reads a row id from a record or other 6-byte stored form.
 @return row id */
static inline row_id_t dict_sys_read_row_id(
    const byte *field) /*!< in: record field */
{
  static_assert(DATA_ROW_ID_LEN == 6, "DATA_ROW_ID_LEN != 6");

  return (mach_read_from_6(field));
}

/** Writes a row id to a record or other 6-byte stored form. */
static inline void dict_sys_write_row_id(byte *field, /*!< in: record field */
                                         row_id_t row_id) /*!< in: row id */
{
  static_assert(DATA_ROW_ID_LEN == 6, "DATA_ROW_ID_LEN != 6");

  mach_write_to_6(field, row_id);
}

/** Check if a table id belongs to old innodb internal system table.
@param[in]      id              table id
@return true if the table id belongs to a system table. */
static inline bool dict_is_old_sys_table(table_id_t id) {
  if (srv_is_upgrade_mode) {
    return (id < DICT_HDR_FIRST_ID);
  }
  return (false);
}
